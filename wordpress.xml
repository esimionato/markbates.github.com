<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.3.1" created="2012-04-04 18:55" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>Meta Bates</title>
	<link>http://www.metabates.com</link>
	<description>The technical ramblings of Mark Bates.</description>
	<pubDate>Wed, 04 Apr 2012 18:55:39 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://www.metabates.com</wp:base_site_url>
	<wp:base_blog_url>http://www.metabates.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>mark@markbates.com</wp:author_email><wp:author_display_name><![CDATA[Mark Bates]]></wp:author_display_name><wp:author_first_name><![CDATA[Mark]]></wp:author_first_name><wp:author_last_name><![CDATA[Bates]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>general</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[General]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>217</wp:term_id><wp:category_nicename>music-general</wp:category_nicename><wp:category_parent>general</wp:category_parent><wp:cat_name><![CDATA[Music]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>news</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[News]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>press</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Press]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>releases</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Releases]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>11</wp:term_id><wp:category_nicename>ruby</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ruby]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>tutorials</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Tutorials]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>updates</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Updates]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>137</wp:term_id><wp:tag_slug>mt_keywords</wp:tag_slug><wp:tag_name><![CDATA[!$mt_keywords$!]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>145</wp:term_id><wp:tag_slug>070</wp:tag_slug><wp:tag_name><![CDATA[0.7.0]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug>active-record</wp:tag_slug><wp:tag_name><![CDATA[active record]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>118</wp:term_id><wp:tag_slug>adam-french</wp:tag_slug><wp:tag_name><![CDATA[adam french]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>add-new-tag</wp:tag_slug><wp:tag_name><![CDATA[Add new tag]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>193</wp:term_id><wp:tag_slug>addison-wesley</wp:tag_slug><wp:tag_name><![CDATA[addison-wesley]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>149</wp:term_id><wp:tag_slug>addressable</wp:tag_slug><wp:tag_name><![CDATA[addressable]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>101</wp:term_id><wp:tag_slug>advanced-rails-recipes</wp:tag_slug><wp:tag_name><![CDATA[advanced rails recipes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>121</wp:term_id><wp:tag_slug>andre-ludwig</wp:tag_slug><wp:tag_name><![CDATA[andre ludwig]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>153</wp:term_id><wp:tag_slug>apache</wp:tag_slug><wp:tag_name><![CDATA[apache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>77</wp:term_id><wp:tag_slug>api</wp:tag_slug><wp:tag_name><![CDATA[api]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>204</wp:term_id><wp:tag_slug>apn</wp:tag_slug><wp:tag_name><![CDATA[apn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>215</wp:term_id><wp:tag_slug>apn_on_rails</wp:tag_slug><wp:tag_name><![CDATA[apn_on_rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>202</wp:term_id><wp:tag_slug>apple</wp:tag_slug><wp:tag_name><![CDATA[apple]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>216</wp:term_id><wp:tag_slug>apple-push-notifications</wp:tag_slug><wp:tag_name><![CDATA[apple push notifications]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>application-helper</wp:tag_slug><wp:tag_name><![CDATA[application helper]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>155</wp:term_id><wp:tag_slug>application_configuration</wp:tag_slug><wp:tag_name><![CDATA[application_configuration]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>169</wp:term_id><wp:tag_slug>assets</wp:tag_slug><wp:tag_name><![CDATA[assets]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>assigns</wp:tag_slug><wp:tag_name><![CDATA[assigns]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>209</wp:term_id><wp:tag_slug>authlogic</wp:tag_slug><wp:tag_name><![CDATA[authlogic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>233</wp:term_id><wp:tag_slug>basecamp</wp:tag_slug><wp:tag_name><![CDATA[basecamp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>224</wp:term_id><wp:tag_slug>bdd</wp:tag_slug><wp:tag_name><![CDATA[bdd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>benchmark</wp:tag_slug><wp:tag_name><![CDATA[benchmark]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>219</wp:term_id><wp:tag_slug>bleeding-ears</wp:tag_slug><wp:tag_name><![CDATA[bleeding ears]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>blog</wp:tag_slug><wp:tag_name><![CDATA[blog]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>199</wp:term_id><wp:tag_slug>book</wp:tag_slug><wp:tag_name><![CDATA[book]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>99</wp:term_id><wp:tag_slug>boston-ruby-users-group</wp:tag_slug><wp:tag_name><![CDATA[boston ruby users group]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>241</wp:term_id><wp:tag_slug>bostonrb</wp:tag_slug><wp:tag_name><![CDATA[bostonrb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>164</wp:term_id><wp:tag_slug>brandon-dimcheff</wp:tag_slug><wp:tag_name><![CDATA[Brandon Dimcheff]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>brazil</wp:tag_slug><wp:tag_name><![CDATA[brazil]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug>bug</wp:tag_slug><wp:tag_name><![CDATA[bug]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>108</wp:term_id><wp:tag_slug>bugs</wp:tag_slug><wp:tag_name><![CDATA[bugs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>builder</wp:tag_slug><wp:tag_name><![CDATA[builder]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>cachetastic</wp:tag_slug><wp:tag_name><![CDATA[cachetastic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>140</wp:term_id><wp:tag_slug>caching</wp:tag_slug><wp:tag_name><![CDATA[caching]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>84</wp:term_id><wp:tag_slug>class</wp:tag_slug><wp:tag_name><![CDATA[class]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>167</wp:term_id><wp:tag_slug>cody-maggard</wp:tag_slug><wp:tag_name><![CDATA[cody maggard]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>227</wp:term_id><wp:tag_slug>coffee-script</wp:tag_slug><wp:tag_name><![CDATA[coffee script]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>240</wp:term_id><wp:tag_slug>coffeescript</wp:tag_slug><wp:tag_name><![CDATA[coffeescript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>85</wp:term_id><wp:tag_slug>comparable</wp:tag_slug><wp:tag_name><![CDATA[comparable]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>165</wp:term_id><wp:tag_slug>configat</wp:tag_slug><wp:tag_name><![CDATA[configat]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>156</wp:term_id><wp:tag_slug>configatron</wp:tag_slug><wp:tag_name><![CDATA[configatron]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>cookie</wp:tag_slug><wp:tag_name><![CDATA[cookie]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>222</wp:term_id><wp:tag_slug>cover_me</wp:tag_slug><wp:tag_name><![CDATA[cover_me]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug>crypt</wp:tag_slug><wp:tag_name><![CDATA[crypt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>210</wp:term_id><wp:tag_slug>cucumber</wp:tag_slug><wp:tag_name><![CDATA[cucumber]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>191</wp:term_id><wp:tag_slug>dan-kubb</wp:tag_slug><wp:tag_name><![CDATA[dan kubb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>96</wp:term_id><wp:tag_slug>darsono-sutedja</wp:tag_slug><wp:tag_name><![CDATA[darsono sutedja]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>142</wp:term_id><wp:tag_slug>data-factory</wp:tag_slug><wp:tag_name><![CDATA[data factory]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>data-mapper</wp:tag_slug><wp:tag_name><![CDATA[data mapper]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>151</wp:term_id><wp:tag_slug>data_mapper</wp:tag_slug><wp:tag_name><![CDATA[data_mapper]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>182</wp:term_id><wp:tag_slug>deferred-routes</wp:tag_slug><wp:tag_name><![CDATA[deferred? routes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>205</wp:term_id><wp:tag_slug>delayed-job</wp:tag_slug><wp:tag_name><![CDATA[delayed job]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>158</wp:term_id><wp:tag_slug>delynn-berry</wp:tag_slug><wp:tag_name><![CDATA[delynn berry]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>demo</wp:tag_slug><wp:tag_name><![CDATA[demo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>116</wp:term_id><wp:tag_slug>demos</wp:tag_slug><wp:tag_name><![CDATA[demos]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>developer</wp:tag_slug><wp:tag_name><![CDATA[developer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>154</wp:term_id><wp:tag_slug>diogo-almeida</wp:tag_slug><wp:tag_name><![CDATA[diogo almeida]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>195</wp:term_id><wp:tag_slug>distribunaut</wp:tag_slug><wp:tag_name><![CDATA[distribunaut]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>146</wp:term_id><wp:tag_slug>distributed-objects</wp:tag_slug><wp:tag_name><![CDATA[distributed objects]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>198</wp:term_id><wp:tag_slug>distributed-programmig</wp:tag_slug><wp:tag_name><![CDATA[distributed programmig]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>197</wp:term_id><wp:tag_slug>distributed-programming-with-ruby</wp:tag_slug><wp:tag_name><![CDATA[distributed programming with ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>distributed-routes</wp:tag_slug><wp:tag_name><![CDATA[distributed routes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>212</wp:term_id><wp:tag_slug>distributed-ruby</wp:tag_slug><wp:tag_name><![CDATA[distributed ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>147</wp:term_id><wp:tag_slug>distributed-viewslayouts</wp:tag_slug><wp:tag_name><![CDATA[distributed views/layouts]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>120</wp:term_id><wp:tag_slug>dm-voyeur</wp:tag_slug><wp:tag_name><![CDATA[dm-voyeur]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>168</wp:term_id><wp:tag_slug>don-march</wp:tag_slug><wp:tag_name><![CDATA[don march]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>91</wp:term_id><wp:tag_slug>drb</wp:tag_slug><wp:tag_name><![CDATA[drb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>180</wp:term_id><wp:tag_slug>ebb</wp:tag_slug><wp:tag_name><![CDATA[ebb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>141</wp:term_id><wp:tag_slug>email</wp:tag_slug><wp:tag_name><![CDATA[email]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>encryption</wp:tag_slug><wp:tag_name><![CDATA[encryption]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>112</wp:term_id><wp:tag_slug>engine</wp:tag_slug><wp:tag_name><![CDATA[engine]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>208</wp:term_id><wp:tag_slug>engines</wp:tag_slug><wp:tag_name><![CDATA[engines]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>179</wp:term_id><wp:tag_slug>english</wp:tag_slug><wp:tag_name><![CDATA[english]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>234</wp:term_id><wp:tag_slug>entrepreneur</wp:tag_slug><wp:tag_name><![CDATA[entrepreneur]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>erb</wp:tag_slug><wp:tag_name><![CDATA[erb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>231</wp:term_id><wp:tag_slug>error-tracking</wp:tag_slug><wp:tag_name><![CDATA[error tracking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>104</wp:term_id><wp:tag_slug>erub</wp:tag_slug><wp:tag_name><![CDATA[erub]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>92</wp:term_id><wp:tag_slug>erubis</wp:tag_slug><wp:tag_name><![CDATA[erubis]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>135</wp:term_id><wp:tag_slug>exceptions</wp:tag_slug><wp:tag_name><![CDATA[exceptions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>extension</wp:tag_slug><wp:tag_name><![CDATA[extension]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>extensions</wp:tag_slug><wp:tag_name><![CDATA[extensions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>170</wp:term_id><wp:tag_slug>extlib</wp:tag_slug><wp:tag_name><![CDATA[extlib]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>181</wp:term_id><wp:tag_slug>ezra-zygmuntowicz</wp:tag_slug><wp:tag_name><![CDATA[Ezra Zygmuntowicz]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>150</wp:term_id><wp:tag_slug>facets</wp:tag_slug><wp:tag_name><![CDATA[facets]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>221</wp:term_id><wp:tag_slug>factories</wp:tag_slug><wp:tag_name><![CDATA[factories]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>features</wp:tag_slug><wp:tag_name><![CDATA[features]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>238</wp:term_id><wp:tag_slug>feedback</wp:tag_slug><wp:tag_name><![CDATA[feedback]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>95</wp:term_id><wp:tag_slug>file-uploads</wp:tag_slug><wp:tag_name><![CDATA[file uploads]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>filters</wp:tag_slug><wp:tag_name><![CDATA[filters]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>220</wp:term_id><wp:tag_slug>fixtures</wp:tag_slug><wp:tag_name><![CDATA[fixtures]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>229</wp:term_id><wp:tag_slug>fluxtracker</wp:tag_slug><wp:tag_name><![CDATA[fluxtracker]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>format</wp:tag_slug><wp:tag_name><![CDATA[format]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>framework</wp:tag_slug><wp:tag_name><![CDATA[framework]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>gem</wp:tag_slug><wp:tag_name><![CDATA[gem]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>gems</wp:tag_slug><wp:tag_name><![CDATA[gems]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug>generate</wp:tag_slug><wp:tag_name><![CDATA[generate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>generator</wp:tag_slug><wp:tag_name><![CDATA[generator]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>93</wp:term_id><wp:tag_slug>generators</wp:tag_slug><wp:tag_name><![CDATA[generators]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>94</wp:term_id><wp:tag_slug>genosaurus</wp:tag_slug><wp:tag_name><![CDATA[genosaurus]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>188</wp:term_id><wp:tag_slug>gerado-pis-lopez</wp:tag_slug><wp:tag_name><![CDATA[gerado pis-lopez]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>githubcom</wp:tag_slug><wp:tag_name><![CDATA[github.com]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>97</wp:term_id><wp:tag_slug>google-group</wp:tag_slug><wp:tag_name><![CDATA[google group]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>189</wp:term_id><wp:tag_slug>greg-arsenault</wp:tag_slug><wp:tag_name><![CDATA[greg arsenault]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>190</wp:term_id><wp:tag_slug>gregg-pollack</wp:tag_slug><wp:tag_name><![CDATA[gregg pollack]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>109</wp:term_id><wp:tag_slug>haml</wp:tag_slug><wp:tag_name><![CDATA[haml]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>163</wp:term_id><wp:tag_slug>hash</wp:tag_slug><wp:tag_name><![CDATA[hash]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>helpers</wp:tag_slug><wp:tag_name><![CDATA[helpers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>236</wp:term_id><wp:tag_slug>hiring</wp:tag_slug><wp:tag_name><![CDATA[hiring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>228</wp:term_id><wp:tag_slug>hoptoad</wp:tag_slug><wp:tag_name><![CDATA[hoptoad]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>html</wp:tag_slug><wp:tag_name><![CDATA[html]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>inflection</wp:tag_slug><wp:tag_name><![CDATA[inflection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>inflections</wp:tag_slug><wp:tag_name><![CDATA[inflections]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug>inflector</wp:tag_slug><wp:tag_name><![CDATA[inflector]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>initializer</wp:tag_slug><wp:tag_name><![CDATA[initializer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>201</wp:term_id><wp:tag_slug>iphone</wp:tag_slug><wp:tag_name><![CDATA[iphone]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>230</wp:term_id><wp:tag_slug>issue-tracking</wp:tag_slug><wp:tag_name><![CDATA[issue tracking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>174</wp:term_id><wp:tag_slug>jabber</wp:tag_slug><wp:tag_name><![CDATA[jabber]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>225</wp:term_id><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[java]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>128</wp:term_id><wp:tag_slug>jquery</wp:tag_slug><wp:tag_name><![CDATA[jquery]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>185</wp:term_id><wp:tag_slug>jruby</wp:tag_slug><wp:tag_name><![CDATA[jruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>244</wp:term_id><wp:tag_slug>json</wp:tag_slug><wp:tag_name><![CDATA[json]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>235</wp:term_id><wp:tag_slug>launchfest</wp:tag_slug><wp:tag_name><![CDATA[launchfest]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>107</wp:term_id><wp:tag_slug>lighthouse</wp:tag_slug><wp:tag_name><![CDATA[lighthouse]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>2</wp:term_id><wp:tag_slug>links</wp:tag_slug><wp:tag_name><![CDATA[Links]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>200</wp:term_id><wp:tag_slug>lipa</wp:tag_slug><wp:tag_name><![CDATA[lipa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>143</wp:term_id><wp:tag_slug>logging</wp:tag_slug><wp:tag_name><![CDATA[logging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>mack</wp:tag_slug><wp:tag_name><![CDATA[mack]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>196</wp:term_id><wp:tag_slug>mack-distributed</wp:tag_slug><wp:tag_name><![CDATA[mack-distributed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>132</wp:term_id><wp:tag_slug>mack-more</wp:tag_slug><wp:tag_name><![CDATA[mack-more]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>98</wp:term_id><wp:tag_slug>mailing-list</wp:tag_slug><wp:tag_name><![CDATA[mailing list]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>206</wp:term_id><wp:tag_slug>map-reduce</wp:tag_slug><wp:tag_name><![CDATA[map reduce]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>110</wp:term_id><wp:tag_slug>markaby</wp:tag_slug><wp:tag_name><![CDATA[markaby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>177</wp:term_id><wp:tag_slug>matthew-a-brown</wp:tag_slug><wp:tag_name><![CDATA[matthew a. brown]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>memcache</wp:tag_slug><wp:tag_name><![CDATA[memcache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>menderchuck</wp:tag_slug><wp:tag_name><![CDATA[menderchuck]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>merb</wp:tag_slug><wp:tag_name><![CDATA[merb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>90</wp:term_id><wp:tag_slug>migrations</wp:tag_slug><wp:tag_name><![CDATA[migrations]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>103</wp:term_id><wp:tag_slug>mike-clark</wp:tag_slug><wp:tag_name><![CDATA[mike clark]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>modules</wp:tag_slug><wp:tag_name><![CDATA[modules]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>124</wp:term_id><wp:tag_slug>mod_rails</wp:tag_slug><wp:tag_name><![CDATA[mod_rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>78</wp:term_id><wp:tag_slug>mongrel</wp:tag_slug><wp:tag_name><![CDATA[mongrel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>187</wp:term_id><wp:tag_slug>multiruby</wp:tag_slug><wp:tag_name><![CDATA[multiruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>115</wp:term_id><wp:tag_slug>music</wp:tag_slug><wp:tag_name><![CDATA[music]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>162</wp:term_id><wp:tag_slug>namespace</wp:tag_slug><wp:tag_name><![CDATA[namespace]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>175</wp:term_id><wp:tag_slug>nested-resources</wp:tag_slug><wp:tag_name><![CDATA[nested resources]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>114</wp:term_id><wp:tag_slug>off-topic</wp:tag_slug><wp:tag_name><![CDATA[off topic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>237</wp:term_id><wp:tag_slug>open-source</wp:tag_slug><wp:tag_name><![CDATA[open source]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug>orm</wp:tag_slug><wp:tag_name><![CDATA[orm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>171</wp:term_id><wp:tag_slug>pagination</wp:tag_slug><wp:tag_name><![CDATA[pagination]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>123</wp:term_id><wp:tag_slug>passenger</wp:tag_slug><wp:tag_name><![CDATA[passenger]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>pdf</wp:tag_slug><wp:tag_name><![CDATA[pdf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>89</wp:term_id><wp:tag_slug>peter-cooper</wp:tag_slug><wp:tag_name><![CDATA[peter cooper]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>74</wp:term_id><wp:tag_slug>plugin</wp:tag_slug><wp:tag_name><![CDATA[plugin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>podcast</wp:tag_slug><wp:tag_name><![CDATA[podcast]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>173</wp:term_id><wp:tag_slug>portlet</wp:tag_slug><wp:tag_name><![CDATA[portlet]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>172</wp:term_id><wp:tag_slug>portlets</wp:tag_slug><wp:tag_name><![CDATA[portlets]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>post</wp:tag_slug><wp:tag_name><![CDATA[post]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>102</wp:term_id><wp:tag_slug>pragmatic-programmers</wp:tag_slug><wp:tag_name><![CDATA[pragmatic programmers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>106</wp:term_id><wp:tag_slug>presentation</wp:tag_slug><wp:tag_name><![CDATA[presentation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>press</wp:tag_slug><wp:tag_name><![CDATA[Press]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>232</wp:term_id><wp:tag_slug>project-management</wp:tag_slug><wp:tag_name><![CDATA[project management]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>127</wp:term_id><wp:tag_slug>prototype</wp:tag_slug><wp:tag_name><![CDATA[prototype]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>203</wp:term_id><wp:tag_slug>push-notification</wp:tag_slug><wp:tag_name><![CDATA[push notification]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>76</wp:term_id><wp:tag_slug>rack</wp:tag_slug><wp:tag_name><![CDATA[rack]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>192</wp:term_id><wp:tag_slug>rails-3</wp:tag_slug><wp:tag_name><![CDATA[rails 3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>117</wp:term_id><wp:tag_slug>rails-conf-08</wp:tag_slug><wp:tag_name><![CDATA[rails conf 08]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>rails-envy</wp:tag_slug><wp:tag_name><![CDATA[rails envy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug>rake</wp:tag_slug><wp:tag_name><![CDATA[rake]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>ramaze</wp:tag_slug><wp:tag_name><![CDATA[ramaze]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>183</wp:term_id><wp:tag_slug>rarb</wp:tag_slug><wp:tag_name><![CDATA[rarb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>105</wp:term_id><wp:tag_slug>rcov</wp:tag_slug><wp:tag_name><![CDATA[rcov]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>rdoc</wp:tag_slug><wp:tag_name><![CDATA[rdoc]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>218</wp:term_id><wp:tag_slug>recording</wp:tag_slug><wp:tag_name><![CDATA[recording]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>75</wp:term_id><wp:tag_slug>redirect-initialize</wp:tag_slug><wp:tag_name><![CDATA[redirect initialize]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>134</wp:term_id><wp:tag_slug>redirects</wp:tag_slug><wp:tag_name><![CDATA[redirects]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>release</wp:tag_slug><wp:tag_name><![CDATA[release]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>3</wp:term_id><wp:tag_slug>releases</wp:tag_slug><wp:tag_name><![CDATA[Releases]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>render</wp:tag_slug><wp:tag_name><![CDATA[render]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>111</wp:term_id><wp:tag_slug>rendering</wp:tag_slug><wp:tag_name><![CDATA[rendering]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>87</wp:term_id><wp:tag_slug>review</wp:tag_slug><wp:tag_name><![CDATA[review]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>rijndael</wp:tag_slug><wp:tag_name><![CDATA[rijndael]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>86</wp:term_id><wp:tag_slug>rinda</wp:tag_slug><wp:tag_name><![CDATA[rinda]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>126</wp:term_id><wp:tag_slug>rjs</wp:tag_slug><wp:tag_name><![CDATA[rjs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>roadmap</wp:tag_slug><wp:tag_name><![CDATA[roadmap]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>routes</wp:tag_slug><wp:tag_name><![CDATA[routes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>routing</wp:tag_slug><wp:tag_name><![CDATA[routing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>131</wp:term_id><wp:tag_slug>rspec</wp:tag_slug><wp:tag_name><![CDATA[rspec]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>rss</wp:tag_slug><wp:tag_name><![CDATA[rss]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>186</wp:term_id><wp:tag_slug>ruby-19</wp:tag_slug><wp:tag_name><![CDATA[ruby 1.9]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>166</wp:term_id><wp:tag_slug>ruby-conf</wp:tag_slug><wp:tag_name><![CDATA[ruby conf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>184</wp:term_id><wp:tag_slug>ruby-frameworks</wp:tag_slug><wp:tag_name><![CDATA[ruby frameworks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>88</wp:term_id><wp:tag_slug>ruby-inside</wp:tag_slug><wp:tag_name><![CDATA[ruby inside]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>129</wp:term_id><wp:tag_slug>ruby-opals</wp:tag_slug><wp:tag_name><![CDATA[ruby opals]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>144</wp:term_id><wp:tag_slug>ruby-debug</wp:tag_slug><wp:tag_name><![CDATA[ruby-debug]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>178</wp:term_id><wp:tag_slug>rubyconf-2008</wp:tag_slug><wp:tag_name><![CDATA[rubyconf 2008]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>rubyforge</wp:tag_slug><wp:tag_name><![CDATA[rubyforge]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>122</wp:term_id><wp:tag_slug>saji</wp:tag_slug><wp:tag_name><![CDATA[saji]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>157</wp:term_id><wp:tag_slug>sake</wp:tag_slug><wp:tag_name><![CDATA[sake]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>194</wp:term_id><wp:tag_slug>sass</wp:tag_slug><wp:tag_name><![CDATA[sass]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>scaffold</wp:tag_slug><wp:tag_name><![CDATA[scaffold]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug>screencast</wp:tag_slug><wp:tag_name><![CDATA[screencast]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>100</wp:term_id><wp:tag_slug>sequel</wp:tag_slug><wp:tag_name><![CDATA[sequel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>session</wp:tag_slug><wp:tag_name><![CDATA[session]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>161</wp:term_id><wp:tag_slug>simon-menke</wp:tag_slug><wp:tag_name><![CDATA[simon menke]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>sinatra</wp:tag_slug><wp:tag_name><![CDATA[sinatra]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>176</wp:term_id><wp:tag_slug>singleton</wp:tag_slug><wp:tag_name><![CDATA[singleton]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>spec-test</wp:tag_slug><wp:tag_name><![CDATA[spec test]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>242</wp:term_id><wp:tag_slug>sprockets</wp:tag_slug><wp:tag_name><![CDATA[sprockets]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>119</wp:term_id><wp:tag_slug>sql</wp:tag_slug><wp:tag_name><![CDATA[sql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>226</wp:term_id><wp:tag_slug>steak</wp:tag_slug><wp:tag_name><![CDATA[steak]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>svn</wp:tag_slug><wp:tag_name><![CDATA[svn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>223</wp:term_id><wp:tag_slug>tdd</wp:tag_slug><wp:tag_name><![CDATA[tdd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>152</wp:term_id><wp:tag_slug>tell-messaging</wp:tag_slug><wp:tag_name><![CDATA[tell messaging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>67</wp:term_id><wp:tag_slug>tests</wp:tag_slug><wp:tag_name><![CDATA[tests]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>113</wp:term_id><wp:tag_slug>the-blue-wires</wp:tag_slug><wp:tag_name><![CDATA[the blue wires]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>thin</wp:tag_slug><wp:tag_name><![CDATA[thin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>trac</wp:tag_slug><wp:tag_name><![CDATA[trac]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>130</wp:term_id><wp:tag_slug>tracy-flynn</wp:tag_slug><wp:tag_name><![CDATA[tracy flynn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>tutorial</wp:tag_slug><wp:tag_name><![CDATA[tutorial]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>tutorials</wp:tag_slug><wp:tag_name><![CDATA[Tutorials]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>239</wp:term_id><wp:tag_slug>tweetko</wp:tag_slug><wp:tag_name><![CDATA[tweetko]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>213</wp:term_id><wp:tag_slug>tweets</wp:tag_slug><wp:tag_name><![CDATA[tweets]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>214</wp:term_id><wp:tag_slug>twitter</wp:tag_slug><wp:tag_name><![CDATA[twitter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>133</wp:term_id><wp:tag_slug>upgrade</wp:tag_slug><wp:tag_name><![CDATA[upgrade]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>207</wp:term_id><wp:tag_slug>warp-drive</wp:tag_slug><wp:tag_name><![CDATA[warp drive]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>web-20</wp:tag_slug><wp:tag_name><![CDATA[web 2.0]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>211</wp:term_id><wp:tag_slug>webrat</wp:tag_slug><wp:tag_name><![CDATA[webrat]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>125</wp:term_id><wp:tag_slug>wiki</wp:tag_slug><wp:tag_name><![CDATA[wiki]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>243</wp:term_id><wp:tag_slug>will_paginate</wp:tag_slug><wp:tag_name><![CDATA[will_paginate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>xml</wp:tag_slug><wp:tag_name><![CDATA[xml]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>160</wp:term_id><wp:tag_slug>xss</wp:tag_slug><wp:tag_name><![CDATA[xss]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>159</wp:term_id><wp:tag_slug>yaml</wp:tag_slug><wp:tag_name><![CDATA[yaml]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.3.1</generator>

	<item>
		<title>Blog Demo 1</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/blog-demo-1/</link>
		<pubDate>Tue, 04 Mar 2008 19:54:54 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2008-03-04 14:54:54</wp:post_date>
		<wp:post_date_gmt>2008-03-04 19:54:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>20</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:671;s:6:"height";i:511;s:14:"hwstring_small";s:23:"height='96' width='126'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/1.png";s:5:"thumb";s:15:"1.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog Demo 2</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/blog-demo-2/</link>
		<pubDate>Tue, 04 Mar 2008 19:57:08 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2008-03-04 14:57:08</wp:post_date>
		<wp:post_date_gmt>2008-03-04 19:57:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>20</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:671;s:6:"height";i:511;s:14:"hwstring_small";s:23:"height='96' width='126'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/2.png";s:5:"thumb";s:15:"2.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog Demo 3</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/blog-demo-3/</link>
		<pubDate>Tue, 04 Mar 2008 20:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2008-03-04 15:00:00</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>20</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:669;s:6:"height";i:510;s:14:"hwstring_small";s:23:"height='96' width='125'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/3.png";s:5:"thumb";s:15:"3.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog Demo 4</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/blog-demo-4/</link>
		<pubDate>Tue, 04 Mar 2008 20:02:56 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2008-03-04 15:02:56</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:02:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>20</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/4.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:669;s:6:"height";i:510;s:14:"hwstring_small";s:23:"height='96' width='125'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/4.png";s:5:"thumb";s:15:"4.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog Demo 1</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/blog-demo-1-2/</link>
		<pubDate>Tue, 04 Mar 2008 20:07:23 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/11.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2008-03-04 15:07:23</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:07:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-1-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>20</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/11.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/11.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:669;s:6:"height";i:510;s:14:"hwstring_small";s:23:"height='96' width='125'";s:4:"file";s:75:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/11.png";s:5:"thumb";s:16:"11.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog Demo 1</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/blog-demo-1-3/</link>
		<pubDate>Tue, 04 Mar 2008 20:20:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/12.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2008-03-04 15:20:10</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:20:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-1-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>20</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/12.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/12.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:653;s:6:"height";i:379;s:14:"hwstring_small";s:23:"height='74' width='128'";s:4:"file";s:75:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/12.png";s:5:"thumb";s:16:"12.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog Demo 2</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/blog-demo-2-2/</link>
		<pubDate>Tue, 04 Mar 2008 20:20:34 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/21.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2008-03-04 15:20:34</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:20:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-2-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>20</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/21.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/21.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:653;s:6:"height";i:379;s:14:"hwstring_small";s:23:"height='74' width='128'";s:4:"file";s:75:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/21.png";s:5:"thumb";s:16:"21.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog Demo 3</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/blog-demo-3-2/</link>
		<pubDate>Tue, 04 Mar 2008 20:20:55 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/31.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2008-03-04 15:20:55</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:20:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-3-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>20</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/31.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/31.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:653;s:6:"height";i:379;s:14:"hwstring_small";s:23:"height='74' width='128'";s:4:"file";s:75:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/31.png";s:5:"thumb";s:16:"31.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog Demo 4</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/blog-demo-4-2/</link>
		<pubDate>Tue, 04 Mar 2008 20:21:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/41.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2008-03-04 15:21:17</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:21:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-4-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>20</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/41.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/41.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:653;s:6:"height";i:379;s:14:"hwstring_small";s:23:"height='74' width='128'";s:4:"file";s:75:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/41.png";s:5:"thumb";s:16:"41.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XML blog demo 1</title>
		<link>http://www.metabates.com/2008/03/19/adding-rssxml-feeds-to-our-blog-demo/xml-blog-demo-1/</link>
		<pubDate>Tue, 18 Mar 2008 17:47:07 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/xml1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2008-03-18 12:47:07</wp:post_date>
		<wp:post_date_gmt>2008-03-18 17:47:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xml-blog-demo-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>38</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/xml1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/xml1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:716;s:6:"height";i:424;s:14:"hwstring_small";s:23:"height='75' width='128'";s:4:"file";s:77:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/xml1.png";s:5:"thumb";s:18:"xml1.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog Demo w/ XML</title>
		<link>http://www.metabates.com/2008/03/19/adding-rssxml-feeds-to-our-blog-demo/blog-demo-w-xml/</link>
		<pubDate>Tue, 18 Mar 2008 17:52:19 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/03/mack_blog_demo.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2008-03-18 12:52:19</wp:post_date>
		<wp:post_date_gmt>2008-03-18 17:52:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-demo-w-xml</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>38</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/03/mack_blog_demo.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/03/mack_blog_demo.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>datamapper-0301gem</title>
		<link>http://www.metabates.com/2008/04/09/temporary-fix-for-the-datamapper-bug/datamapper-0301gem/</link>
		<pubDate>Thu, 10 Apr 2008 01:33:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/04/datamapper-0301gem.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date>2008-04-09 20:33:17</wp:post_date>
		<wp:post_date_gmt>2008-04-10 01:33:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>datamapper-0301gem</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/04/datamapper-0301gem.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/datamapper-0301gem.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1</title>
		<link>http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2/attachment/1/</link>
		<pubDate>Fri, 18 Apr 2008 21:33:16 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/04/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date>2008-04-18 16:33:16</wp:post_date>
		<wp:post_date_gmt>2008-04-18 21:33:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>60</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/04/1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:757;s:6:"height";i:669;s:14:"hwstring_small";s:23:"height='96' width='108'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:13:"1-300x265.png";s:5:"width";i:300;s:6:"height";i:265;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2</title>
		<link>http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2/attachment/2/</link>
		<pubDate>Fri, 18 Apr 2008 21:33:20 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/04/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2008-04-18 16:33:20</wp:post_date>
		<wp:post_date_gmt>2008-04-18 21:33:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>60</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/04/2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:873;s:6:"height";i:693;s:14:"hwstring_small";s:23:"height='96' width='120'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:13:"2-300x238.png";s:5:"width";i:300;s:6:"height";i:238;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3</title>
		<link>http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2/attachment/3/</link>
		<pubDate>Fri, 18 Apr 2008 21:33:21 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/04/3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2008-04-18 16:33:21</wp:post_date>
		<wp:post_date_gmt>2008-04-18 21:33:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>60</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/04/3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:757;s:6:"height";i:669;s:14:"hwstring_small";s:23:"height='96' width='108'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:13:"3-300x265.png";s:5:"width";i:300;s:6:"height";i:265;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4</title>
		<link>http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2/attachment/4/</link>
		<pubDate>Fri, 18 Apr 2008 21:33:23 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/04/4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2008-04-18 16:33:23</wp:post_date>
		<wp:post_date_gmt>2008-04-18 21:33:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>60</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/04/4.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:873;s:6:"height";i:693;s:14:"hwstring_small";s:23:"height='96' width='120'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/4.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:13:"4-300x238.png";s:5:"width";i:300;s:6:"height";i:238;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>5</title>
		<link>http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2/attachment/5/</link>
		<pubDate>Fri, 18 Apr 2008 21:33:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/04/5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2008-04-18 16:33:24</wp:post_date>
		<wp:post_date_gmt>2008-04-18 21:33:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>60</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/04/5.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:873;s:6:"height";i:693;s:14:"hwstring_small";s:23:"height='96' width='120'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/5.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:13:"5-300x238.png";s:5:"width";i:300;s:6:"height";i:238;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>6</title>
		<link>http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2/attachment/6/</link>
		<pubDate>Fri, 18 Apr 2008 21:33:26 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/04/6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2008-04-18 16:33:26</wp:post_date>
		<wp:post_date_gmt>2008-04-18 21:33:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>6</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>60</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/04/6.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:873;s:6:"height";i:693;s:14:"hwstring_small";s:23:"height='96' width='120'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/6.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:13:"6-300x238.png";s:5:"width";i:300;s:6:"height";i:238;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>7</title>
		<link>http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2/attachment/7/</link>
		<pubDate>Fri, 18 Apr 2008 21:33:27 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/04/7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2008-04-18 16:33:27</wp:post_date>
		<wp:post_date_gmt>2008-04-18 21:33:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>7</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>60</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/04/7.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/7.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:873;s:6:"height";i:693;s:14:"hwstring_small";s:23:"height='96' width='120'";s:4:"file";s:74:"/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/04/7.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:13:"7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:13:"7-300x238.png";s:5:"width";i:300;s:6:"height";i:238;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mack-brug</title>
		<link>http://www.metabates.com/2008/05/13/boston-ruby-users-group-presentation/mack-brug/</link>
		<pubDate>Tue, 20 May 2008 17:05:29 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/wp-content/uploads/2008/05/mack-brug.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2008-05-20 12:05:29</wp:post_date>
		<wp:post_date_gmt>2008-05-20 17:05:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-brug</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>93</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2008/05/mack-brug.pdf</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/.liger/mframework/mackframework.com/wp-content/uploads/2008/05/mack-brug.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>contribute</title>
		<link>http://www.metabates.com/?page_id=11</link>
		<pubDate>Wed, 27 Feb 2008 15:57:36 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/contribute/</guid>
		<description></description>
		<content:encoded><![CDATA[Contribute:

<a href="mailto:contribute@mackframework.com">contribute@mackframework.com</a>

<a href="http://github.com/markbates/mack" target="_blank">http://github.com/markbates/mack</a>
<a href="git://github.com/markbates/mack.git" target="_blank">git://github.com/markbates/mack.git</a>
<a href="http://github.com/markbates/mack-more" target="_blank">http://github.com/markbates/mack-more</a>
<a href="git://github.com/markbates/mack-more.git" target="_blank">git://github.com/markbates/mack-more.git</a>

If you are interested in contributing you can create an account with GitHub, fork the Mack project, go nuts with your changes, and then send me a pull request. Itâ€™s all very well explained on the GitHub site.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2008-02-27 10:57:36</wp:post_date>
		<wp:post_date_gmt>2008-02-27 15:57:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contribute</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>support</title>
		<link>http://www.metabates.com/?page_id=95</link>
		<pubDate>Thu, 15 May 2008 04:26:37 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?page_id=95</guid>
		<description></description>
		<content:encoded><![CDATA[Into everyone's life a little rain must fall. So, to that end there are varies ways to get support for your mack application.

If you'd like to log a bug ticket you can go to Lighthouse to do so:

<a href="http://lighthouse.mackframework.com" target="_blank">http://lighthouse.mackframework.com</a>

For everything else there's the mailing list:

<a href="http://groups.google.com/group/mack-framework" target="_blank">http://groups.google.com/group/mack-framework</a>

For those who prefer forums to mailing lists there's:

<a href="http://www.mackforum.com" target="_blank">http://www.mackforum.com</a>

If you're an IRC fan, then head over to irc.freenode.net and head to #mackframework.

If all else fails, then <a href="mailto:bugs@mackframework.com">bugs@mackframework.com</a> will definitely get you the answers you need.
<h3>Tutorials:</h3>
If you are looking for tutorials, checkout out the wiki:Â <a href="http://wiki.mackframework.com/index.php/en/Tutorials" target="_blank">http://wiki.mackframework.com/index.php/en/Tutorials</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2008-05-14 23:26:37</wp:post_date>
		<wp:post_date_gmt>2008-05-15 04:26:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>support</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>features</title>
		<link>http://www.metabates.com/?page_id=96</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?page_id=96</guid>
		<description></description>
		<content:encoded><![CDATA[Mack is a Ruby web application framework that is being built from the ground up to aid in the development of distributed, portal-like applications that have a need for speed. Mack supports best of breed technologies in a modular way.
<ul>
	<li>ORM Agnostic - Use DataMapper, ActiveRecord, Sequel, or "roll your own"! There are already gems to support DataMapper and ActiveRecord, more are on their way.</li>
	<li>Templating language agnostic. Support for ERB (Erubis), Xml::Builder, and Markaby are there and ready to go. But it's easy to add your own.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[undefined]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2009-06-10 11:47:10</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Plugin &amp; Rendering Engine Tutorial</title>
		<link>http://www.metabates.com/?page_id=129</link>
		<pubDate>Sat, 16 Aug 2008 19:38:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?page_id=129</guid>
		<description></description>
		<content:encoded><![CDATA[Ok, let's take the new rendering system out for a spin, shall we? Let's add the PDF::Writer library to our Obligatory Blog Demo application. If you haven't followed this demo you should do that now.

Let's start by requiring the gem in our system. Open up your gems.rb file found in config/initializers and let's add the gem:
<pre> require_gems do |gem|
   gem.add "pdf-writer", :version =&gt; "1.1.8", :libs =&gt; "pdf/writer"
 end</pre>
Great! We've told Mack we want to use the 'pdf-writer' gem, version '1.1.8', and we want to automatically require the file 'pdf/writer'. Now, let's install the gem:
<pre> $ sudo rake gems:install</pre>
See how easy this is? We've installed the gem, required the libraries, now we're ready to write our plugin.
<pre> $ rake generate:plugin name=render_pdf</pre>
That should generate a few files/folders in our vendor/plugins directory. Let's open up vendor/plugins/render_pdf/lib/render_pdf.rb and let's start coding.

What we want to do is create a new Mack::Rendering::Engine::Base class so that when we call render(:action) it will have a new engine to render the view file as a PDF.

We'll examine each section in a minute, but for now, let's type this into our render_pdf.rb file:
<script src="http://gist.github.com/5741.js"></script>
Ok, so on line #4 we extended Mack::Rendering::Engine::Base. This will give us access to a view methods, and will allow us to write to a very simple API. The only method you are absolutely required to implement is the render method. As we can see on line #6, we did just that.

First thing we do in the render method is instantiate a new PDF::Writer class and assign it to an instance variable. We then set that instance variable into the Mack::Rendering::<a href="http://wiki.mackframework.com/index.php/ViewTemplate">ViewTemplate</a>Â object we have. We do that because the way the PDF::Writer object works you need to constantly reference the instance of the writer to do your work. Example:
<pre> @_pdf.text "Hello World", :font_size =&gt; 24, :justification =&gt; :center</pre>
On line #9 we eval the io and the binding we've been given. The io will be contents of the view file we have disk, as a String, and the binding will be that of the Mack::Rendering::<a href="http://wiki.mackframework.com/index.php/ViewTemplate">ViewTemplate</a>Â object we've been given.

In the extension method we tell the system that are files are going to be found with the extension, pdfw. Another example of this would be the Erubis engine which declares its extension as erb.

The Mack::Rendering::Engine::Pdf::<a href="http://wiki.mackframework.com/index.php/ViewHelpers">ViewHelpers</a>Â module we've declared on line #17 is there to hide the @_pdf instance variable with a nicer pdf method. On line #27 we include this module into Mack::Rendering::<a href="http://wiki.mackframework.com/index.php/ViewTemplate">ViewTemplate</a>Â so it has access to it.

Finally, and most importantly, we need to register the new engine we've built with the system. We do that on line #28 with this bit of code:
<pre> Mack::Rendering::Engine::Registry.register(:action, :pdf)</pre>
That's saying whenever someone calls render(:action), consider me as an engine to render that. The way the selection of which engine to use is done, is very simple. First come first serve. The engines are in an array, and the first one to have a file with its extension on disk wins. Plain and simple.

Now, let's see all this in action. Let's add PDF support for our 'show' page.

Open up views/posts/show.html.erb and add the following line:
<pre> &lt;%= link_to("pdf", posts_show_url(:id =&gt; @post, :format =&gt; :pdf)) %&gt;</pre>
That will give us a link that looks like '/posts/:id.pdf'. This will, of course, go to ourÂ <a href="http://wiki.mackframework.com/index.php/PostsController">PostsController</a>Â and the show action. This method does not need to be altered. That's right, you heard me. It does not need to change. Mack will handle the appropriate content-type headers for you. Just another great feature in 0.5.5.

Create a file called views/posts/show.pdf.pdfw. I know this might look a little weird, what with 'pdf.pdfw', but here's the reason why. That's break the file name down into its three parts. 'show' is the name of the action. 'pdf' is the format of the request, think also html, xml, etc... 'pdfw' is the engine we want to use. If we hated ourselves we could do this all in erb with a file called show.pdf.erb, but why would we want to do that?

Anyway, let's dump this nice block of code into our show.pdf.pdfw file:

<script src="http://gist.github.com/5749.js"></script>

Since this is not a tutorial on this particular gem, I'm not going to go into what all that does. Instead, let's just have a look at it in action.

Fire up your server:
<pre> $ rake server</pre>
And go to: http://localhost:3000. If you don't already have a post created, create one. Now click on the show link. You should have a link on your page that says 'pdf' click on that link. Voila! You should be seeing a wonderfully formatted PDF right now!

Congrats! You've built a plugin and a new rendering engine for Mack. Now, go crazy!

The source for all this can be found at:Â <a class="offsite httplnk" rel="nofollow" href="http://github.com/markbates/mack_blog_demo/tree/master">GitHub</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2008-08-16 14:38:00</wp:post_date>
		<wp:post_date_gmt>2008-08-16 19:38:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>plugin-rendering-engine-tutorial</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>95</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>user guide</title>
		<link>http://www.metabates.com/?page_id=184</link>
		<pubDate>Tue, 30 Sep 2008 21:37:56 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?page_id=184</guid>
		<description></description>
		<content:encoded><![CDATA[To help you develop your Mack applications even easier, the core development team is writing a User Guide to help you ease into the Mack universe.

<a href="http://www.mackery.com">User Guide</a> [current release]
<a href="http://edge.mackery.com">User Guide</a> [edge]

Please feel free and contribute to the User Guide <a href="http://github.com/markbates/macker-s-guide/tree/master">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date>2008-09-30 16:37:56</wp:post_date>
		<wp:post_date_gmt>2008-09-30 21:37:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>user-guide</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Distributed Programming with Ruby</title>
		<link>http://www.metabates.com/?page_id=228</link>
		<pubDate>Wed, 10 Jun 2009 16:51:48 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?page_id=228</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://my.safaribooksonline.com/9780321669919"><img class="alignleft size-medium wp-image-231" title="Distributed Programming with Ruby" src="http://www.metabates.com/wp-content/uploads/2009/06/0321638360_bates_mech_page_3-261x300.jpg" alt="Distributed Programming with Ruby" width="261" height="300" /></a>
<p class="docText">This book is split into two parts. In part one we examine what comes shipped with the standard library in <span class="SearchHighlight">Ruby</span> 1.8.x and <span class="SearchHighlight">Ruby</span><a name="at understanding"></a> 1.9.x. We look, in depth, at understanding how DRb (dRuby or Distributed <span class="SearchHighlight">Ruby</span><a name="and use"></a>) and Rinda work. We'll build some simple applications, in a variety of ways, and use those examples to talk about the libraries. We'll examine the pros and cons of DRb and Rinda. By the end of part one you should feel comfortable and ready to build your distributed applications using these libraries.</p>
<p class="docText"><a name="variety of"></a>In part two of the book we'll look at a variety of different third party tools, libraries, and frameworks designed to make distributed programming in <span class="SearchHighlight">Ruby</span><a name="Some of"></a> easy, fun, and robust. Some of these libraries build on the DRb and Rinda libraries we learned about in part one, some don't. Some are based around executing arbitrary code on another machine. Some are based on running code in the background to elevate performance. Others, yet, are about using message queues to facilitate communication between different processors. While we won't cover each of these third party libraries in painful details, we will cover them enough that you understand their use, their place in the world of distributed programming, and when and where you would want to use them.</p>

<a href="http://my.safaribooksonline.com/9780321669919">http://my.safaribooksonline.com/9780321669919</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2009-06-10 11:51:48</wp:post_date>
		<wp:post_date_gmt>2009-06-10 16:51:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>distributed-programming-with-ruby</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Distributed Programming with Ruby</title>
		<link>http://www.metabates.com/?attachment_id=231</link>
		<pubDate>Wed, 10 Jun 2009 16:50:19 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2009/06/0321638360_bates_mech_page_3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2009-06-10 11:50:19</wp:post_date>
		<wp:post_date_gmt>2009-06-10 16:50:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>0321638360_bates_mech_page_3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>228</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2009/06/0321638360_bates_mech_page_3.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/06/0321638360_bates_mech_page_3.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3327";s:6:"height";s:4:"3817";s:14:"hwstring_small";s:22:"height='96' width='83'";s:4:"file";s:40:"2009/06/0321638360_bates_mech_page_3.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:40:"0321638360_bates_mech_page_3-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:40:"0321638360_bates_mech_page_3-261x300.jpg";s:5:"width";s:3:"261";s:6:"height";s:3:"300";}s:5:"large";a:3:{s:4:"file";s:41:"0321638360_bates_mech_page_3-892x1024.jpg";s:5:"width";s:3:"892";s:6:"height";s:4:"1024";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IMG_1094</title>
		<link>http://www.metabates.com/2010/06/14/six-tracks-of-drums/img_1094/</link>
		<pubDate>Tue, 15 Jun 2010 04:00:59 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2010/06/IMG_1094.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date>2010-06-14 23:00:59</wp:post_date>
		<wp:post_date_gmt>2010-06-15 04:00:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>img_1094</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2010/06/IMG_1094.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2048";s:6:"height";s:4:"1536";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:20:"2010/06/IMG_1094.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"IMG_1094-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"IMG_1094-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:5:"large";a:3:{s:4:"file";s:21:"IMG_1094-1024x768.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"768";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"2.8";s:6:"credit";s:0:"";s:6:"camera";s:10:"iPhone 3GS";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1276556864";s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.85";s:3:"iso";s:3:"800";s:13:"shutter_speed";s:3:"0.1";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/IMG_1094.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IMG_1095</title>
		<link>http://www.metabates.com/2010/06/14/six-tracks-of-drums/img_1095/</link>
		<pubDate>Tue, 15 Jun 2010 04:01:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2010/06/IMG_1095.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date>2010-06-14 23:01:02</wp:post_date>
		<wp:post_date_gmt>2010-06-15 04:01:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>img_1095</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>329</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2010/06/IMG_1095.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"2048";s:6:"height";s:4:"1536";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:20:"2010/06/IMG_1095.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"IMG_1095-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"IMG_1095-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:5:"large";a:3:{s:4:"file";s:21:"IMG_1095-1024x768.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"768";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"2.8";s:6:"credit";s:0:"";s:6:"camera";s:10:"iPhone 3GS";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1276556875";s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.85";s:3:"iso";s:4:"1000";s:13:"shutter_speed";s:3:"0.1";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/IMG_1095.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>detail_side_by_side</title>
		<link>http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9/detail_side_by_side/</link>
		<pubDate>Fri, 13 Aug 2010 17:38:22 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2010/08/detail_side_by_side.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date>2010-08-13 12:38:22</wp:post_date>
		<wp:post_date_gmt>2010-08-13 17:38:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>detail_side_by_side</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>343</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2010/08/detail_side_by_side.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/detail_side_by_side.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1228";s:6:"height";s:3:"741";s:14:"hwstring_small";s:23:"height='77' width='128'";s:4:"file";s:31:"2010/08/detail_side_by_side.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"detail_side_by_side-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"detail_side_by_side-300x181.png";s:5:"width";s:3:"300";s:6:"height";s:3:"181";}s:5:"large";a:3:{s:4:"file";s:32:"detail_side_by_side-1024x617.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"617";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>detail</title>
		<link>http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9/detail/</link>
		<pubDate>Fri, 13 Aug 2010 17:38:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2010/08/detail.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2010-08-13 12:38:25</wp:post_date>
		<wp:post_date_gmt>2010-08-13 17:38:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>detail</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>343</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2010/08/detail.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/detail.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1228";s:6:"height";s:3:"741";s:14:"hwstring_small";s:23:"height='77' width='128'";s:4:"file";s:18:"2010/08/detail.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:18:"detail-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:18:"detail-300x181.png";s:5:"width";s:3:"300";s:6:"height";s:3:"181";}s:5:"large";a:3:{s:4:"file";s:19:"detail-1024x617.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"617";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>index_filter</title>
		<link>http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9/index_filter/</link>
		<pubDate>Fri, 13 Aug 2010 17:38:28 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2010/08/index_filter.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date>2010-08-13 12:38:28</wp:post_date>
		<wp:post_date_gmt>2010-08-13 17:38:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>index_filter</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>343</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2010/08/index_filter.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/index_filter.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1228";s:6:"height";s:3:"741";s:14:"hwstring_small";s:23:"height='77' width='128'";s:4:"file";s:24:"2010/08/index_filter.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"index_filter-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:24:"index_filter-300x181.png";s:5:"width";s:3:"300";s:6:"height";s:3:"181";}s:5:"large";a:3:{s:4:"file";s:25:"index_filter-1024x617.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"617";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>index_search</title>
		<link>http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9/index_search/</link>
		<pubDate>Fri, 13 Aug 2010 17:38:31 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2010/08/index_search.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2010-08-13 12:38:31</wp:post_date>
		<wp:post_date_gmt>2010-08-13 17:38:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>index_search</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>343</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2010/08/index_search.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/index_search.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1228";s:6:"height";s:3:"741";s:14:"hwstring_small";s:23:"height='77' width='128'";s:4:"file";s:24:"2010/08/index_search.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"index_search-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:24:"index_search-300x181.png";s:5:"width";s:3:"300";s:6:"height";s:3:"181";}s:5:"large";a:3:{s:4:"file";s:25:"index_search-1024x617.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"617";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>index</title>
		<link>http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9/index/</link>
		<pubDate>Fri, 13 Aug 2010 17:38:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2010/08/index.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date>2010-08-13 12:38:35</wp:post_date>
		<wp:post_date_gmt>2010-08-13 17:38:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>index</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>343</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2010/08/index.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/08/index.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1228";s:6:"height";s:3:"741";s:14:"hwstring_small";s:23:"height='77' width='128'";s:4:"file";s:17:"2010/08/index.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:17:"index-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:17:"index-300x181.png";s:5:"width";s:3:"300";s:6:"height";s:3:"181";}s:5:"large";a:3:{s:4:"file";s:18:"index-1024x617.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"617";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>issue_list_big</title>
		<link>http://www.metabates.com/2011/04/25/project-issue-and-error-tracking-united/issue_list_big/</link>
		<pubDate>Mon, 25 Apr 2011 00:52:55 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2011/04/issue_list_big.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>437</wp:post_id>
		<wp:post_date>2011-04-24 19:52:55</wp:post_date>
		<wp:post_date_gmt>2011-04-25 00:52:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>issue_list_big</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2011/04/issue_list_big.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/04/issue_list_big.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"800";s:6:"height";s:3:"600";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:26:"2011/04/issue_list_big.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"issue_list_big-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"issue_list_big-300x225.png";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>meta_flux</title>
		<link>http://www.metabates.com/?attachment_id=447</link>
		<pubDate>Mon, 02 May 2011 18:30:54 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2011/05/meta_flux.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date>2011-05-02 13:30:54</wp:post_date>
		<wp:post_date_gmt>2011-05-02 18:30:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meta_flux</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2011/05/meta_flux.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/meta_flux.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"261";s:6:"height";s:3:"300";s:14:"hwstring_small";s:22:"height='96' width='83'";s:4:"file";s:21:"2011/05/meta_flux.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"meta_flux-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bigbird_sq</title>
		<link>http://www.metabates.com/2011/06/19/backup-and-bookmark-your-tweets-with-tweetko-com/bigbird_sq/</link>
		<pubDate>Sun, 19 Jun 2011 21:12:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2011/06/bigbird_sq.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date>2011-06-19 16:12:51</wp:post_date>
		<wp:post_date_gmt>2011-06-19 21:12:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bigbird_sq</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>468</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2011/06/bigbird_sq.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/06/bigbird_sq.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"476";s:6:"height";s:3:"476";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:22:"2011/06/bigbird_sq.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:22:"bigbird_sq-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:22:"bigbird_sq-300x300.png";s:5:"width";s:3:"300";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>yml</title>
		<link>http://www.metabates.com/2011/06/28/lets-say-goodbye-to-yaml-for-configuration-shall-we/yml/</link>
		<pubDate>Tue, 28 Jun 2011 17:28:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2011/06/yml.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>489</wp:post_id>
		<wp:post_date>2011-06-28 12:28:57</wp:post_date>
		<wp:post_date_gmt>2011-06-28 17:28:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yml</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>482</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2011/06/yml.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/06/yml.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"512";s:6:"height";s:3:"512";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:15:"2011/06/yml.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:15:"yml-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:15:"yml-300x300.png";s:5:"width";s:3:"300";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Distributed Programming with Ruby</title>
		<link>http://www.metabates.com/books/drb_300/</link>
		<pubDate>Wed, 01 Feb 2012 16:03:09 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2012/02/drb_300.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>520</wp:post_id>
		<wp:post_date>2012-02-01 11:03:09</wp:post_date>
		<wp:post_date_gmt>2012-02-01 16:03:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>drb_300</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>519</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2012/02/drb_300.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/02/drb_300.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"411";s:14:"hwstring_small";s:22:"height='96' width='70'";s:4:"file";s:19:"2012/02/drb_300.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:19:"drb_300-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:19:"drb_300-218x300.png";s:5:"width";s:3:"218";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Programming CoffeeScript</title>
		<link>http://www.metabates.com/books/cover_300/</link>
		<pubDate>Wed, 01 Feb 2012 16:10:37 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/wp-content/uploads/2012/02/cover_300.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>526</wp:post_id>
		<wp:post_date>2012-02-01 11:10:37</wp:post_date>
		<wp:post_date_gmt>2012-02-01 16:10:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cover_300</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>519</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.metabates.com/wp-content/uploads/2012/02/cover_300.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/02/cover_300.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"386";s:14:"hwstring_small";s:22:"height='96' width='74'";s:4:"file";s:21:"2012/02/cover_300.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"cover_300-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:21:"cover_300-233x300.png";s:5:"width";s:3:"233";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The History Of Mack, pt. 1</title>
		<link>http://www.metabates.com/2008/02/26/the-history-of-mack-pt-1/</link>
		<pubDate>Wed, 27 Feb 2008 01:02:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[Let me start by answering the question at the top of your head, "why another ruby web application framework?" Great question.

I work for a company that for the time being shall be called Menderchuck. Menderchuck has been using Ruby on Rails since the company started two years ago. I am employee number three at Menderchuck, and was hired directly by the VP of Development. I was hired as the Senior Software Architect. I'm now the Director of Architecture for the company. :) Sorry about the bragging, I just like telling people I'm a director!

Prior to joining the company I had been using Rails for about 6 months, long before v1.0.0 of the now widely used framework. I loved Rails. I still do in fact, well, kind of. More on that later. Rails was the only choice for developing Menderchuck. The VP of Development and myself were huge fans, and having both come from Java backgrounds, we loved the flexibility and fun of Ruby as a language and Rails as a framework.

As I said we've spent the past two years developing Menderchuck using Rails, and for the most part things have been OK. I can't say that they've been great, because, well, they haven't. We've had scalability problems, deployment problems, and most importantly problems with the constraints that Rails places on development team.

The idea of an opinionated framework is great, in theory. If you follow and play by their rules things are great. The problem arises if you want to stray from the beaten path. Then you are left out on your own. Left to forge your own path, and as we've found at Menderchuck, you end up doing a whole hell of a lot of hacking!

Rails was designed for, and is incredible for building Web 2.0 applications. Menderchuck, although touted by the CEO as a Web 2.0 application, is really more of a complex and large scale web application, in the flavor of Web 1.0 applications. It's also more of a portal, which can be a very difficult thing to build with the Rails framework.

Now don't get me wrong, you CAN build a portal using Rails, but it really involves turning the framework on it's head and kicking it in the neck. That just shouldn't be the way build things.

Enter Mack.  (More to come...)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2008-02-26 20:02:12</wp:post_date>
		<wp:post_date_gmt>2008-02-27 01:02:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-history-of-mack-pt-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="menderchuck"><![CDATA[menderchuck]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="web-20"><![CDATA[web 2.0]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[welcome-to-the-mack-framework]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>archives</title>
		<link>http://www.metabates.com/archives/</link>
		<pubDate>Wed, 27 Feb 2008 01:17:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/archives/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2008-02-26 20:17:02</wp:post_date>
		<wp:post_date_gmt>2008-02-27 01:17:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>archives</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[archives.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The History Of Mack, pt. 2</title>
		<link>http://www.metabates.com/2008/02/26/the-history-of-mack-pt-2/</link>
		<pubDate>Wed, 27 Feb 2008 01:37:07 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/02/26/the-history-of-mack-pt-2/</guid>
		<description></description>
		<content:encoded><![CDATA[After two years of developing Menderchuck using Rails, I sat down with the VP of Development and the Director of Development and we took at a look at what the future of the company. We reviewed some of the stuff the business would like to build and where the CEO saw the company headed, and we looked at the technologies we were using and determined that it was time to investigate alternatives.

The first things to come under the microscope were Rails/Mongrel. As previously stated we found Rails to be a bit too opinionated for our use. One of the big jokes within the dev team was that I was basically rewriting Rails one section at a time. As sad as that joke is, it's partially true.

I started to investigate other frameworks, particularly Merb and Ramaze, both of which are great frameworks. Both are lightweight and fast, and are a great alternative to Rails. But, they both didn't quite offer what Menderchuck needed to grow into the future.

Menderchuck needed a platform that was fast and scalable. We needed something that would allow us to be a portal application. We needed something that was easy to deploy. We wanted to be able to build/deploy separate applications and have them 'automagically' linked together. And most importantly we needed something very configurable, and less opinionated.

In the search for a framework utopia, I came across two technologies I really fell in love with, <a href="http://rack.rubyforge.org/" target="_blank">Rack</a> and <a href="http://code.macournoyer.com/thin/" target="_blank">Thin</a>.

(More to come...)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2008-02-26 20:37:07</wp:post_date>
		<wp:post_date_gmt>2008-02-27 01:37:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-history-of-mack-pt-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="framework"><![CDATA[framework]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="menderchuck"><![CDATA[menderchuck]]></category>
		<category domain="post_tag" nicename="merb"><![CDATA[merb]]></category>
		<category domain="post_tag" nicename="mongrel"><![CDATA[mongrel]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rake"><![CDATA[rake]]></category>
		<category domain="post_tag" nicename="ramaze"><![CDATA[ramaze]]></category>
		<category domain="post_tag" nicename="thin"><![CDATA[thin]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting Started</title>
		<link>http://www.metabates.com/2008/02/27/getting-started/</link>
		<pubDate>Wed, 27 Feb 2008 15:45:23 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/02/27/getting-started/</guid>
		<description></description>
		<content:encoded><![CDATA[Installing Mack is pretty simple:
<pre>$ sudo gem install mack</pre>
This will install a few gems that Mack is dependent on. Once you've got all the gems installed you can create your mack app with the following:
<pre>$ mack my_cool_mack_app</pre>
That should create a folder called my_cool_mack_app with a bunch of files and folders underneath it. Now, to fire up the app:
<pre>$ cd my_cool_mack_app
$ rake server</pre>
Now point your browser to http://localhost:3000 and you should see a nice "welcome to mack" screen.

That's it. Now you can start rocking your super cool application.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2008-02-27 10:45:23</wp:post_date>
		<wp:post_date_gmt>2008-02-27 15:45:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-started</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ORM Support</title>
		<link>http://www.metabates.com/2008/02/27/orm-support/</link>
		<pubDate>Wed, 27 Feb 2008 15:46:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/02/27/orm-support/</guid>
		<description></description>
		<content:encoded><![CDATA[If you would like to add ORM support to your application, it's simple. Out of the box Mack has support for two popular ORMs, ActiveRecord and DataMapper.Our tests show that DataMapper is 10x slower then ActiveRecord, but who knows, your mileage my vary.

When you create your mack app you can do the following which will add ORM support to your generated app:
<pre>$ mack my_cool_mack_app -o activerecord</pre>
If you already have a mack app you can very easily add ORM support by adding the following configuration parameter to the default.yml file:
<pre>mack::orm: activerecord</pre>
And also add a database.yml file to your config directory that looks like this:
<pre>development:
  adapter: mysql
  database: my_cool_mack_app_development
  host: localhost
  username: root
  password:

test:
  adapter: mysql
  database: my_cool_mack_app_test
  host: localhost
  username: root
  password:

production:
  adapter: mysql
  database: my_cool_mack_app_production
  host: localhost
  username: root
  password:</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2008-02-27 10:46:44</wp:post_date>
		<wp:post_date_gmt>2008-02-27 15:46:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>orm-support</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[orm]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Mr eel]]></wp:comment_author>
			<wp:comment_author_email>ichiban@mr-eel.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.mr-eel.com</wp:comment_author_url>
			<wp:comment_author_IP>203.122.240.160</wp:comment_author_IP>
			<wp:comment_date>2008-02-28 18:05:15</wp:comment_date>
			<wp:comment_date_gmt>2008-02-28 23:05:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm admittedly biased, but datamapper is 10x slower? That is certainly not my experience using the library.

By and large DM is faster. AR still has an edge in some cases, but it's definitely not 10x faster than DM.

Wonky tests imo :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.233.254.71</wp:comment_author_IP>
			<wp:comment_date>2008-02-28 19:27:21</wp:comment_date>
			<wp:comment_date_gmt>2008-02-29 00:27:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I admit, I was very surprised as well. I've tried a bunch of different tests, doing different things, and they all came out the same.

Here's an example:

These are from the console, MySQL, pulling back 1000 records:

AR:
running_time do
Post.find(:all)
end
Running time 0.079149 seconds.

DM:
running_time do
Post.find(:all)
end
Running time 0.856797 seconds.

I'm not the only one who came to these conclusions:

http://refactormycode.com/codes/240-datamapper-threaded-benchmark

Notice the comment Sam Smoot left. Seems that there is a bug with 0.2.5 that makes it considerably slower.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The History Of Mack, pt. 3</title>
		<link>http://www.metabates.com/2008/02/27/the-history-of-mack-pt-3/</link>
		<pubDate>Wed, 27 Feb 2008 16:35:30 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/02/27/the-history-of-mack-pt-3/</guid>
		<description></description>
		<content:encoded><![CDATA[Why did I fall in love with <a href="http://rack.rubyforge.org/" target="_blank">Rack</a> and <a href="http://code.macournoyer.com/thin/" target="_blank">Thin</a>? That's easy. I love Thin because it lives up to it's name. It's thin. It's incredibly fast, has great clustering support built in, and is the next generation of Ruby web servers. It kicks Mongrel's ass and it takes names. I'm sure if you asked Zed Shaw he would have no problem with Thin replacing Mongrel.

Rack I love because of it's simplicity, and it's uniformity. It's setting out to create a standard for which any Ruby web application can very easily be plugged into a web server. By abstracting that layer out it makes it easier for developers to focus on writing great apps, and not having to worry about how to deploy them.

Once I started to play around with Rack it didn't take me more then a few minutes to have a very simple site up and running.

Within a few days I had the basics of a Rails like framework rocking, and within two weeks I had the core of Mack coded, and that's where I am today.

Mack is a very fast, stable, and extensible framework. It's designed to be lean and mean and not be all things to all people. It's meant to get you started on the right path, but to let you have your own opinions. It's designed to help you build portal applications simply and efficiently, and deploy with just as much ease.

Mack is ORM agnostic, although it does have some special hooks for ActiveRecord and DataMapper. It does not force you to use a certain type of system for doing web services, although it does promote a RESTful lifestyle. Configuration and setup is system, but there's no reason for you to use it as is out of the box.

Mack encourages experimentation, andÂ  it hopes that you customize it make it your own.

Go and scour through the <a href="http://api.mackframework.com/" target="_blank">API</a> and then download the gem and start building your next generation application the way YOU want to, not the way someone else tells you you have to.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2008-02-27 11:35:30</wp:post_date>
		<wp:post_date_gmt>2008-02-27 16:35:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-history-of-mack-pt-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[orm]]></category>
		<category domain="post_tag" nicename="rack"><![CDATA[rack]]></category>
		<category domain="post_tag" nicename="thin"><![CDATA[thin]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>First release! 0.0.4</title>
		<link>http://www.metabates.com/2008/02/27/first-release-004/</link>
		<pubDate>Wed, 27 Feb 2008 16:39:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/02/27/first-release-003/</guid>
		<description></description>
		<content:encoded><![CDATA[Last night the first public release of Mack was made available on RubyForge. So get it now:
<pre>$ sudo gem install mack</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2008-02-27 11:39:35</wp:post_date>
		<wp:post_date_gmt>2008-02-27 16:39:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-release-004</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rubyforge"><![CDATA[rubyforge]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[first-release-003]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.0.6</title>
		<link>http://www.metabates.com/2008/02/28/release-006/</link>
		<pubDate>Thu, 28 Feb 2008 20:25:52 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/02/28/release-006/</guid>
		<description></description>
		<content:encoded><![CDATA[Get it while it's hot! Of course, you'll probably want to wait a bit for it to propagate to all the gem mirrors. If you really can't wait, you can find it <a href="http://rubyforge.org/frs/download.php/33146/mack-0.0.6.gem">here</a>.
<pre>$ sudo gem install mack</pre>
From the CHANGELOG:
<ul>
	<li>rake generate:&lt;generator_name&gt;</li>
</ul>
<ul>
	<li>rake generate:plugin - will generate the stub of a plugin in the vendor/plugins directory.</li>
</ul>
<ul>
	<li>rake dump:config - prints out the configuration information for the specified environment.</li>
</ul>
<ul>
	<li>redirect_to now takes an optional Hash as a second parameter, instead of a fixnum.</li>
</ul>
<ul>
	<li>redirect_to will now do server side redirects if passed :server_side =&gt; true as part of the optional second argument Hash.</li>
</ul>
<ul>
	<li>plugin in support. plugins get loaded before the 'app' directory. each plugins 'lib' directory is added to the global load path and then each plugins 'init.rb' file is called, which is responsible for loading the necessary files. The 'lib' directories are finally removed from the global load path.</li>
</ul>
<ul>
	<li>renamed initialize directory to initialization. moved logging, orm_support, and plugins to a subfolder called initializers.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2008-02-28 15:25:52</wp:post_date>
		<wp:post_date_gmt>2008-02-28 20:25:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-006</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="generate"><![CDATA[generate]]></category>
		<category domain="post_tag" nicename="generator"><![CDATA[generator]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="plugin"><![CDATA[plugin]]></category>
		<category domain="post_tag" nicename="redirect-initialize"><![CDATA[redirect initialize]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Todd]]></wp:comment_author>
			<wp:comment_author_email>chiology@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://maraby.org/</wp:comment_author_url>
			<wp:comment_author_IP>168.28.53.27</wp:comment_author_IP>
			<wp:comment_date>2008-02-29 11:33:08</wp:comment_date>
			<wp:comment_date_gmt>2008-02-29 16:33:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just to cover my bases, I'm posting here too.

I tried sending an email to bugs@mackframework.com but it returned undeliverable because the virtual user is unknown to alias table (or something similar to that).

There's a bug in the module core extension... the new_level param is completely ignored/unused.

I also added some bugs in the RubyForge tracker, including this bug mentioned above.

I'd recommend adding a bit of contact information so we know who to contact (with actually-working contact information) and who owns/runs this project.

Cheers,

Matt Todd]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>74.92.43.9</wp:comment_author_IP>
			<wp:comment_date>2008-02-29 14:33:15</wp:comment_date>
			<wp:comment_date_gmt>2008-02-29 19:33:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Matt, for the heads up. I've fixed the email problem. 

I've also fixed the bug you refer to. It'll be in the next release of the gem.

Keep `em coming!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>People linking to Mack</title>
		<link>http://www.metabates.com/2008/02/29/people-linking-to-mack/</link>
		<pubDate>Fri, 29 Feb 2008 21:15:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/02/29/people-linking-to-mack/</guid>
		<description></description>
		<content:encoded><![CDATA[Mack has only been around for a few days, and people are already started to download it and link to. Yippie!

<a href="http://maraby.org/post/27611841" target="_blank">http://maraby.org/post/27611841</a>

<a href="http://sness.blogspot.com/2008/02/mack.html" target="_blank">http://sness.blogspot.com/2008/02/mack.html</a>

<a href="http://anarchaia.org/archive/2008/02/28.html" target="_blank">http://anarchaia.org/archive/2008/02/28.html</a>

<a href="http://yogindar.blogspot.com/2008/02/ruby-web-application-framework-mack.html" target="_blank">http://yogindar.blogspot.com/2008/02/ruby-web-application-framework-mack.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2008-02-29 16:15:12</wp:post_date>
		<wp:post_date_gmt>2008-02-29 21:15:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>people-linking-to-mack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="links"><![CDATA[Links]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="press"><![CDATA[Press]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.0.6.2</title>
		<link>http://www.metabates.com/2008/02/29/release-0062/</link>
		<pubDate>Fri, 29 Feb 2008 22:32:27 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/02/29/release-0062/</guid>
		<description></description>
		<content:encoded><![CDATA[Please allow for mirror prorogation.Â  Thanks to <a href="http://maraby.org/post/27611841" target="_blank">Matt Todd</a> for finding the first official Mack bug! Strangely enough, I actually welcome people finding bugs in Mack. It only serves to make it a better framework.

If you find a bug, please head on over to <a href="http://rubyforge.org/tracker/?group_id=4405" target="_blank">RubyForge</a> and submit a ticket for it, and I'll do my best to turn it around as quick as possible.

Changelog:
<ul>
	<li>gem: thin 0.7.0</li>
</ul>
<ul>
	<li>gem: cachetastic 1.3.1</li>
</ul>
<ul>
	<li>Fixed 18487: #convert_security_of_methods ignores new_level param</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2008-02-29 17:32:27</wp:post_date>
		<wp:post_date_gmt>2008-02-29 22:32:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-0062</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rubyforge"><![CDATA[rubyforge]]></category>
		<category domain="post_tag" nicename="thin"><![CDATA[thin]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Philosphy of releases</title>
		<link>http://www.metabates.com/2008/02/29/philosphy-of-releases/</link>
		<pubDate>Fri, 29 Feb 2008 22:40:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/02/29/philosphy-of-releases/</guid>
		<description></description>
		<content:encoded><![CDATA[If you haven't noticed by now, I tend to release smaller releases more often. I know there isn't much precedent for that as Mack has only been out a week, and there's only been three releases, but I can assure you, it's a sign of things to come.

I feel that at this stage in a code's life cycle, it benefits from getting out into the wild sooner, rather then later. Sure, I could bulk up features and bug fixes and do big 'wow' factor releases, but why should I sit on a cool feature or an important bug fix simply so I can have a bit of 'wow'? Why not let people start to enjoy those new features, and give me important feedback earlier?

I'm sure as the code tree grows and people start really using Mack, things may slow down a bit. When there are more developers then just myself, things will definitely slow down a pace, but until then, I just don't see the point in holding back.

When I have something cool and ready to go, I'm going to release it. You don't <em>have</em> to upgrade your Mack environment if you don't want to, you can if you want. If you would prefer to 'bulk' them up yourself, then that's entirely up to you. Like I've said before, Mack is trying to be as non-opinionated as it can be. That includes how you update your system.

Anyway, I just thought I would share a bit of how things will be handled going forward. I hope that's fine with you.

Have a good weekend.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2008-02-29 17:40:15</wp:post_date>
		<wp:post_date_gmt>2008-02-29 22:40:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>philosphy-of-releases</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gems"><![CDATA[gems]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Todd]]></wp:comment_author>
			<wp:comment_author_email>chiology@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://maraby.org/</wp:comment_author_url>
			<wp:comment_author_IP>168.28.53.27</wp:comment_author_IP>
			<wp:comment_date>2008-03-03 19:23:47</wp:comment_date>
			<wp:comment_date_gmt>2008-03-04 00:23:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, haven't had the time to journey through the code again since Friday, but just thought I'd recommend checking out http://lighthouseapp.com/ for Bug tracking, et al. Great software.

Also, I didn't see any music on Blue Wires blog (only looked under Music)... am I blind?

Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.233.254.71</wp:comment_author_IP>
			<wp:comment_date>2008-03-03 21:46:21</wp:comment_date>
			<wp:comment_date_gmt>2008-03-04 02:46:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Matt, I'll check out light house. I'm not very happy with RubyForge, anything has to be better then that, and judging by the amount of interest I've gotten in the less then a week that Mack has been in the wild, it sounds like I definitely need something.

As for the Blue Wires, we're actually recording our first songs as we speak. We only got together right after Christmas, so we're a brand new band. We haven't even played a show yet. The 3 songs we're recording right now should be finished by the end of the March/beginning of April.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.233.254.71</wp:comment_author_IP>
			<wp:comment_date>2008-03-03 21:47:24</wp:comment_date>
			<wp:comment_date_gmt>2008-03-04 02:47:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, and sometime tomorrow I'm going to release 0.1.0. It will have an inflection system, and a new scaffold/resource generator.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Release 0.0.7.0</title>
		<link>http://www.metabates.com/2008/03/03/release-0070/</link>
		<pubDate>Mon, 03 Mar 2008 20:43:58 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/03/release-0070/</guid>
		<description></description>
		<content:encoded><![CDATA[Nothing exciting at all in this release. It's just a reorganization of the gem. No need to rush out and download the latest gem.
<pre>$ sudo gem install mack</pre>
Changelog:
<ul>
	<li>Fixed [#18488] Recommend moving files under lib/</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2008-03-03 15:43:58</wp:post_date>
		<wp:post_date_gmt>2008-03-03 20:43:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-0070</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0.1.0: The Obligatory &#039;Blog&#039; Demo</title>
		<link>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo/</link>
		<pubDate>Tue, 04 Mar 2008 20:15:46 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/04/the-obligatory-blog-demo/</guid>
		<description></description>
		<content:encoded><![CDATA[Ok, because every good framework should tell you how to create a blog, why should Mack be any different? Let's start off with the basics. Is Mack installed? If not, here's how:
<pre>$ sudo gem install mack</pre>
Great! Before we move on, make sure that the gem you installed is at LEAST version 0.1.0, otherwise, you're not going to get very far in this tutorial. Now, let's move on. Now let's generate our kick ass new blog, and since we're going to need some sort of database support for our blog, we'll configure it to use DataMapper. If you don't have DataMapper installed, please head over to <a href="http://datamapper.org" target="_blank">http://datamapper.org</a> to find out how to install it. Mack has support for ActiveRecord as well, but it's just easier to get DataMapper going because you don't have to deal with migrations.
<pre>$ mack my_kick_ass_blog -o data_mapper
$ cd my_kick_ass_blog</pre>
That should've created a whole bunch of files and folders for your blog. Now let's generate some scaffold code for our blog:
<pre>$ rake generate:scaffold name=posts</pre>
That should've created even more files for you. One of those files is app/models/post.rb, let's open that up, so we can edit it for DataMapper.

Edit the file so it looks something like this:
<pre>class Post &lt; DataMapper::Base
  property :title, :string
  property :email, :string
  property :body, :text
  property :created_at, :datetime
  property :updated_at, :datetime

  validates_presence_of :title
  validates_presence_of :body
  validates_presence_of :email
end</pre>
Now, I'm not going to go into detail as to what that's doing, that's for the guys at DataMapper to explain. Before we move on to the next step, you'll probably want to crack open config/database.yml and edit it so it the paths to your database are correct, you'll probably also want to go to your database system and make sure that the database name you configured in your config/database.yml is created, otherwise this will be a very short trip. I'll wait while you do that. Finished, great! Let's move on.

We need to now open a Mack console so we can create the tables needed for our blog.
<pre>$ rake console
$ Post.table.create!
$ exit</pre>
Ok, we should now have a posts table in our new database. Isn't life wonderful? We're so close to showing the world how wonderful we are as developers.

Now let's edit our views, so they look something like this:

app/views/posts/index.html.erb:
<pre>&lt;h1&gt;Listing posts&lt;/h1&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Body&lt;/th&gt;
    &lt;th&gt;Email&lt;/th&gt;
  &lt;/tr&gt;

&lt;% for post in @posts %&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;%=post.title %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=post.body %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%=post.email %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to("Show", posts_show_url(:id =&gt; post.id)) %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to("Edit", posts_edit_url(:id =&gt; post.id)) %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to("Delete", posts_delete_url(:id =&gt; post.id), :method =&gt; :delete, :confirm =&gt; "Are you sure?") %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;
&lt;/table&gt;

&lt;br /&gt;

&lt;%= link_to("New Post", posts_new_url) %&gt;</pre>
app/views/posts/edit.html.erb:
<pre>&lt;h1&gt;Edit post&lt;/h1&gt;

&lt;%= error_messages_for :post %&gt;

&lt;form action="&lt;%= posts_update_url(:id =&gt; @post.id) %&gt;" class="edit_post" id="edit_post" method="post"&gt;
  &lt;input type="hidden" name="_method" value="put"&gt;
  &lt;p&gt;
    &lt;b&gt;Title&lt;/b&gt;&lt;br /&gt;
    &lt;input id="post_title" name="post[title]" size="30" type="text" value="&lt;%= @post.title %&gt;" /&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Body&lt;/b&gt;&lt;br /&gt;
    &lt;textarea id="post_body" name="post[body]"&gt;&lt;%= @post.body %&gt;&lt;/textarea&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Email&lt;/b&gt;&lt;br /&gt;
    &lt;input id="post_email" name="post[email]" size="30" type="text" value="&lt;%= @post.email %&gt;" /&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;input id="post_submit" name="commit" type="submit" value="Create" /&gt;
  &lt;/p&gt;
&lt;/form&gt;

&lt;%= link_to("Back", posts_index_url) %&gt;</pre>
app/views/posts/show.html.erb:
<pre>&lt;p&gt;
  &lt;b&gt;Title:&lt;/b&gt;
  &lt;%= @post.title %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;Body:&lt;/b&gt;
  &lt;%= @post.body %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;Email:&lt;/b&gt;
  &lt;%= @post.email %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;Created at:&lt;/b&gt;
  &lt;%= @post.created_at %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;Updated at:&lt;/b&gt;
  &lt;%= @post.updated_at %&gt;
&lt;/p&gt;

&lt;%= link_to("Edit", posts_edit_url(:id =&gt; @post.id)) %&gt; |
&lt;%= link_to("Back", posts_index_url) %&gt;</pre>
app/views/posts/new.html.erb:
<pre>&lt;h1&gt;New post&lt;/h1&gt;

&lt;%= error_messages_for :post %&gt;

&lt;form action="&lt;%= posts_create_url %&gt;" class="new_post" id="new_post" method="post"&gt;
  &lt;p&gt;
    &lt;b&gt;Title&lt;/b&gt;&lt;br /&gt;
    &lt;input id="post_title" name="post[title]" size="30" type="text" value="&lt;%= @post.title %&gt;" /&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Body&lt;/b&gt;&lt;br /&gt;
    &lt;textarea id="post_body" name="post[body]"&gt;&lt;%= @post.body %&gt;&lt;/textarea&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Email&lt;/b&gt;&lt;br /&gt;
    &lt;input id="post_email" name="post[email]" size="30" type="text" value="&lt;%= @post.email %&gt;" /&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;input id="post_submit" name="commit" type="submit" value="Create" /&gt;
  &lt;/p&gt;
&lt;/form&gt;

&lt;%= link_to("Back", posts_index_url) %&gt;</pre>
Ok, so now we've created our forms, and setup our index page. Let's actually go to the site and see it all works!

First we need to start the server:

$ rake server

Now let's head on over to http://localhost:3000/posts and see what we've got. You should see a page that looks something like this:

<img src="http://www.mackframework.com/wp-content/uploads/2008/03/12.png" alt="Blog Demo 1" />

Now let's click on that 'New Post' link and fill out the form:

<img src="http://www.mackframework.com/wp-content/uploads/2008/03/21.png" alt="Blog Demo 2" />

Now, let's hit that wonderful 'Create' button and see what happens!

<img src="http://www.mackframework.com/wp-content/uploads/2008/03/31.png" alt="Blog Demo 3" />

Congrats! You just created your first blog post! Now let's head back to http://localhost:3000/posts and see what we've got.

<img src="http://www.mackframework.com/wp-content/uploads/2008/03/41.png" alt="Blog Demo 4" />

Wonderful! Now all that's left to do is to set our home page to our posts index page. Let's open up our config/routes.rb and edit the following line:
<pre>r.home_page "/", :controller =&gt; :default, :action =&gt; :index</pre>
so that it's now:
<pre>r.home_page "/", :controller =&gt; :posts, :action =&gt; :index</pre>
Now all you have to do is to restart your server and Bob's your uncle when you hit http://localhost:3000 again you should your fantastic posts index page.

This concludes our brief introductory tutorial on getting going on Mack. Obviously Mack does a lot more, and I highly encourage you to read the <a href="http://api.mackframework.com">RDoc</a> to find out more about what it can do.

Enjoy.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2008-03-04 15:15:46</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:15:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-obligatory-blog-demo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blog"><![CDATA[blog]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="demo"><![CDATA[demo]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="post"><![CDATA[post]]></category>
		<category domain="post_tag" nicename="scaffold"><![CDATA[scaffold]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Dinooz]]></wp:comment_author>
			<wp:comment_author_email>bernardino.lopez@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.anunciategratis.com</wp:comment_author_url>
			<wp:comment_author_IP>12.144.64.196</wp:comment_author_IP>
			<wp:comment_date>2008-03-13 09:02:38</wp:comment_date>
			<wp:comment_date_gmt>2008-03-13 14:02:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wonder why the app/models/post.rb need to include the DB Definition.

class Post  This can create the properly migration file or update the app/models/post.rb file automatically.

class Post &lt; DataMapper::Base
  property :title, :string
  property :email, :string
  property :body, :text
  property :created_at, :datetime
  property :updated_at, :datetime

  validates_presence_of :title
  validates_presence_of :body
  validates_presence_of :email
end

Also create the files with the properly content !!!.

app/views/posts/index.html.erb
app/views/posts/edit.html.erb
app/views/posts/show.html.erb
app/views/posts/new.html.erb

So what is left for you to do just update your routes file  and start your web server. =)

Note 
when you mention posts_index_url, does exist the post_index_path also ???
What about the comments, can you elaborate on how to add a comments relation in this framework ???
How can enable the usabe of nested resources ???
Any possible ideas on implement basic themes/skins ???

So far looks good , I think will give a try keep doing the good job.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>74.92.43.9</wp:comment_author_IP>
			<wp:comment_date>2008-03-13 12:02:01</wp:comment_date>
			<wp:comment_date_gmt>2008-03-13 17:02:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Dinooz, thanks for the feedback. The reason the schema information is in the model, is because that's the preferred way of using DataMapper. If you're using ActiveRecord, then you can definitely put it in a migration.

I much prefer the use of migrations, then the DataMapper approach, but using DataMapper made for an easier demo. :)

"Also create the files with the properly content !!!.

app/views/posts/index.html.erb
app/views/posts/edit.html.erb
app/views/posts/show.html.erb
app/views/posts/new.html.erb"

I think what you mean by that is why doesn't Mack create all the form elements when you run scaffold like Rails does. Well, there's two reasons for that. 

One, is that Mack is an ORM agnostic framework. That means you should be able to use any ORM you wish with it. There are basic hooks for ActiveRecord and DataMapper, however.

Two, is that I'm still very much so working on the core components of the framework. The scaffold generator is really there to just 'lay things out' a bit for you. Down the line when I have more time, and a more of the core feature set implemented I plan on returning to this, and trying to improve upon the scaffold generator for both DataMapper and ActiveRecord. Of course, with that said, I'm looking for other contributors, so if you're interested and want to write that part of the code, I'm happy to chat with you. :)

'posts_index_url' gives you '/posts', so it effectively does with 'posts_index_path' does in Rails. It's absolute, but does not give you the full domain path. This was done for a couple of reasons, the big one being that by not giving you the full domain path, you're able to use the routing methods without a request. This makes it easy to use them in Rake tasks, emails, etc... something that Rails has a big problem with. If you really need the domain on there, then write a helper method to wrap the *_url methods, or just override the 'link_to' method.

Currently there is no support for nested resources. That doesn't mean there won't be support for them down the line, it's just right now, I'm one guy, and I'm trying to write the core features, and the features that are different from Rails, before I write things like nested resources.

As far as skins/themes are concerned, that's actually on my list of things to tackle. It's a big need the company I am working for needs, and something that will be at the heart of Mack in a future release. Right now there is the standard layout support, similar to Rails.

I hope that answers your questions. Please feel free and hit me up with more. I'm always welcome to feedback, I think it makes for a better code base in the end.

Thanks Dinooz.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Adding RSS/xml feeds to our Blog demo &#8212; Mack Framework]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mackframework.com/2008/03/19/adding-rssxml-feeds-to-our-blog-demo/</wp:comment_author_url>
			<wp:comment_author_IP>208.113.181.17</wp:comment_author_IP>
			<wp:comment_date>2008-03-19 15:42:52</wp:comment_date>
			<wp:comment_date_gmt>2008-03-19 20:42:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] as you remember a while back we created a simple blog using mack, http://www.mackframework.com/2008/03/04/the-obligatory-blog-demo/. Well now it&#8217;s time to add the all important RSS/xml feed to [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Release 0.1.0</title>
		<link>http://www.metabates.com/2008/03/04/release-010/</link>
		<pubDate>Tue, 04 Mar 2008 20:13:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/04/release-010/</guid>
		<description></description>
		<content:encoded><![CDATA[Rejoice! Yet another new release. Please be patient for the gem mirrors to pick it up.

Changelog:
<ul>
	<li>Added an inflections system. The default inflections are from Jeremy McAnally's great Rails plugin, acts_as_good_speeler. Thanks Jeremy! <a href="http://www.jeremymcanally.com/" target="_blank">http://www.jeremymcanally.com/</a></li>
</ul>
<ul>
	<li>Added a to_params method to Hash to help with testing.</li>
</ul>
<ul>
	<li>Added rake generate:scaffold task.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2008-03-04 15:13:53</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:13:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="inflections"><![CDATA[inflections]]></category>
		<category domain="post_tag" nicename="inflector"><![CDATA[inflector]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="scaffold"><![CDATA[scaffold]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More links to Mack</title>
		<link>http://www.metabates.com/?p=34</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[http://www.roscripts.com/res/A_Ruby_Web_Application_Framework___x2014__Mack_Framework-13647.html

http://taggy.jp/bookmark/search/framework+/?order=new

http://ramaze.net/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2008-03-18 12:55:34</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
	</item>
	<item>
		<title>Using Distributed Routes</title>
		<link>http://www.metabates.com/?p=42</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=42</guid>
		<description></description>
		<content:encoded><![CDATA[First, download the demo code for this example here.

Start the Cachetastic DRb server:

$ cachetastic_drb_server]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2008-03-20 22:02:49</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
	</item>
	<item>
		<title>About</title>
		<link>http://www.metabates.com/about/</link>
		<pubDate>Thu, 11 Jun 2009 02:26:13 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?page_id=234</guid>
		<description></description>
		<content:encoded><![CDATA[<p class="FT"><span>Mark Bates has been developing web applications of one kind or another since 1996. He has spent an ungodly amount of time programming Java, but thankfully he discovered Ruby in late 2005, and life has been much nicer since. In 2011 Mark found CoffeeScript and his life got even nicer!</span></p>
<p class="FT"><span>Since discovering Ruby Mark has become a prominent member of the community. He has developed various open source projects such as Configatron, Cachetastic, CoverMe, and the Mack Framework. In 2009 Mark authored the book "<a href="http://book.markbates.com" target="_blank">Distributed Programming with Ruby</a>" for Addison-Wesley.</span></p>
<p class="FT"><span>Since discovering CoffeeScript in 2011 Mark has become a leader in that community as well, through presentations at local user groups to releasing several high profile libraries, such as Deano.JS and CoffeeBeans. Mark is currently working on the book "<a href="http://my.safaribooksonline.com/9780132946155?portal=informit">Programming in CoffeeScript</a>" for Addison-Wesley (due out in early 2012).</span></p>
<p class="FT"><span>Mark has taught classes on both Ruby and Ruby on Rails. He has spoken at several Ruby gatherings, including 2008 and 2010’s RubyConf where Mark spoke about building distributed applications. Mark has also given presentations about CoffeeScript at several gatherings, including BostonRB.</span></p>
<p class="FT"><span>In 2011 Mark launched the innovative applications </span><a href="http://www.fluxtracker.com">FluxTracker.com</a><span> (integrated issue, project, and error tracking) and </span><a href="http://tweetko.com/">TweetKO.com</a> (bookmark and backup tweets)<span>.</span></p>
<p class="FT"><span>Mark has an honors degree in Music from the Liverpool Institute for Performing Arts. He still likes to rock out on the weekends, but set times are now 10PM and not 2AM.</span></p>
<p class="FT"><span>He lives just outside of Boston with his wife Rachel and their sons Dylan and Leo.</span></p>
<p class="FT"><span>Mark can be found at </span><a href="http://www.markbates.com/">http://www.markbates.com</a><span> and <a href="http://github.com/markbates">http://github.com/markbates</a>.</span></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2009-06-10 21:26:13</wp:post_date>
		<wp:post_date_gmt>2009-06-11 02:26:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hiring Employee #1</title>
		<link>http://www.metabates.com/?p=448</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=448</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignleft" title="biz plan" src="http://www.honeytechblog.com/wp-content/uploads/2009/05/business-plan.jpg" alt="" width="288" height="224" />Recently I was fortunate enough to be down in New Orleans for <a href="http://launchpadignition.com/launchfest" target="_blank">Launchfest</a> to help launch one of my clients, <a href="http://liveset.com" target="_blank">Liveset.com</a>. The launch was very successful and I was pleased to be a part of it. Apart from helping to launch Liveset I also had the opportunity to chat with a lot of new entrepreneurs. These conversations led me to think about how technology companies are launched, and how I, as a consultant, can help launch those companies.

Let's start at the beginning, the idea. You're an entrepreneur with a great new idea for a technology based company. Where do you start? What do you do? Well, you need two things; 1.) Money 2.) Your product. While I can't help you get money, I can help you build your product. So let's talk about that.

My advice to everybody who wants to start a technology based company is to keep your development in house. Don't outsource it. You want to be in control of your most valuable asset. You don't want somebody else, some other company, managing that asset for you. You want your own development team, in house, building that technology for you.

So how do you go about building that team with a very limited budget and no time to get started? Well, I would propose you don't. Hire a consultant. Confused yet? I just told you to do it all in house and then I turned around and said hire a consultant.

What's the difference between hiring a development shop (or outsourcing) or hiring a consultant such as myself. Well, a big development shop can offer you a nice one stop shop for development. They have several developers ready to build your application. They have designers ready to go. They have processes in place to manage the relationship and speed it along. And that's because they're interest is in building your app and moving on to the next customer. That's what they do. That means you have to bend to their way of working, pay their very high costs, use they're software, and can generally be quite restrained in terms of changing your product or direction.

As a consultant I take a very different approach to building your company. The first major difference was in that last statement. I want to build your company, not just your technology. I come into a new project as if I was employee #1. I will work with you on all fronts to make sure when you launch it's the company you want, and not the application some other company wanted to build for you.

It's important to make sure that whomever you're working with challenges your assumptions. Questions the decisions you make, obviously within reason. Offers you valuable insight into how technology should be built, used, and deployed. That's part of a what a consultant can do for you. Your needs will change constantly during the launch of your company and you to make sure that whoever is working with you can react to those changes. The consultant should help you set up your workflow, tools, and processes for going forward. In short they should help you set up your company.

Once your product is built and launched the consultant can then help you find and hire that all important first employee. They will help onboard that employee and hand off the development of  your technology to your new in house team.

So, the next time you have the big idea, you get your first round of angel funding, and are trying to figure out to build your product, think carefully about the route you take to get there. Hire a big development shop to quickly bang out a product for you (knowing that it might not actually be the product you want) or hire a consultant who will act as a fellow team member and help build both your company as well as your product.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date>2011-05-07 10:51:27</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="entrepreneur"><![CDATA[entrepreneur]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="hiring"><![CDATA[hiring]]></category>
		<category domain="post_tag" nicename="launchfest"><![CDATA[launchfest]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.metabates.com/?p=514</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=514</guid>
		<description></description>
		<content:encoded><![CDATA[Of the course of my career I have been an employee, a hiring manager, a CTO, and a consultant, just to name a few. Through my journey I have learned a lot of things about building teams and hiring. I would like to share with you a few of the things I have learned, in particular why I think companies should always hire someone as a contractor first.

Right now in Boston there is a very severe lack of full time Ruby on Rails developers. Boston is loaded down with all manner of startups, which is great. The problem being that there are more startups then there are qualified developers. So what is a company to do?

I've spoken with quite a few companies who tell me they can't find the right full time employees and that they're business is suffering because of it. Yet, despite this they don't want to hire consultants and contractors to help them out. The arguments are generally as follows.

First the cost. Most companies believe that hiring contractors can be prohibitively expensive. I'm not going to lie to you and tell you that contractors don't cost]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>514</wp:post_id>
		<wp:post_date>2011-12-01 14:55:45</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Books</title>
		<link>http://www.metabates.com/books/</link>
		<pubDate>Wed, 01 Feb 2012 16:16:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?page_id=519</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Programming in CoffeeScript</h2>
<img class="alignleft size-full wp-image-526" title="Programming CoffeeScript" src="http://www.metabates.com/wp-content/uploads/2012/02/cover_300.png" alt="" width="300" height="386" />For millions of web developers, CoffeeScript is emerging as one of today's most exciting new technologies. A superset of JavaScript, it enables experienced Javascript developers to write better, clearer code: software that's more concise, maintainable, flexible, reliable, and secure. CoffeeScript's inclusion in the popular web framework, Ruby on Rails, has brought CoffeeScript to an immense new audience. <em>Programming in CoffeeScript</em> covers everything experienced web developers need to evaluate CoffeeScript, "think" in CoffeeScript, and write high-performance software with it. Mark Bates follows the proven format of other "Programming in" books in our Developers' Library series, with one major addition: he presents multiple same-page code comparisons demonstrating exactly how CoffeeScript improves upon JavaScript. Both a tutorial and reference, this book first introduces CoffeeScript's basic concepts, and then shows how to build a full fledged application with it. Bates covers functions, scope, collections, iterations, classes, modules, CoffeeScript's innovative Cake build system testing with the popular Jasmine framework, and much more - concluding with a full application that uses CoffeeScript on both the server side, using popular tools such as Express, Node.js, and Mongoose (MongoDB), and the client side, with jQuery and Backbone.js.

<h3>Available on:</h3>
<a href="http://www.amazon.com/gp/product/032182010X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&tag=groupgiftlist-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=032182010X" target="_blank">Amazon.com</a>

<a href="http://my.safaribooksonline.com/book/programming/coffeescript/9780132946155" target="_blank">Safari Books Online</a>

<a href="http://www.informit.com/store/product.aspx?isbn=0132946173" target="_blank">informIT</a>

<h2>Distributed Programming with Ruby</h2>
<a href="http://www.metabates.com/wp-content/uploads/2012/02/drb_300.png"><img class="alignleft size-full wp-image-520" title="Distributed Programming with Ruby" src="http://www.metabates.com/wp-content/uploads/2012/02/drb_300.png" alt="" width="300" height="411" /></a>

<strong>Complete, Hands-On Guide to Building Advanced Distributed Applications with Ruby</strong>

<strong></strong>Distributed programming techniques make applications easier to scale, develop, and deploy—especially in emerging cloud computing environments. Now, one of the Ruby community’s leading experts has written the first definitive guide to distributed programming with Ruby.

Mark Bates begins with a simple distributed application, and then walks through an increasingly complex series of examples, demonstrating solutions to the most common distributed programming problems.

Bates presents the industry’s most useful coverage of Ruby’s standard distributed programming libraries, DRb and Rinda. Next, he introduces powerful third-party tools, frameworks, and libraries designed to simplify Ruby distributed programming, including his own Distribunaut.

If you’re an experienced Ruby programmer or architect, this hands-on tutorial and practical reference will help you meet any distributed programming challenge, no matter how complex.

<h3>Available on:</h3>
<a href="http://www.amazon.com/gp/product/0321638360?ie=UTF8&amp;tag=groupgiftlist-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321638360" target="_blank">Amazon.com</a>

<a href="http://my.safaribooksonline.com/book/web-development/ruby/9780321669919" target="_blank">Safari Books Online</a>

<a href="http://www.informit.com/store/product.aspx?isbn=9780321638366&amp;aid=3B419801-6640-4A1F-A653-6CD00295FCDD" target="_blank">informIT</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>519</wp:post_id>
		<wp:post_date>2012-02-01 11:16:01</wp:post_date>
		<wp:post_date_gmt>2012-02-01 16:16:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>books</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Trac now online</title>
		<link>http://www.metabates.com/2008/03/05/trac-now-online/</link>
		<pubDate>Wed, 05 Mar 2008 23:22:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/05/trac-now-online/</guid>
		<description></description>
		<content:encoded><![CDATA[There is now a Trac system set up to help deal with bug/feature tickets, wiki, roadmap, etc... You can find it at <a href="http://trac.mackframework.com">http://trac.mackframework.com</a>.

While you're there you can browse the new SVN repository, see what code is in the pipelines, etc...

It's all very exciting, in a really geeky sort of way.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2008-03-05 18:22:02</wp:post_date>
		<wp:post_date_gmt>2008-03-05 23:22:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trac-now-online</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="roadmap"><![CDATA[roadmap]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<category domain="post_tag" nicename="trac"><![CDATA[trac]]></category>
	</item>
	<item>
		<title>Release 0.2.0</title>
		<link>http://www.metabates.com/2008/03/11/release-020/</link>
		<pubDate>Tue, 11 Mar 2008 20:47:30 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/11/release-020/</guid>
		<description></description>
		<content:encoded><![CDATA[A couple of really cool features in this release. In controllers and views you canÂ  now call:
<pre>render(:url=&gt; "http://www.mycoolurl.com")</pre>
Developers can now also develop their own custom rendering systems, without monkey patching the core:
<pre>class Mack::Rendering::Pdf &lt; Mack::Rendering::Base
  def render
    # do work to render stuff as a PDF
  end
end</pre>
Now add this to the list of available render systems:
<pre>app_config.mack.rendering_systems &lt;&lt; :pdf</pre>
You should now be able to do this in your controller:
<pre>class MyAwesomeController &lt; Mack::Controller::Base
  def pdf
    render(:pdf =&gt; "my_pdf_template")
  end
end</pre>
Install:
<pre>$ sudo gem install mack</pre>
Changelog:
<ul>
	<li>ticket: <a href="http://trac.mackframework.com/ticket/3" target="_blank">3</a> Render url in Controllers/Views</li>
	<li>ticket: <a href="http://trac.mackframework.com/ticket/5" target="_blank">5</a> Render Extension System.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2008-03-11 15:47:30</wp:post_date>
		<wp:post_date_gmt>2008-03-11 20:47:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-020</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="developer"><![CDATA[developer]]></category>
		<category domain="post_tag" nicename="extension"><![CDATA[extension]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="pdf"><![CDATA[pdf]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="render"><![CDATA[render]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
	</item>
	<item>
		<title>Mack featured on the RailsEnvy.com podcast</title>
		<link>http://www.metabates.com/2008/03/13/mack-featured-on-the-railsenvycom-podcast/</link>
		<pubDate>Thu, 13 Mar 2008 18:37:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/13/mack-featured-on-the-railsenvycom-podcast/</guid>
		<description></description>
		<content:encoded><![CDATA[Well, um... the title of the post really says it all. Mack is briefly discussed about 3/4 of the way in.

Here's the podcast: <a href="http://railsenvy.com/assets/2008/3/12/Podcast_22.mp3" target="_blank">http://railsenvy.com/assets/2008/3/12/Podcast_22.mp3</a>

Make sure to checkout their other podcasts, <a href="http://www.railsenvy.com" target="_blank">RailsEnvy.com</a> Those guys do a great job, and their quite funny to listen to as well.
<h3>Other Mack Sitings:</h3>
<a href="http://www.nomedojogo.com/2008/03/13/rails-podcast-brasil-episodio-9/" target="_blank">http://www.nomedojogo.com/2008/03/13/rails-podcast-brasil-episodio-9/</a> - This appears to be the RailsEnvy podcast in Portuguese, but since I don't speak Portuguese, so I can't really say.

<a href="http://blog.libinpan.com/2008/03/13/links-for-2008-03-13/" target="_blank">http://blog.libinpan.com/2008/03/13/links-for-2008-03-13/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2008-03-13 13:37:01</wp:post_date>
		<wp:post_date_gmt>2008-03-13 18:37:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-featured-on-the-railsenvycom-podcast</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brazil"><![CDATA[brazil]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="podcast"><![CDATA[podcast]]></category>
		<category domain="category" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="rails-envy"><![CDATA[rails envy]]></category>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://railsenvy.com/assets/2008/3/12/Podcast_22.mp3
17056593
audio/mpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Carlos Brando]]></wp:comment_author>
			<wp:comment_author_email>eduardobrando@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nomedojogo.com</wp:comment_author_url>
			<wp:comment_author_IP>201.26.54.211</wp:comment_author_IP>
			<wp:comment_date>2008-03-13 14:16:05</wp:comment_date>
			<wp:comment_date_gmt>2008-03-13 19:16:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

In fact the Rails Podcast Brazil is the official Brazilian podcast about Rails. And you can be relaxed, we speak well of its framework.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>74.92.43.9</wp:comment_author_IP>
			<wp:comment_date>2008-03-13 14:37:12</wp:comment_date>
			<wp:comment_date_gmt>2008-03-13 19:37:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There you go! Thanks for the clarification on the official Rails Podcast of Brazil. Thanks Carlos.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Jason Seifer]]></wp:comment_author>
			<wp:comment_author_email>jason@railsenvy.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.railsenvy.com</wp:comment_author_url>
			<wp:comment_author_IP>64.105.59.101</wp:comment_author_IP>
			<wp:comment_date>2008-03-13 15:05:13</wp:comment_date>
			<wp:comment_date_gmt>2008-03-13 20:05:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the compliments and great job on Mack.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[Celestino Gomes]]></wp:comment_author>
			<wp:comment_author_email>tinorj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://tinogomes.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>201.7.186.66</wp:comment_author_IP>
			<wp:comment_date>2008-03-13 15:39:35</wp:comment_date>
			<wp:comment_date_gmt>2008-03-13 20:39:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Here in Brazil, we speak Portuguese and not Brazilian ;)

Very good framework!

Congratulations!!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>74.92.43.9</wp:comment_author_IP>
			<wp:comment_date>2008-03-13 15:59:29</wp:comment_date>
			<wp:comment_date_gmt>2008-03-13 20:59:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the correction Celestino. I've updated the entry.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[Hadriankd]]></wp:comment_author>
			<wp:comment_author_email>italia98@ua.fm</wp:comment_author_email>
			<wp:comment_author_url>http://connell103.wordpress.com/2008/03/24/insegnante-autoscuola/</wp:comment_author_url>
			<wp:comment_author_IP>208.102.207.156</wp:comment_author_IP>
			<wp:comment_date>2008-03-25 18:10:35</wp:comment_date>
			<wp:comment_date_gmt>2008-03-25 23:10:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thats it, man]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Memcache issue with Mack 0.2.0</title>
		<link>http://www.metabates.com/2008/03/14/memcache-issue-with-mack-020/</link>
		<pubDate>Sat, 15 Mar 2008 02:46:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/14/memcache-issue-with-mack-020/</guid>
		<description></description>
		<content:encoded><![CDATA[If you get this error:
<pre>no such file to load -- memcache</pre>
The problem is mack-0.2.0 uses the cachetastic-1.3.1 gem, which has an errant require in the memcache adapter. There will be a patch forthcoming for Mack to use the lastest version of cachetastic which solves this issue.

Until that patch is out, the easiest thing to do is install the memcache-client gem, like such:
<pre>$ sudo gem install memcache-client</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2008-03-14 21:46:51</wp:post_date>
		<wp:post_date_gmt>2008-03-15 02:46:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>memcache-issue-with-mack-020</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="memcache"><![CDATA[memcache]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
	</item>
	<item>
		<title>Release 0.2.0.1</title>
		<link>http://www.metabates.com/2008/03/14/release-0201/</link>
		<pubDate>Sat, 15 Mar 2008 03:09:37 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/14/release-0201/</guid>
		<description></description>
		<content:encoded><![CDATA[As previously mentioned there was an issue in a Mack dependency, cachetastic. Mack 0.2.0 used cachetastic-1.3.1 which had a require for the memcache-client gem.

If you didn't have the gem installed you would get some not very nice messages. This require was fixed in cachetastic-1.4.1. Mack 0.2.0.1 uses the new version of cachetastic. There is no new functionality in 0.2.0.1, it's simply the require fix.

Some really cool functionality is in the works for 0.3.0 of Mack, including everyone's favorite, distributed routes. This, unfortunately, probably won't be out till the end of next week.
<pre>$ sudo gem install mack</pre>
Like always, please allow time for the gem to propagate throughout the RubyForge mirrors.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2008-03-14 22:09:37</wp:post_date>
		<wp:post_date_gmt>2008-03-15 03:09:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-0201</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="post_tag" nicename="distributed-routes"><![CDATA[distributed routes]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="memcache"><![CDATA[memcache]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rubyforge"><![CDATA[rubyforge]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&#039;Helpers&#039; in Mack</title>
		<link>http://www.metabates.com/2008/03/18/helpers-in-mack/</link>
		<pubDate>Tue, 18 Mar 2008 15:36:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/18/helpers-in-mack/</guid>
		<description></description>
		<content:encoded><![CDATA[Let's talk a bit about 'helpers' in Mack, shall we?
<h2>How does Rails handle helpers?</h2>
Those ofÂ  you familiar with Rails are already familiar with this concepts. In Rails helpers are modules of code that get included into views for certain controllers, or all controllers in the case of ApplicationHelper. These helpers are meant to clean up the views and encapsulate commonly used Ruby code and keep it out of the views. In Rails 2.0 it's easier now to include some of these helper methods into the controller, but by default, they're not readily available.
<h2>How does Mack handle helpers?</h2>
Mack deals with helpers a little differently. Let's start with ApplicationHelper. In Rails, ApplicationHelper gets included into all the views for every controller. This is extremely useful, and from my experience it's the most used helper in Rails. The same is true of Mack. Regardless of which controller/view you're in, ApplicationHelper is there to assist. This brings us to our first difference between Rails and Mack:

<strong>* ApplicationHelper is included into both the views AND the controllers.</strong>

That's right, you no longer have to do special voodoo magic to get the contents of ApplicationHelper included into your controller, it's right there by default, ready to go. Now, I know at this stage you're saying, if ApplicationHelper is included into all controllers, as well as views, then aren't the methods in there publicly accessible as actions? The answer is no. Which brings us to our next point on helpers:

<strong>* All helper public helper methods are converted to protected methods prior to be included into controllers/views.</strong>

By converting all public methods in helpers to protected methods we get around the security concerns regarding the methods becoming publicly available actions in the controllers.

Now, in Rails when you create a controller it creates a new helper module file for that controller. The idea being that you can put helpers into this module that are only available to that controller's views.

<strong>* Mack helpers are NOT controller specific.</strong>

Mack, doesn't do what Rails does in this respect. It's been my personal experience that these files end up empty and just take up space on my disk. So screw em! We don't need em.
<h2>Mack only helper concepts</h2>
Ok, so we've covered the basics of helpers, let's talk about a couple of concepts that are available only in the Mack world.
<h3>Controller Helpers:</h3>
What are controller helpers? In my experience working with Rails I found that I would have 'helper' methods, protected or private of course, in my controllers that were meant to assist the actual actions in that controller. Two things eventually dawned on me. The first was that I'm cluttering up my controllers with all these helper methods. The second was that there should be a way to share these amongst other controllers that could probably use them as well. (Example, methods dealing with authentication)

In the Rails world I wrote a gem, controller_helpers, that helps to facilitate this. Well, being as this is the Mack world, this facility is built right in.

If you go and create a module in the app/helpers folder that's follows the naming convention &lt;controller_name&gt;Helper then it will automatically be included into the appropriate controller. Two things to note here, the security model is still applied, public methods become protected methods. The second is these methods are available in that controller ONLY. They are not available in other controllers or any views within that controller.
<pre>class BlogController &lt; Mack::Controller::Base
  before_filter :authenticate
end</pre>
<pre>module BlogControllerHelper
  def authenticate
    # do work to authenticate user here...
  end
end</pre>
As we see the controller name in the previous example was BlogController and it's helper name was BlogControllerHelper. Now in the example we had an authenticate method in BlogControllerHelper, we realize that we also want to use that in our CommentsController as well. So we can refactor that example to look like this:
<pre>class BlogController &lt; Mack::Controller::Base
  before_filter :authenticate
end

class CommentsController &lt; Mack::Controller::Base
  before_filter :authenticate
end</pre>
<pre>module AuthenticationControllerHelper
  def authenticate
    # do work to authenticate user here...
  end
  include_safely_into(BlogController, CommentsController)
end</pre>
Here you can see in our new AuthenticationControllerHelper module we use the include_safely_into method. This method is documented in the RDoc for Mack, but basically what it does is includes that module into the list of Classes defined, and changes it's public methods to protected.

Now we have included controller helpers into several different controllers. This helps to keep our controllers limited to just actions, and helps us to reuse code in other places. All very good things.
<h3>Refactoring ApplicationHelper</h3>
So, if you're like me, your Rails ApplicationHelper module is absolutely overflowing with all sorts of bits of code. In one project I have it's 682 lines of code! Some code does authentication like stuff, is_logged_in?, is_logged_out?, etc... some does formatting, some does other stuff. It's a big steaming pile of unrelated code.

In Mack you can solve this problem by breaking your code out into Mack::ViewHelpers::&lt;module_name&gt; modules. IfÂ  you do this then that module is automatically included into all views. Modules in the Mack::ViewHelpers namespace do NOT get included into the controllers. If you want to include them into controllers you can use the include_safely_into method to achieve that goal.
<h2>Conclusion</h2>
Well, I hope you enjoyed, and are still awake, this brief overview of the way helpers work in Mack. They are different from Rails. I feel these differences are what make Mack helpers really really useful. Mack helpers do more then Rails, and these features can be not only be really powerful, but can really help to keep your code nice and DRY.

Enjoy.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2008-03-18 10:36:15</wp:post_date>
		<wp:post_date_gmt>2008-03-18 15:36:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>helpers-in-mack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="application-helper"><![CDATA[application helper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="helpers"><![CDATA[helpers]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rdoc"><![CDATA[rdoc]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
	</item>
	<item>
		<title>0.3.0: Adding RSS/xml feeds to our Blog demo</title>
		<link>http://www.metabates.com/2008/03/19/adding-rssxml-feeds-to-our-blog-demo/</link>
		<pubDate>Wed, 19 Mar 2008 20:42:49 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/19/adding-rssxml-feeds-to-our-blog-demo/</guid>
		<description></description>
		<content:encoded><![CDATA[Ok, as you remember a while back we created a simple blog using mack, <a href="http://www.mackframework.com/2008/03/04/the-obligatory-blog-demo/" target="_blank">http://www.mackframework.com/2008/03/04/the-obligatory-blog-demo/</a>. Well now it's time to add the all important RSS/xml feed to it.

Mack 0.3.0 introduces xml rendering support natively, so this shouldn't be so hard. First things first, let's fire up the app, shall we:
<pre>$ rake server</pre>
Now let's head over to http://localhost:3000/posts. We should see our beautiful posts index page. Now let's try to go to http://localhost:3000/posts.xml you should see something that looks like this:

<img src="http://www.mackframework.com/wp-content/uploads/2008/03/xml1.png" alt="XML blog demo 1" width="450" />

Clearly, that's not what we want, is it? I didn't think so. The error is telling us that it's looking for a file called index.xml.erb in the app/views/posts directory of our blog project. Obviously that file doesn't exist.

Let's take a second and talk about <em>why</em> Mack was looking for index.xml.erb. We haven't changed anything in our controller. Our index method still looks something like this:
<pre>def index
  @posts = Post.find(:all)
end</pre>
No where in there does it mention xml. The only place xml is mentioned is on the the url itself, remember? We looked for /posts.xml. By adding .xml you're telling Mack that you want to render, well... xml. So it goes looking for that. That's also new in 0.3.0. The default is html, but if you append a format (.js, .xml, etc...), it will go looking for app/views/&lt;controller_name&gt;/&lt;action_name&gt;.&lt;format&gt;.erb and render it.

Ok, now that we understand why we're looking for an xml file, let's fire up our trusty text editor and create a new file called: app/views/posts/index.xml.erb. Let's edit the file to look like this:
<pre>xml.instruct! :xml, :version=&gt;"1.0"
xml.rss(:version =&gt; "2.0") do
  xml.channel do
    xml.title("My Mack Blog")
    xml.link(posts_index_full_url)
    xml.description("Find out about all the cool stuff happening on my blog!")
    xml.language("en-us")
    xml.copyright("Copyright Me")
    xml.pubDate(CGI.rfc1123_date(Time.now))
    xml.lastBuildDate(CGI.rfc1123_date(Time.now))
    @posts.each do |post|
      xml.entry do
        xml.title(post.title)
        xml.link(posts_show_full_url(:id =&gt; post.id))
        xml.description(post.body)
        xml.pubDate(post.created_at.strftime("%a, %d %b %Y %H:%M:%S"))
      end
    end
  end
end</pre>
Mack uses the standard builder gem library. I'm not going to go into explaining how that works, there are plenty of other tutorials and documentation that will show you that. I'm also not going to explain all the necessary pieces of an RSS feed. Instead I'll point out in that code you'll see we're using the @posts instance variable that we set in the index action of our PostsController. Just like regular *.html.erb files we have access to all the instance variables from the controller, as well, helpers, etc...

So now if we go to http://localhost:3000/posts.xml we should see our RSS feed. If we did a view source we should see something that looks like this:
<pre id="line1"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
&lt;<span class="start-tag">rss</span><span class="attribute-name"> version</span>=<span class="attribute-value">"2.0"</span>&gt;
 &lt;<span class="start-tag">channel</span>&gt;
  &lt;<span class="start-tag">title</span>&gt;My Mack Blog&lt;/<span class="end-tag">title</span>&gt;
  &lt;<span class="start-tag">link</span>&gt;http://localhost:3000/posts&lt;/<span class="end-tag">link</span>&gt;
  &lt;<span class="start-tag">description</span>&gt;Find out about all the cool stuff happening on my blog!&lt;/<span class="end-tag">description</span>&gt;
  &lt;<span class="start-tag">language</span>&gt;en-us&lt;/<span class="end-tag">language</span>&gt;
  &lt;<span class="start-tag">copyright</span>&gt;Copyright Me&lt;/<span class="end-tag">copyright</span>&gt;</pre>
<pre id="line9">  &lt;<span class="start-tag">pubDate</span>&gt;Tue, 18 Mar 2008 17:18:05 GMT&lt;/<span class="end-tag">pubDate</span>&gt;
  &lt;<span class="start-tag">lastBuildDate</span>&gt;Tue, 18 Mar 2008 17:18:05 GMT&lt;/<span class="end-tag">lastBuildDate</span>&gt;
  &lt;<span class="start-tag">entry</span>&gt;
   &lt;<span class="start-tag">title</span>&gt;My New Post&lt;/<span class="end-tag">title</span>&gt;
   &lt;<span class="start-tag">link</span>&gt;http://localhost:3000/posts/1&lt;/<span class="end-tag">link</span>&gt;
   &lt;<span class="start-tag">description</span>&gt;This is my first post in my cool Mack blog!&lt;/<span class="end-tag">description</span>&gt;</pre>
<pre id="line15">   &lt;<span class="start-tag">pubDate</span>&gt;Tue, 18 Mar 2008 11:58:30&lt;/<span class="end-tag">pubDate</span>&gt;
  &lt;/<span class="end-tag">entry</span>&gt;
 &lt;/<span class="end-tag">channel</span>&gt;
&lt;/<span class="end-tag">rss</span>&gt;</pre>
Awesome! All that's really left is create one of those fancy RSS tags in the location field of our browsers that people can click and go straight to the RSS feed. Let's do that now.

At the top of your app/views/posts/index.html.erb file add the following:
<pre>&lt;%= rss_tag(posts_index_url(:format =&gt; :xml)) %&gt;</pre>
Now, refresh the page in your browser, and there you go, you should now see the little RSS button in the location bar of your browser. If you click that you should be taken to your feed.

That's all there is to adding not only xml, but an RSS feed to your new blog.

The code for this demo can be found <a href="http://www.mackframework.com/wp-content/uploads/2008/03/mack_blog_demo.zip" title="Blog Demo w/ XML">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2008-03-19 15:42:49</wp:post_date>
		<wp:post_date_gmt>2008-03-19 20:42:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adding-rssxml-feeds-to-our-blog-demo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blog"><![CDATA[blog]]></category>
		<category domain="post_tag" nicename="builder"><![CDATA[builder]]></category>
		<category domain="post_tag" nicename="demo"><![CDATA[demo]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="rss"><![CDATA[rss]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[xml]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[Release 0.3.0 &#8212; Mack Framework]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mackframework.com/2008/03/19/release-030/</wp:comment_author_url>
			<wp:comment_author_IP>208.113.181.17</wp:comment_author_IP>
			<wp:comment_date>2008-03-19 15:45:47</wp:comment_date>
			<wp:comment_date_gmt>2008-03-19 20:45:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; 0.3.0: Adding RSS/xml feeds to our Blog demo [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Release 0.3.0</title>
		<link>http://www.metabates.com/2008/03/19/release-030/</link>
		<pubDate>Wed, 19 Mar 2008 20:43:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/19/release-030/</guid>
		<description></description>
		<content:encoded><![CDATA[I've been holding back this release so I could get distributed routing into it, but it appears that there's still a little more work that needs to be done before it's ready to go. I'm hoping to get it out by the beginning of next week, but don't quote me on that.

Instead of focusing on what didn't make it in, let's talk about what did make it in! There's some cool stuff in this release.
<h3>Format Driven Content</h3>
Mack now allows you to drive different content based on the format requested. For example:

/posts - will render app/views/posts/index.html.erb
/posts.html  - will also render app/views/posts/index.html.erb
/posts.xml  - will render app/views/posts/index.xml.erb - A special note *.xml.erb files, despite their name, do NOT get run through ERB, instead they use the XML Builder library
/posts.js  - will render app/views/posts/index.js.erb
etc...

Alternatively, in your action you can now define 'want' blocks, to run specific code based on the format. Example:
<pre>class PostsController
  def index
    # find all the posts in the system
     @posts = Post.find(:all)
    wants(:html) do
      # this will only be run if html is requested.
      # we need a username for a 'welcome message in the view'
      @username = @user.username
    end
    wants(:xml) do
      # this will only be run if html is requested.
      # find the last published date
      @last_pub_date = Rss.find_last_by_date_by_object(:posts)
    end
  end
end</pre>
<h3>XML Builder Support</h3>
I'm not going to go into this, there is another nice post coming shortly that will explain how to use this library to add RSS to our blog demo. Here's the <a href="http://www.mackframework.com/2008/03/19/adding-rssxml-feeds-to-our-blog-demo/">post</a>.
<h3>Built-in Encryption</h3>
In every app I've ever built I found the need to use encryption. Whether it's for encrypting something into a cookie, a password in the database, or a file on disk, we all need encryption, so I've baked the crypt gem into Mack.

At the very simple level you can easily do this in your code:
<pre>@my_encrypted_value = _encrypt("hello world")</pre>
and you'll be returned a nice pieced of garbled data using the Crypt/Rijndael library. Decrypting is just as easy:
<pre>_decrypt(@my_encrypted_value) # =&gt; "hello world"</pre>
See, I told you it couldn't be easier. It gets even better you can even define your own 'worker' to implement other encryption schemes. It's as simple as this:
<pre>class Mack::Utils::Crypt::HorribleWorker
  def encrypt(value)
    value.reverse
  end
  def decrypt(value)
    value.reverse
  end
end

_encrypt("hello", :horrible) # =&gt; "olleh"
_decrypt("decrypt", :horrible) # =&gt; "hello"</pre>
See how easy that was? You can also do:
<pre>@my_encrypted_value = "Hello".encrypt
@my_encrypted_value.decrypt #=&gt; "Hello"</pre>
Either way it's now easy to handle encryption in your funky cool Mack app.

Changelog:
<ul>
	<li>Ticket: #8 Xml Builder Support</li>
	<li>Ticket: #7 Ability to drive certain content based on 'format'</li>
	<li>Ticket: #9 Added a global encryption system to make encrypting/decrypting of strings easy to use</li>
	<li>gem: builder 2.1.2</li>
	<li>gem: crypt 1.1.4</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2008-03-19 15:43:51</wp:post_date>
		<wp:post_date_gmt>2008-03-19 20:43:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-030</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="builder"><![CDATA[builder]]></category>
		<category domain="post_tag" nicename="crypt"><![CDATA[crypt]]></category>
		<category domain="post_tag" nicename="encryption"><![CDATA[encryption]]></category>
		<category domain="post_tag" nicename="erb"><![CDATA[erb]]></category>
		<category domain="post_tag" nicename="format"><![CDATA[format]]></category>
		<category domain="post_tag" nicename="html"><![CDATA[html]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rijndael"><![CDATA[rijndael]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[xml]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mack on GitHub.com</title>
		<link>http://www.metabates.com/2008/03/21/mack-on-githubcom/</link>
		<pubDate>Fri, 21 Mar 2008 18:15:09 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/21/mack-on-githubcom/</guid>
		<description></description>
		<content:encoded><![CDATA[The Mack source tree is now hosted on GitHub.com

<a href="http://github.com/markbates/mack" target="_blank">http://github.com/markbates/mack </a>

If you would like to pull it down  you can clone it with:

<a href="git://github.com/markbates/mack.git" target="_blank">git://github.com/markbates/mack.git</a>

For  those of you interested in contributing you can create an account with GitHub, fork the Mack project, go nuts with your changes, and then send me a pull request. It's all very well explained on the GitHub site.

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2008-03-21 13:15:09</wp:post_date>
		<wp:post_date_gmt>2008-03-21 18:15:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-on-githubcom</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="githubcom"><![CDATA[github.com]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[Arun Agrawal]]></wp:comment_author>
			<wp:comment_author_email>arun@fromjaipur.com</wp:comment_author_email>
			<wp:comment_author_url>http://fromjaipur.com</wp:comment_author_url>
			<wp:comment_author_IP>59.95.168.189</wp:comment_author_IP>
			<wp:comment_date>2008-03-21 14:21:09</wp:comment_date>
			<wp:comment_date_gmt>2008-03-21 19:21:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Mark.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Announcing Mack Ruby Core Extensions</title>
		<link>http://www.metabates.com/2008/03/26/announcing-mack-ruby-core-extensions/</link>
		<pubDate>Wed, 26 Mar 2008 19:57:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/26/announcing-mack-ruby-core-extensions/</guid>
		<description></description>
		<content:encoded><![CDATA[Mack has been using a combination of the ruby_extensions gem as well some local extensions to the Ruby core in order to make Mack as wonderful as it is. In an effort to make life a little simpler, as well as to help share the wealth, the ruby_extensions gem and the Mack extensions have been combined into a single new gem called mack_ruby_core_extensions.

One of the main Mack pieces that has been broken out into this new gem is the inflection system. Now you can have inflections as part of any Ruby application just by requiring the gem. As far as I can tell this is the first stand alone inflection system for Ruby. I know because I couldn't find one for Mack, that's why I had to write one.

This gem will continually be updated, outside of the core Mack code. The forthcoming release of Mack, 0.4.0, will be converted to use the new gem.

Those who wish to contribute to the gem can find it on GitHub at: <a href="http://github.com/markbates/mack_ruby_core_extensions" target="_blank">http://github.com/markbates/mack_ruby_core_extensions</a>

The API for mack_ruby_core_extensions can be found at:
<a href="http://mrce-api.mackframework.com/" target="_blank">http://mrce-api.mackframework.com/</a>
<pre>Â $ sudo gem install mack_ruby_core_extensions</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2008-03-26 14:57:00</wp:post_date>
		<wp:post_date_gmt>2008-03-26 19:57:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>announcing-mack-ruby-core-extensions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="extensions"><![CDATA[extensions]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="inflection"><![CDATA[inflection]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
	</item>
	<item>
		<title>Trac</title>
		<link>http://www.metabates.com/2008/03/26/trac/</link>
		<pubDate>Thu, 27 Mar 2008 01:23:40 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/26/trac/</guid>
		<description></description>
		<content:encoded><![CDATA[So after trying to use Trac for a few weeks now, I've decided that right now it's just slowing me down. Particularly when dealing with roadmaps, etc... So for now, if you find bugs, want to contribute, or you just have questions, simply visit the contribute page on this site and send me an email.

As things progress and there are more contributors, and more people using Mack, this may all change. Until then...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2008-03-26 20:23:40</wp:post_date>
		<wp:post_date_gmt>2008-03-27 01:23:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="trac"><![CDATA[trac]]></category>
	</item>
	<item>
		<title>Release 0.4.0</title>
		<link>http://www.metabates.com/2008/03/26/release-040/</link>
		<pubDate>Thu, 27 Mar 2008 01:32:58 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/26/release-040/</guid>
		<description></description>
		<content:encoded><![CDATA[It's finally here! The release you've all been waiting for, 0.4.0!! What's new in this one? Well, the big one, <strong>DISTRIBUTED ROUTING</strong>!!! Now you can share your routes between all of your Mack applications.

I'm very excited about this release. This is one of the first features that starts to set Mack apart from other Ruby frameworks such as Rails and Merb.Â  Mack is trying to set itself as the framework for doing multiple, distributed, portal applications. This release gets us headed in that direction.

There will be a tutorial post and app in the next few days. In the meantime I highly encourage you to download this release and check it out.

Changelog:
<ul>
	<li>Added Distributed Routes!</li>
</ul>
<ul>
	<li>gem: mack_ruby_core_extensions 0.1.3</li>
</ul>
<ul>
	<li>removed gem: ruby_extensions</li>
</ul>
<pre>$ sudo gem install mack</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2008-03-26 20:32:58</wp:post_date>
		<wp:post_date_gmt>2008-03-27 01:32:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-040</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="add-new-tag"><![CDATA[Add new tag]]></category>
		<category domain="post_tag" nicename="distributed-routes"><![CDATA[distributed routes]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="merb"><![CDATA[merb]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="routes"><![CDATA[routes]]></category>
		<category domain="post_tag" nicename="routing"><![CDATA[routing]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.4.1</title>
		<link>http://www.metabates.com/2008/03/27/release-041/</link>
		<pubDate>Thu, 27 Mar 2008 21:42:40 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/27/release-041/</guid>
		<description></description>
		<content:encoded><![CDATA[On the heels of yesterdays release of 0.4.0, there is a new release today, 0.4.1. Although this is not a <em>sexy</em> release, as 0.4.0 was, this is an important release.

What makes this release so important is that it fixes, adds, or improves testing support for Mack applications.

The implementation of some of the testing stuff has changed under the covers, but it's the new stuff that is really important. let's take a look at some of the stuff:
<ul>
	<li><strong>assigns(key)</strong> - This one should be familiar to all you Rails folks out there. This allows you to get an instance variable that was set in a controller, and access it in your test.
<pre>def test_something
  get foo_index_url
  assert_not_nil assigns(:foo_list)
end</pre>
</li>
	<li><strong>in_session</strong> - This methods allows you to wrap a block in the context of a session. This is great if you're trying to do integration testing.</li>
	<li><strong>set_cookie, remove_cookie</strong> - These methods allow you to either set or a remove a cookie in your tests. Great if you want to test an action that reads a cookie, or test to see what happens if you set a cookie, then remove the cookie and call something else. Also great to use with the in_session method.</li>
</ul>
There are a few other hidden treats in there, but those are some of the highlights. These things help bring Mack testing to a usable level.

The Mack Demo Blog application has been updated to demonstrate some these things. You can pull the demo using Git here: <a href="git://github.com/markbates/mack_blog_demo.git" target="_blank">git://github.com/markbates/mack_blog_demo.git</a>

Changelog:
<ul>
	<li>Improved testing support.</li>
</ul>
<ul>
	<li>Added assigns support to testing. This is allows for pulling instance variables that were set in a controller to tests.</li>
</ul>
<ul>
	<li>Added ability to do 'session' based tests.</li>
</ul>
<ul>
	<li>Added assert_difference method.</li>
</ul>
<ul>
	<li>Added ability to set/remove cookies before requests are made.</li>
</ul>
<ul>
	<li>gem: mack_ruby_core_extensions 0.1.4</li>
</ul>
<pre>$ sudo gem install mack</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date>2008-03-27 16:42:40</wp:post_date>
		<wp:post_date_gmt>2008-03-27 21:42:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-041</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="assigns"><![CDATA[assigns]]></category>
		<category domain="post_tag" nicename="cookie"><![CDATA[cookie]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="session"><![CDATA[session]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The First Month</title>
		<link>http://www.metabates.com/2008/03/27/the-first-month/</link>
		<pubDate>Fri, 28 Mar 2008 02:32:31 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/2008/03/27/the-first-month/</guid>
		<description></description>
		<content:encoded><![CDATA[It dawned on me today as I released 0.4.1 that's it has been one month since the first release, 0.0.4. What a month it's been! When 0.0.4 got released I hadn't been working on Mack for more than a few weeks. So really, Mack has been going for about six weeks now. It's funny to think how far the code has progressed, how many features have been developed, and most importantly, how much attention it's received.

Firsts:
<ul>
	<li>First Bug: Matt Todd found the first bug with a Mack. It was a simple bug with convert_security_of_methods the second parameter wasn't being used. Matt has since become a good friend of Mack, and has a couple of other firsts on this list.</li>
	<li>First Blog Comment: Mr. Eel questioning the validatey of some rough DataMapper vs. ActiveRecord numbers I posted.</li>
	<li>First Link to Mack: Matt Todd gets his second 'first' of this list.</li>
	<li>First 'Demo' Request: Gregg Pollack from <a href="http://www.railsenvy.com" target="_blank">RailsEnvy.com</a> requested a demo app so he could feature Mack on the RailsEnvy.com podcast.</li>
	<li>First Podcast: I think this one is fairly obvious, but it goes to the <a href="http://www.railsenvy.com" target="_blank">RailsEnvy.com </a>guys. Thanks for the press!</li>
	<li>First Speaking Request: Tom Dyer/Boston Ruby Users Group. I'll be speaking May 13th on the joys of Mack.</li>
	<li>First Request to Contribute: Arun Agrawal.</li>
	<li>First Tech Support Request: Brian Dunbar. He had some trouble running the demo app. Turns out it was a bad require in the cachetastic gem, that I subsequently fixed.</li>
	<li>First 'Watcher' on GitHub.com: Once again, Mr. Matt Todd! Gotta love the Matt.</li>
	<li>First Fork on GitHub.com:          <span id="profile_name" rel="/users/kabari">Kabari Hendrick. Based out of Chicago, <a href="http://www.threedozen.com/" target="_blank">http://www.threedozen.com/</a>, I'm excited to see what he does with his fork.</span></li>
</ul>
Wow! That's a lot of firsts for a first month. Here's a list of some of the features that have been released in that time:
<ul>
	<li>Distributed Routes!</li>
	<li>Better testing support</li>
	<li>Built-in encryption/decryption</li>
	<li>XML support</li>
	<li>A Generator framework</li>
	<li>'Scaffold' generator</li>
	<li>Plugin support</li>
	<li>Server-side redirects</li>
	<li>Inflection</li>
	<li>Render url</li>
	<li>Extensible rendering system</li>
	<li>'Format' driven content</li>
</ul>
That's just a few things that have gone in there. That's not to mention refactoring, documentation, demo apps, etc...

I'd like to this time to say thank you to everyone on the 'firsts' lists. I would like to thank everyone else who's shown interest, commented, wrote about, or even just thought of Mack. Every comment on the site, every email I get, every blog link I see fills me with great happiness and makes me think that I'm on to something here.

I truly feel that there is a void for a Ruby web framework that deals with distributed, portal-like applications, and that's where Mack is headed. That's what makes Mack different from Rails or Merb or Ramaze or Sinatra or any other framework out there.

What's on the horizon for Mack? A lot. I'm going to be speaking at the Boston Ruby Users Group on May 13th. Of course, I'll be showing off Mack, so if you're in town, I would recommend coming on down. Details on that as we get closer to the event. You can expect more app to app communication, more generators, more ORM support, more testing support, page caching, 'portlets', and much much more!

Once again, thanks to everyone for their support. I'm looking forward to see what the future holds.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2008-03-27 21:32:31</wp:post_date>
		<wp:post_date_gmt>2008-03-28 02:32:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-first-month</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="distributed-routes"><![CDATA[distributed routes]]></category>
		<category domain="post_tag" nicename="features"><![CDATA[features]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="inflection"><![CDATA[inflection]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="merb"><![CDATA[merb]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rails-envy"><![CDATA[rails envy]]></category>
		<category domain="post_tag" nicename="ramaze"><![CDATA[ramaze]]></category>
		<category domain="post_tag" nicename="scaffold"><![CDATA[scaffold]]></category>
		<category domain="post_tag" nicename="sinatra"><![CDATA[sinatra]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[xml]]></category>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[Kabari]]></wp:comment_author>
			<wp:comment_author_email>threedozen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.threedozen.com</wp:comment_author_url>
			<wp:comment_author_IP>71.201.19.200</wp:comment_author_IP>
			<wp:comment_date>2008-03-28 19:38:24</wp:comment_date>
			<wp:comment_date_gmt>2008-03-29 00:38:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Geez, I didn't realize the project was that young! Great work so far, and hopefully I can make some positive contributions as well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>75.69.108.15</wp:comment_author_IP>
			<wp:comment_date>2008-03-28 21:00:35</wp:comment_date>
			<wp:comment_date_gmt>2008-03-29 02:00:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm glad you like it Kabari. I'm pretty excited about, obviously. It's fairly young, yes, but when you know what you want, and you can cherry pick the best ideas from what others have, things can come together quick.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>187</wp:comment_id>
			<wp:comment_author><![CDATA[Recent Faves Tagged With "ramaze" : MyNetFaves]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mynetfaves.com/tags/ramaze</wp:comment_author_url>
			<wp:comment_author_IP>67.228.47.154</wp:comment_author_IP>
			<wp:comment_date>2009-04-26 01:50:54</wp:comment_date>
			<wp:comment_date_gmt>2009-04-26 06:50:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] public links &gt;&gt; ramaze    Ruby Fools conference First saved by Inori67 | 4 days ago      The First Month First saved by SaikoAno | 8 days ago      The Flexible Thin Anorexic Gymnast that Democratized [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Release 0.4.2</title>
		<link>http://www.metabates.com/2008/04/02/release-042/</link>
		<pubDate>Wed, 02 Apr 2008 19:03:29 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[Another week, another release, eh? That seems to be the M.O. and today doesn't seem to be any difference. This week's release has a few new cool things in it, but overall isn't the sexiest of releases, but definitely one I would highly recommend downloading.
<h3>Initializers</h3>
First up, the config/initializers directory. Any .rb files you put in this directory will be loaded up as part of the initialization process

Current Mack initialization load order:
<ol>
	<li>Configuration files.</li>
	<li>Logging.</li>
	<li>Orm Support, if any.</li>
	<li>Mack libraries.</li>
	<li>Routes.</li>
	<li>Initializers.</li>
	<li>Gems.</li>
	<li>Plugins.</li>
	<li>'app' files.</li>
	<li>'lib' files.</li>
	<li>Helpers.</li>
</ol>
In a future release you'll be able to re-order this list as part of step #1, but that's a bit of a ways off for right now. Let's focus on what you can do right now.
<h3>Gems</h3>
When you create a new Mack app you will find a file called gems.rb in config/initializers. There you can 'require' gems into your application.

Example:
<pre>require_gems do |gem|
  gem.add :redgreen, :version =&gt; "1.2.2", :libs =&gt; :redgreen
  gem.add :termios
  gem.add :rubyzip, :source =&gt; "http://gems.rubyforge.org"
end</pre>
When the application gets loaded up it will call the 'gem' method for each of the gems defined, and with specific versions, if defined. If the optional arrary 'libs' is present it will 'require' each of those files after the 'gem' method has been called.

There are also two rake tasks that help with gems:
<ul>
	<li>gems:list - This lists all the gems required by the app.</li>
	<li>gems:install - This will install all the gems required by the app. If a version is specified the task will attempt to install that specific version. If a source is specified then the source will be used to install the gem.</li>
</ul>
<h3>Filters</h3>
In previous versions of Mack if you had a controller inherit from another controller and you had filters defined in the parent's controller they would not get run on the child controller. This has now been fixed.

Example:
<pre>class TopController &lt; Mack::Controller::Base
  before_filter :log
  protected
  def log
    # do some logging here...
  end
end
class BottomController &lt; TopController
end</pre>
The 'log' filter method will now be called on actions in the BottomController class.

Changelog:
<ul>
	<li>Added config/initializers directory. All files in this directory will be required at start up time.</li>
</ul>
<ul>
	<li>Gems can now be required simply using the initializers/gems.rb file and the require_gems method.</li>
</ul>
<ul>
	<li>Added gems:list and gems:install rake tasks. The gems:list task will list any gems being required for the application. The gems:install task will install all the gems being required for the application.</li>
</ul>
<ul>
	<li>Filters in controllers can now be inherited from parent controller classes.</li>
</ul>
<ul>
	<li>gem: mack_ruby_core_extensions 0.1.5</li>
</ul>
<ul>
	<li>gem: thing 0.7.1</li>
</ul>
<pre>$ sudo gem install mack</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2008-04-02 14:03:29</wp:post_date>
		<wp:post_date_gmt>2008-04-02 19:03:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-042</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="filters"><![CDATA[filters]]></category>
		<category domain="post_tag" nicename="gems"><![CDATA[gems]]></category>
		<category domain="post_tag" nicename="initializer"><![CDATA[initializer]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Let&#039;s talk DataMapper</title>
		<link>http://www.metabates.com/2008/04/07/lets-talk-data-mapper/</link>
		<pubDate>Mon, 07 Apr 2008 19:19:08 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=50</guid>
		<description></description>
		<content:encoded><![CDATA[As you may, or may not know, DataMapper is the new ORM framework on the scene these days in the Ruby world. It's getting a lot of hype for being clean, fast, simple, and feature rich. Oh, and it's not ActiveRecord. I think that seems to be the real thing that is driving people to DataMapper, the fact that it's not ActiveRecord.

I will say DataMapper is clean, simple, and feature rich. In 0.3.0 they've added migrations, which is great. Btw, a little off topic, but I'm working on migration support for both ActiveRecord and DataMapper in Mack as we speak. It should, hopefully, be out sometime this week. What I won't give DataMapper is that it's fast. In my tests, and I'll provide some number below, DataMapper only seems to win on inserts, after that ActiveRecord beats it hands down. In all fairness to DataMapper I'm starting to think that the problems are not at the DataMapper layer, but at the underlying Data Objects layer that DataMapper uses. As you'll see from my tests DataMapper seems very heavilyÂ optimizedÂ towards MySQL over PostgreSQL. This, to me, leans towards a difference in the underlying adapters.

Another problem I have with DataMapper is that I have to set the 'properties' of the model inside the model itself. It's an old school approach, and it does have the benefit of being self documenting, but it also has the drawbacks of constantÂ maintenanceÂ and clutter at the top of your model. Not to mention potential conflicts when running through migrations, etc...

I'm also having one other little problem these days. This has only been a problem since I've gone DataMapper 0.3.0. At the end of some of rake tasks, if I have DataMapper required, I get this:

Â 
<pre>/usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:25:in `collect': undefined method `suite' for Gem::VerificationError:Class (NoMethodError)
from /usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:23:in `each_object'
from /usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:23:in `collect'
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:58
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:213:in `[]'
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:213:in `run'
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:12:in `run'
from /usr/local/lib/ruby/1.8/test/unit.rb:278</pre>
The rake task completed successfully, but I get this fairly random error message. If anyone out there is also getting this message, please let me know what it is. I'm open for ideas on this one.

Despite these issues I have with DataMapper, I'm going to keep striving to provide support for both it and ActiveRecord in Mack. I think it's important to give people a choice and not force them to use the one I think is either easier to code for, or better. Both of which I'm not saying about ActiveRecord, but in technologies in general.

Anyway, enough of my blather, here are the test results I was speaking about:

Â 

<span style="color: #800000;">Running time 1.693881 seconds. [MESSAGE]: DM: postgresql: Inserts</span>
Running time 2.799189 seconds. [MESSAGE]: AR: postgresql: Inserts

Running time 1.368185 seconds. [MESSAGE]: DM: postgresql: Individual Reads
<span style="color: #800000;">Running time 0.734143 seconds. [MESSAGE]: AR: postgresql: Individual Reads</span>

Running time 0.917551 seconds. [MESSAGE]: DM: postgresql: Bulk Reads
<span style="color: #800000;">Running time 0.121198 seconds. [MESSAGE]: AR: postgresql: Bulk Reads</span>

Running time 2.309244 seconds. [MESSAGE]: DM: postgresql: Updates
<span style="color: #800000;">Running time 2.079578 seconds. [MESSAGE]: AR: postgresql: Updates</span>

Running time 1.802914 seconds. [MESSAGE]: DM: postgresql: Deletes
<span style="color: #800000;">Running time 1.708714 seconds. [MESSAGE]: AR: postgresql: Deletes</span>

<span style="color: #800000;">Running time 0.433761 seconds. [MESSAGE]: DM: mysql: Inserts</span>
Running time 2.621093 seconds. [MESSAGE]: AR: mysql: Inserts

Running time 1.073741 seconds. [MESSAGE]: DM: mysql: Individual Reads
<span style="color: #800000;">Running time 0.207305 seconds. [MESSAGE]: AR: mysql: Individual Reads</span>

Running time 0.827842 seconds. [MESSAGE]: DM: mysql: Bulk Reads
<span style="color: #800000;">Running time 0.073593 seconds. [MESSAGE]: AR: mysql: Bulk Reads</span>

<span style="color: #800000;">Running time 1.204845 seconds. [MESSAGE]: DM: mysql: Updates</span>
Running time 1.738602 seconds. [MESSAGE]: AR: mysql: Updates

<span style="color: #800000;">Running time 1.010774 seconds. [MESSAGE]: DM: mysql: Deletes</span>
Running time 1.251691 seconds. [MESSAGE]: AR: mysql: Deletes

Â 

Â ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2008-04-07 14:19:08</wp:post_date>
		<wp:post_date_gmt>2008-04-07 19:19:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lets-talk-data-mapper</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="benchmark"><![CDATA[benchmark]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[orm]]></category>
		<category domain="post_tag" nicename="tests"><![CDATA[tests]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>87</wp:comment_id>
			<wp:comment_author><![CDATA[Pratik]]></wp:comment_author>
			<wp:comment_author_email>pratiknaik@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://m.onkey.org</wp:comment_author_url>
			<wp:comment_author_IP>90.193.90.173</wp:comment_author_IP>
			<wp:comment_date>2008-04-08 10:23:08</wp:comment_date>
			<wp:comment_date_gmt>2008-04-08 15:23:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ActiveRecord in trunk has a lot of performance improvements. It'd be great if you can repeat your experiment with Edge version of AR :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Rethinking DataMapper</title>
		<link>http://www.metabates.com/2008/04/07/rethinking-datamapper/</link>
		<pubDate>Tue, 08 Apr 2008 02:28:58 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[So about 2 minutes after my post earlier about DataMapper a video was posted by one of the developers:
<div>

<a href="http://mtnwestrubyconf2008.confreaks.com/04katz.html" target="_blank">http://mtnwestrubyconf2008.confreaks.com/04katz.html</a>

I watched the video, start to finish, and I do believe I'm starting to come around to the idea of DataMapper. I even understand why they do the 'properties' in the model. Once you understand that DataMapper is meant to be used with an persistent back end, not just a database, that starts to make more sense.

The concepts, and the ideas, behind what they're trying to do is really good, and I love some of the features that are hidden behind an almost ActiveRecord like syntax.

With that said, I still don't understand why I'm getting the performance numbers that I'm getting. It just doesn't seem to right to me. I feel as though I'm missing some fundamental.

So, again, I throw the challenge out there to people to help me figure out why I'm not seeing great numbers when it comes to DataMapper.

In the meantime, I'm going to start to really get to know it's API, because I think it has a lot of potential.

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2008-04-07 21:28:58</wp:post_date>
		<wp:post_date_gmt>2008-04-08 02:28:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rethinking-datamapper</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[orm]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My thoughts on spec tests</title>
		<link>http://www.metabates.com/2008/04/09/my-thoughts-on-spec-tests/</link>
		<pubDate>Wed, 09 Apr 2008 12:34:54 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[I've been asked by people why I'm not using spec tests to test Mack. I'm currently using just plain old regular unit tests for my tests. It's a good question, but not really a valid one, I think. Should it matter what type of tests I'm using as long as I'm testing? Tests are tests. The framework you use to do your tests is moot as long as the tests you write are good, solid tests.

I jumped on the spec test bandwagon about a year or so ago. I forced my whole team to start writing in nothing but spec tests. The team, is still not impressed. If I were to tell them we weren't using spec tests anymore, they would be EXTREMELY happy with that.Spec tests are certainly prettier than 'regular' tests. I'll give you that. They are more 'human readable'. With that said I find assert_equal to be fairly easy to read.

So why do I use regular tests, and not spec tests? A couple of reasons. First, they're there and built right in to Ruby, ready to go, no new gems or syntax to learn. They're fast. They are faster than spec tests. I see it everyday at work. I can also, and this one is HUGE, run just a single test or a regex'd series of tests. I really love that last bit. I have yet to find a way to do that, easily, with spec tests.

Again, how people write tests doesn't really matter so much to me, it's just that they write them. Testing is too easy in Ruby, there's just no reason for not writing them.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2008-04-09 07:34:54</wp:post_date>
		<wp:post_date_gmt>2008-04-09 12:34:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-thoughts-on-spec-tests</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="spec-test"><![CDATA[spec test]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Horrible bug in DataMapper 0.3.0</title>
		<link>http://www.metabates.com/2008/04/09/horrible-bug-in-datamapper-030/</link>
		<pubDate>Wed, 09 Apr 2008 16:14:19 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://wm.lighthouseapp.com/projects/4819-datamapper/tickets/185-including-comparable-in-class-class-breaks-test-unit-and-probably-more#ticket-185-8" target="_blank">http://wm.lighthouseapp.com/projects/4819-datamapper/tickets/185-including-comparable-in-class-class-breaks-test-unit-and-probably-more#ticket-185-8</a>

In the gem at the bottom of lib/data_mapper/support/typed_set.rb there is the following code:
<pre>class Class
Â Â include Comparable
Â Â def &lt;=&gt;(other)
Â Â  Â name &lt;=&gt; other.name
Â Â end
end</pre>
This causese Test::Runner to through up an error similar to this:
<pre>/usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:25:in `collect': undefined method `suite' for Gem::LoadError:Class (NoMethodError)
from /usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:23:in `each_object'
from /usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:23:in `collect'
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:58
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:213:in `[]'
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:213:in `run'
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:12:in `run'
from /usr/local/lib/ruby/1.8/test/unit.rb:278
from /usr/local/lib/ruby/gems/1.8/gems/rake-0.8.1/lib/rake/rake_test_loader.rb:5
rake aborted!</pre>
It also causes your tests to blow up and not run. Which, if you're trying to do any development causes some real problems! If you comment out 'include Comparable' from Class things seem to work just fine. I say seem, because I haven't done any real extensive testing with this. The other thing you can do is revert to 0.2.5, but that's up to you. Either way, it's not really optimal. Let's hope they fix this soon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2008-04-09 11:14:19</wp:post_date>
		<wp:post_date_gmt>2008-04-09 16:14:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>horrible-bug-in-datamapper-030</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bug"><![CDATA[bug]]></category>
		<category domain="post_tag" nicename="class"><![CDATA[class]]></category>
		<category domain="post_tag" nicename="comparable"><![CDATA[comparable]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="tests"><![CDATA[tests]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The state of migrations and the distributed routes rework</title>
		<link>http://www.metabates.com/2008/04/09/the-state-of-migrations-and-the-distributed-routes-rework/</link>
		<pubDate>Wed, 09 Apr 2008 17:14:14 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[I was really hoping to get the rewrite of distributed routes using Rinda, as well as migration support for both ActiveRecord and DataMapper out either today, or by the end of the week. As it turns out, because of the Class bug in DataMapper 0.3.0 it doesn't look like that's going to happen till early next week. Sorry about that folks. I've lost a lot of time on the DataMapper thing, but I've got a work around, locally anyway, that is allowing me to keep developing. As soon as I get it all done, I'll be very happy to release it all. Stay tuned.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date>2008-04-09 12:14:14</wp:post_date>
		<wp:post_date_gmt>2008-04-09 17:14:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-state-of-migrations-and-the-distributed-routes-rework</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="bug"><![CDATA[bug]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Temporary fix for the DataMapper bug</title>
		<link>http://www.metabates.com/2008/04/09/temporary-fix-for-the-datamapper-bug/</link>
		<pubDate>Thu, 10 Apr 2008 01:36:49 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=56</guid>
		<description></description>
		<content:encoded><![CDATA[If like me you're plagued by this DataMapper bug that kills your test cases. I've packaged up a temporary version of the DataMapper gem that seems to fix the problem.

WARNING: This gem is NOT sanctioned by the DataMapper team. Use at your own risk.

If you use this gem and find any issues, please let me know. Also, if you use this gem and things seem to be working just fine, then please let me know that too. Good luck!

<a href="http://www.mackframework.com/wp-content/uploads/2008/04/datamapper-0301gem.zip">DataMapper-0.3.0.1.gem</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2008-04-09 20:36:49</wp:post_date>
		<wp:post_date_gmt>2008-04-10 01:36:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>temporary-fix-for-the-datamapper-bug</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bug"><![CDATA[bug]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="tests"><![CDATA[tests]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Migration support almost there.</title>
		<link>http://www.metabates.com/2008/04/10/migration-support-almost-there/</link>
		<pubDate>Fri, 11 Apr 2008 02:49:49 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[Now that I'm back on track with DataMapper, I've got migration support for both it and ActiveRecord just about done. In addition to the actual rake task, db:migrate (btw), I had to set up a good way to test rake tasks, something I'll share at a later date, but needless to say it's included with Mack. I also had to deal with the pain in the ass-ness of dealing with two VERY different ORMs, in the same test system! Let me tell you, that sucked!

Good news is that things seem to be working, at least going in the 'up' direction anyway. I still need to write the 'down' direction revert stuff. Hopefully, that shouldn't take too long now that I have a good way of testing the task and the migration stuff.

Unfortunately, I feel as though as soon as I release this stuff, which should be by the end of this weekend, DataMapper 0.9.0 will be out, and I'll have to re-write most of the DataMapper stuff because the API is changing so radically. I guess I'll just have to deal with that when the time comes.

In the meantime I'll let y'all know when migrations are done and out there in the wild.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2008-04-10 21:49:49</wp:post_date>
		<wp:post_date_gmt>2008-04-11 02:49:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>migration-support-almost-there</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[orm]]></category>
		<category domain="post_tag" nicename="rake"><![CDATA[rake]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby Inside review of Mack</title>
		<link>http://www.metabates.com/2008/04/11/ruby-inside-review-of-mack/</link>
		<pubDate>Sat, 12 Apr 2008 01:02:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.rubyinside.com/mack-a-fast-best-of-the-rest-web-app-framework-856.html" target="_blank">http://www.rubyinside.com/mack-a-fast-best-of-the-rest-web-app-framework-856.html</a>

As you may, or may not not, I'm a big fan of Ruby Inside. It's one of my favorite Ruby based blogs on the web. Peter Cooper does a great job with this site, and has recently started the RubyFlow.com website, which is a bit more of a 'firehouse of Ruby' type site.Â 

Anyway, today Peter gave a very favorable review of Mack. I would definitely encourage you to head on over and have a read of it.

Thanks Peter.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2008-04-11 20:02:02</wp:post_date>
		<wp:post_date_gmt>2008-04-12 01:02:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-inside-review-of-mack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="peter-cooper"><![CDATA[peter cooper]]></category>
		<category domain="category" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="review"><![CDATA[review]]></category>
		<category domain="post_tag" nicename="ruby-inside"><![CDATA[ruby inside]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.4.5</title>
		<link>http://www.metabates.com/2008/04/14/release-045/</link>
		<pubDate>Mon, 14 Apr 2008 20:37:32 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=59</guid>
		<description></description>
		<content:encoded><![CDATA[Well, here it is! The release you all were waiting for, the one that finally gives migration support to Mack! That's right, now whether you use ActiveRecord or DataMapper, you can use the familiar rake task 'db:migrate' to run your migrations. Yippie! The scaffold generator will also generate a migration for you, assuming you have ORM support enabled.

There's still some work to go on this, like the ability to pass in command line args to the task to build the full migration for you, but it's a start! It's now pretty easy to get your app going.

Also in this release is a rewrite of the distributed routing functionality. It's now been rewritten to use Rinda. This is going to be the standard for all the distributed functionality that will be coming Mack over the next couple of months. As more functionality lke this is developed, the more it will be wrapped in nice, easy to use APIs.

There's also been some tidying up here in there in the code tree. For example, new applications don't get generated with a boot.rb file. Looking at it, there's really no need for it, since everything is done with Rake tasks.

Overall, I'm very happy with the release, and I feel that this release definitely makes Mack a VERY useable framework because of the migration support. Enjoy!

Changelog:
<ul>
	<li>Removed boot.rb file. It was unnecessary.</li>
	<li>When a new Mack application is generated the Rakefile that gets generated is stamped with the Mack gem version used to create it. This ties the project to that gem. This can, of course, be upgraded as new Mack gems come out, but it's a good way of tying your app to a specific revision of Mack.</li>
	<li>Added support for migrations for both ActiveRecord and DataMapper. DataMapper migration support requires DataMapper 0.3.0 gem. Please keep in mind, though, that DataMapper 0.3.0 has a serious bug in it, which may prevent you from using it. Please see <a href="http://www.mackframework.com/2008/04/09/horrible-bug-in-datamapper-030/">http://www.mackframework.com/2008/04/09/horrible-bug-in-datamapper-030/</a> for more information.</li>
	<li>Rewrote distributed routing support to use Rinda inside of plain old DRb. This makes for an almost zero configuration usage.</li>
	<li>Added: mack_ring_server binary to start a Rinda ring server for use with distributed routing.</li>
	<li>Sqlite3 is now the default database for Mack applications configured with ORM support.</li>
	<li>Added a test helper method, rake_task, to aid in the testing of Rake tasks.</li>
	<li>Added: rake generate:migration name=&lt;migration_name&gt;</li>
	<li>Added: rake db:migrate</li>
	<li>Added: rake db:abort_if_pending_migrations</li>
	<li>Added: rake db:rollback</li>
	<li>Added: rake db:version</li>
	<li>Added: rake mack:ring_server:start</li>
	<li>Added: rake mack:ring_server:stop</li>
	<li>Added: rake mack:ring_server:restart</li>
	<li>Added: rake mack:ring_server:services:list</li>
	<li>gem: application_configuration 1.2.2</li>
	<li>gem: daemons 1.0.10</li>
</ul>
<ol></ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date>2008-04-14 15:37:32</wp:post_date>
		<wp:post_date_gmt>2008-04-14 20:37:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-045</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="drb"><![CDATA[drb]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="migrations"><![CDATA[migrations]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rake"><![CDATA[rake]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<category domain="post_tag" nicename="routes"><![CDATA[routes]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0.4.6: The Obligatory &#039;Blog&#039; Demo - Take 2</title>
		<link>http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2/</link>
		<pubDate>Fri, 18 Apr 2008 22:12:04 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[This post has moved to the wiki @&nbsp;<a href="http://wiki.mackframework.com/index.php/Blog%20Tutorial" target="_blank">http://wiki.mackframework.com/index.php/Blog%20Tutorial</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2008-04-18 17:12:04</wp:post_date>
		<wp:post_date_gmt>2008-04-18 22:12:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>046-the-obligatory-blog-demo-take-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="blog"><![CDATA[blog]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="demo"><![CDATA[demo]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="post"><![CDATA[post]]></category>
		<category domain="post_tag" nicename="scaffold"><![CDATA[scaffold]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.4.6</title>
		<link>http://www.metabates.com/2008/04/18/release-046/</link>
		<pubDate>Fri, 18 Apr 2008 21:55:04 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[This is a pretty cool release. First off Thin has been updated to 0.8.0, a rather nice, stable release. ERB has been replaced with <a href="http://www.kuwata-lab.com/erubis/" target="_blank">Erubis</a>Â to give a significant improvement in speed, which, after all is one of Mack's most important traits.Â 

There's been a general overhaul of the generators included with Mack. Mostly, cleaning them up. With that said things like the scaffold, model, and migration generators have been updated to do what a lot of people have been asking for, that is take a 'cols' parameter and build out the generated code corrrectly. This really makes life, very, very simple.

There will be a re-written 'blog' tutorial coming out soon to make use of this, as well as migration support that's now part of Mack.

Very exciting stuff! Enjoy!

Changelog:
<ul>
	<li>Mack now uses Erubis, http://www.kuwata-lab.com/erubis/, for it's rendering engine instead of ERB. This makes Mack even faster now! Yippie!</li>
	<li>Added rake generate:model name=&lt;model_name&gt; (optional: cols=&lt;col_1&gt;:&lt;col_1_type&gt;,&lt;col_2&gt;:&lt;col_2_type&gt;) This will also create a migration for you.</li>
	<li>Updated rake generate:migration name=&lt;model_name&gt; (optional: cols=&lt;col_1&gt;:&lt;col_1_type&gt;,&lt;col_2&gt;:&lt;col_2_type&gt;) This will create the proper table migration for you.</li>
	<li>Updated rake generate:scaffold to use the ModelGenerator now.</li>
	<li>ScaffoldGenerator now create input fields based on the type of columns, if any, passed in.</li>
	<li>Overall general refactoring of the generator classes.</li>
	<li>Fixed a bug with request logging not, well, logging.</li>
	<li>gem: erubis 2.5.0</li>
	<li>gem: thin 0.8.0</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2008-04-18 16:55:04</wp:post_date>
		<wp:post_date_gmt>2008-04-18 21:55:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-046</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="erb"><![CDATA[erb]]></category>
		<category domain="post_tag" nicename="erubis"><![CDATA[erubis]]></category>
		<category domain="post_tag" nicename="generators"><![CDATA[generators]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="migrations"><![CDATA[migrations]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="scaffold"><![CDATA[scaffold]]></category>
		<category domain="post_tag" nicename="thin"><![CDATA[thin]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Thin Adapter</title>
		<link>http://www.metabates.com/2008/04/23/thin-adapter/</link>
		<pubDate>Wed, 23 Apr 2008 12:29:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[So yesterday I committed a Mack adapter to <a href="http://github.com/macournoyer/thin/commit/ce6d00751644715c82044d1194a34fc61ca0823d" target="_blank">Thin</a>. What does this mean? It means that in the next release of Thin there will native support for Mack. That means We can get rid of those silly config/thin.yml and config/thin.ru files. It also means we can make really easy use of all that the 'thin' command line executable has to offer.

When the next version of Thin comes out, there will be an update to Mack to support these changes.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2008-04-23 07:29:18</wp:post_date>
		<wp:post_date_gmt>2008-04-23 12:29:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thin-adapter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="thin"><![CDATA[thin]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Genosaurus 1.1.1</title>
		<link>http://www.metabates.com/2008/04/23/genosaurus-111/</link>
		<pubDate>Wed, 23 Apr 2008 16:48:48 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[So this week I took a small break away from Mack to build another library, <a href="http://genosaurus-api.mackframework.com/" target="_blank">Genosaurus</a>. I found that in Mack I had basically written a generator system, so I extracted it out into a stand alone library that anybody can use, and I called it Genosaurus.  Genosaurus is, in my opinion, an incredibly easy to use generator framework. Let's be honest, we've all basically built a generator system at one point or another, so I've just wrapped it up nicely. The next release of Mack, due out the end of this week, will have all it's generators converted to use Genosaurus.  Let's take a look at a section of the README for Genosaurus:
<h3>Implied Manifests</h3>
The easiest way to useÂ GenosaurusÂ is to let it do the work for you. Letâ€˜s looked at whatâ€˜s called an â€˜impliedâ€™ manifest:
<pre>  dir:
    simple_generator.rb
    templates:
      hello_world.txt.template</pre>
Thatâ€˜s our folder structure. Now letâ€˜s look at simple_generator.rb:
<pre>  require 'rubygems'
  require 'genosaurus'

  class SimpleGenerator &lt; Genosaurus
  end</pre>
Now if we run that generator:
<pre>  $irb: SimpleGenerator.run</pre>
We should get a file called hello_world.txt generated in the current directory. Yes, it truly is that simple!  With implied manifests our directory structure under â€˜templatesâ€™ tells the whole story, andÂ GenosaurusÂ is smart enough to figure it out. All the file names, and the same goes for folders, need to end in .template, andÂ GenosaurusÂ will do the rest.  All the files will go through ERB before they generated, so you can put all your lovely little dynamic goodies in there. File, and folder, names also get run through ERB so you can even make the file name dynamic too!  Letâ€˜s look at a more complex example:
<pre>  dir:
    complex_generator.rb
    templates:
      app:
        views:
          &lt;%=param(:name).plural%&gt;.template:
            hello_world.html.erb
        models:
          &lt;%=param(:name)%&gt;.rb.template</pre>
Letâ€˜s run our complex_generator.rb file:
<pre>  require 'rubygems'
  require 'genosaurus'

  class ComplexGenerator &lt; Genosaurus
    require_param: name
  end</pre>
Now if we run that generator:
<pre>  $irb: ComplexGenerator.run("name" =&gt; "user")</pre>
Now you should end up with the following:
<pre>  app:
    views:
      users:
        hello_world.html.erb
    models:
      user.rb.template</pre>
In the ComplexGenerator we toldÂ GenosaurusÂ that we are requiring that the parameter, name, be passed into it. We are then using that parameter to generate the names of some files and folders. Pretty cool, eh? See how simple that is.
<h3>Explicit Manifests</h3>
Explicit manifests are used when there is a manifest.yml supplied at the same level as the generator. If there is a manifest.yml file then implied manifests are not used. This means you have to define the entire generation process. This is great if you have a pretty complicated generator, as the manifest.yml is also sent through ERB before being loaded.  Letâ€˜s look at the manifest.yml file for our simple_generator example:
<pre>  template_1:
    type: file
    template_path: &lt;%= File.join(templates_directory_path, "templates", "hello_world.txt.template")
    output_path: hello_world.txt</pre>
Pretty simple. We give the template a name, template_1, it really doesnâ€˜t matter what it is, but Hash objects need keys. The â€˜typeâ€™ parameter is either file or directory. The template_path is the path to the template. Finally, the output_path is the where you want the file to be generated.  Letâ€˜s look at our more complex example. We can change the directory structure a bit, since we really donâ€˜t need ERB in the file names now:
<pre>  dir:
    complex_generator.rb
    templates:
      hello_world.html.erb.template
      model.rb.template</pre>
Our manifest.yml file would look like this:
<pre>  hello_world_template:
    type: file
    template_path: &lt;%= File.join(templates_directory_path, "templates", "hello_world.html.erb")
    output_path: &lt;%= File.join("app", "views", param(:name).plural, "hello_world.html.erb") %&gt;
  model_template:
    type: file
    template_path: &lt;%= File.join(templates_directory_path, "templates", "model.html.erb")
    output_path: &lt;%= File.join("app", "models", "#{param(:name)}.rb") %&gt;</pre>
This will generate the exact same thing as our implied manifest.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2008-04-23 11:48:48</wp:post_date>
		<wp:post_date_gmt>2008-04-23 16:48:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>genosaurus-111</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="generator"><![CDATA[generator]]></category>
		<category domain="post_tag" nicename="genosaurus"><![CDATA[genosaurus]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.4.7</title>
		<link>http://www.metabates.com/2008/04/25/release-047/</link>
		<pubDate>Fri, 25 Apr 2008 18:39:32 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=84</guid>
		<description></description>
		<content:encoded><![CDATA[0.4.7 is a MUST have release. It fixes a few good bugs, like the ability to upload files now works! Plus it introduces a few nice little goodies.

File uploads are now pretty easy to do. There's a new Mack::Request::UploadedFile that helps to wrap the Hash that Rack gives you when you upload a file. Here's a simple example of it being used:
<pre>class UploadsController &lt; Mack::Controller::Base
Â  def create
Â    @my_new_file = request.file(:my_new_file)
Â    @my_new_file.save_to([MACK_PUBLIC, "uploaded_files", @my_new_file.file_name])
Â  end
end</pre>
That's it! That's all you need to upload a file! I'm going to add file uploads to the blog demo over the next few days.

You can now do 'namespaced' routes, such as Admin::UserController. You can very simply map them in your routes.rb as:
<pre>r.resource "admin/users"</pre>
There's now a new rake task, generator:list, that shows all the generators available to your app.

Darsono Sutedja gets the prize for being the first person, other than myself, to contribute to Mack. Thanks a ton Darsono! It's much appreciated.

All of the generators now use the Genosaurus generator system. Not really that exciting, but it makes for a nice, cleaner code base.

There's a few other things in there as well. The changelog below has a few more things. Enjoy!

Changelog:
<ul>
	<li>Added Mack::Request::UploadFile class to make dealing with file uploads easy.</li>
	<li>Fixed bug where if a controller didn't exist it wasn't checking the public directory.</li>
	<li>Generated DataMapper models no longer extend DataMapper::Base, but rather 'include DataMapper::Persistence'. This corresponds to the 0.9.0 upcoming release of DataMapper.</li>
	<li>Fixed a bug in request.params that was making file uploads into strings.</li>
	<li>Namespaced resourced routes, such as Admin::UserController, now work.</li>
	<li>Added rake generator:list task to list all the available generators.</li>
	<li>scaffold generator now creates a stub functional test.</li>
	<li>model generator now creates a stub unit test.</li>
	<li>Rake tasks in plugins now show up in the Rake tasks list.</li>
	<li>All generators, including the 'mack' binary are now using Genosaurus.</li>
	<li>[dsutedja] initializer will load MACK_APP/controllers/default_controller.rb if it exists</li>
	<li>[dsutedja] added link_image_to and image_tag to html helper.</li>
	<li>gem: thin 0.8.1</li>
	<li>gem: genosaurus 1.1.1</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2008-04-25 13:39:32</wp:post_date>
		<wp:post_date_gmt>2008-04-25 18:39:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-047</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="darsono-sutedja"><![CDATA[darsono sutedja]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="file-uploads"><![CDATA[file uploads]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="genosaurus"><![CDATA[genosaurus]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="thin"><![CDATA[thin]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New group/mailing list</title>
		<link>http://www.metabates.com/2008/04/26/new-groupmailing-list/</link>
		<pubDate>Sat, 26 Apr 2008 13:49:30 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[At several people's request I've created a Google group for Mack. You can find it here:Â <a href="http://groups.google.com/group/mack-framework" target="_blank">http://groups.google.com/group/mack-framework</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date>2008-04-26 08:49:30</wp:post_date>
		<wp:post_date_gmt>2008-04-26 13:49:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-groupmailing-list</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="google-group"><![CDATA[google group]]></category>
		<category domain="post_tag" nicename="mailing-list"><![CDATA[mailing list]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Speaking @ The Boston Ruby Users Group</title>
		<link>http://www.metabates.com/2008/05/01/speaking-the-boston-ruby-users-group/</link>
		<pubDate>Thu, 01 May 2008 12:19:49 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[I've mentioned this before, but now the details are finally in. I'll be speaking at the Boston Ruby Users Group on May 13th.

Here are the details:
Sermo
215 First Ave.
Cambridge, MA

The show starts at 7pm.

Also speaking that night are:

* Daniel Higginbotham will be presenting a tool he developed,Â Palmist, that is used to optimize MySQL databases on Rails sites.Â 

* Jonathan Barket will be presenting restful-authorization, anÂ authorization and workflow mechanism built on top ofÂ restful_authenticationÂ 

If you're in the neighborhood, and enjoy being a bit of a nerd, come on down.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2008-05-01 07:19:49</wp:post_date>
		<wp:post_date_gmt>2008-05-01 12:19:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>speaking-the-boston-ruby-users-group</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="boston-ruby-users-group"><![CDATA[boston ruby users group]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Saying Goodbye to ActiveRecord</title>
		<link>http://www.metabates.com/2008/05/01/saying-goodbye-to-activerecord/</link>
		<pubDate>Thu, 01 May 2008 21:07:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=87</guid>
		<description></description>
		<content:encoded><![CDATA[I've been wrestling with this for a while now, and I've finally made my peace with it. I've decided to remove native support for ActiveRecord from Mack. From now on it'll be DataMapper by default, out of the box. This was not an easy decision to make. Essentially it boils down to one of the key tenants of Mack, use the best of breed technologies to build a best of breed framework. I truly feel that DataMapper, especially when it hits the 0.9.0 release, is the best ORM, and persistence, system out there. I also feel that it is a natural fit for the Mack framework.

The other reason why I made the decision was time. It's very time consuming to constantly maintain two different, and with 0.9.0 extremely different, ORMs. There are plenty of features that I could've done faster, had I only been supporting the one ORM.

Now I know I might come under fire from some people for this, but it's a decision that I think is best for the framework. If some enterprising developer out there wants to build a plugin, or a gem, that adds ActiveRecord support, then I'm all for it! Please do!

The question you're probably asking yourself now, is when will this be happening. It'll be happening in the next release of Mack, probably the end of this week or the beginning of next week.

Again, I'm sorry for those of you were hoping to use ActiveRecord with Mack. Check out DataMapper, I'm sure you'll be happy with it.

Comments?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date>2008-05-01 16:07:00</wp:post_date>
		<wp:post_date_gmt>2008-05-01 21:07:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>saying-goodbye-to-activerecord</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[orm]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Commit Access</title>
		<link>http://www.metabates.com/2008/05/02/commit-access/</link>
		<pubDate>Sat, 03 May 2008 03:19:36 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[So after my post about dropping ActiveRecord for DataMapper, I've received some very interesting feedback, mostly good, which is great. The best comment I received was from Sam Smoot, lead developer of DataMapper. Sam offered to give me commit access to the DataMapper repos on GitHub.

I took Sam up on his offer and I've already made several contributions. This is GREAT news for the Mack Framework. When the best technologies start working in concert, only good things can happen.

I'm really excited about what's happening with DataMapper 0.9.0, and I know it's only going to make Mack a better framework. I've already started working on upgrading Mack to use, the yet unreleased, DataMapper 0.9.0 code base.

I'll keep you all posted.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2008-05-02 22:19:36</wp:post_date>
		<wp:post_date_gmt>2008-05-03 03:19:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>commit-access</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="githubcom"><![CDATA[github.com]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ORMs and Mack</title>
		<link>http://www.metabates.com/2008/05/04/orms-and-mack/</link>
		<pubDate>Sun, 04 May 2008 15:29:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=89</guid>
		<description></description>
		<content:encoded><![CDATA[So a lot has been made in the last few days about my decision to drop ActiveRecord's native support in <a href="http://www.mackframework.com/2008/05/01/saying-goodbye-to-activerecord/" target="_blank">Mack</a>. People have asked why can't I keep what I already have in regards to support for ActiveRecord, and why can't I support Sequel. So, I've decided to compromise.

In the next version of Mack, which should be out in the next day or two, I've broken out support for ActiveRecord and DataMapper into their own gems,Â <a href="http://github.com/markbates/mack-orm/tree/master" target="_blank">http://github.com/markbates/mack-orm/tree/master</a>. That means you'll be able to still use ActiveRecord, if you want. The default ORM, however, will be DataMapper. That's what you'll get out of the box with Mack.

Now, keeping with my original post, I'll be actively maintaining the mack-data_mapper gem, and when I can I'll make similar changes to the mack-active_record, but I'm not promising anything. Now the good thing here is that since the repos for these gems are on GitHub, anyone can contribute changes/additions to them. I've even put a stub in there for Sequel support, that's definitely something someone else will have to support.

This also has a nice advantage in keeping the Mack core clean and simple. Hopefully this will all lead to faster development time turn around for Mack.

It's also worth noting that when I talk about 'native' support, all I mean is some Rake tasks and some generators. There's nothing stopping anyone from using ANY ORM with Mack. You could even create your own, if you really wanted to.

Here's to hoping this makes everyone happy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2008-05-04 10:29:35</wp:post_date>
		<wp:post_date_gmt>2008-05-04 15:29:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>orms-and-mack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="githubcom"><![CDATA[github.com]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rake"><![CDATA[rake]]></category>
		<category domain="post_tag" nicename="sequel"><![CDATA[sequel]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Advanced Rails Recipes Book</title>
		<link>http://www.metabates.com/2008/05/06/advanced-rails-recipes-book/</link>
		<pubDate>Tue, 06 May 2008 12:52:29 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[For those of you who haven't yet switched to Mack (and why not?) the new <a href="http://www.pragprog.com/titles/fr_arr/advanced-rails-recipes" target="_blank">Advanced Rails Recipes</a> book is now shipping from the Pragmatic Programmers. The book features 84 recipes for build apps using Ruby on Rails. It just so happens that two of these recipes happen to be written by yours truly. That's right, I'm now a published author. :)Â 

I suggest that everyone get yourself a copy of the book, read it top to bottom, then head on over to GitHub and incorporate some of what you've just learned into Mack.

Anyway, I just want to give a quick shout out to my boy Mike Clark who compiled and edited the book. He's a great guy and he did a great job. Thanks Mike!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2008-05-06 07:52:29</wp:post_date>
		<wp:post_date_gmt>2008-05-06 12:52:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>advanced-rails-recipes-book</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="advanced-rails-recipes"><![CDATA[advanced rails recipes]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="mike-clark"><![CDATA[mike clark]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="pragmatic-programmers"><![CDATA[pragmatic programmers]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.5.0</title>
		<link>http://www.metabates.com/2008/05/06/release-050/</link>
		<pubDate>Tue, 06 May 2008 18:33:47 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=91</guid>
		<description></description>
		<content:encoded><![CDATA[I know I've been talking about this release for a while now, and here it finally is. There's some good bug fixes in here, a few new rake tasks, and some other little things like that.

The biggest thing, however, is what's been causing a stir online now for the past few days, I've split out the ORM support into separate gems. I'm not going to go over it again, you can find all the details here:Â <a href="http://www.mackframework.com/2008/05/04/orms-and-mack/" target="_blank">http://www.mackframework.com/2008/05/04/orms-and-mack/</a>

Needless to say this is a good release to get, if not for the bug fixes alone, but for the great db:create rake tasks that are now in there. Thanks, again, to Darsono Sutedja for his great contributions.

Changelog
<ul>
	<li>Added rake db:create and db:create:all rake tasks.</li>
	<li>Refactored out constants, such as MACK_ROOT and MACK_ENV and made them into Mack::Configuration.env, Mack::Configuration.root, etc...</li>
	<li>Added test:stats and test:coverage Rake tasks.</li>
	<li>Removed support for ActiveRecord and DataMapper and moved them into their own gems.</li>
	<li>Fixed a bug where yields in ERB weren't giving the desired results.</li>
	<li>DataMapper database.yml file can now be nested, and is generated as such.</li>
	<li>Cleaned up some tests, and refactored the HTML generation stuff.</li>
	<li>Fixed a bug with the scaffold generating 'bad' methods instead of 'post'</li>
	<li>Made error_messages_for more compatible with DataMapper.</li>
	<li>Fixed a bug loading url.rb and uploaded_file.rb found by Phil Darnowsky</li>
	<li>[dsutedja] Render method (in controller_base) now accepts response status code.</li>
	<li>gem: mack_ruby_core_extensions 0.1.23</li>
	<li>gem: genosaurus 1.1.4</li>
	<li>gem: datamapper 0.3.2</li>
	<li>gem: rcov 0.8.1.2.0</li>
	<li>gem: mack-data_mapper 0.5.0</li>
	<li>gem: erubis 2.6.0</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date>2008-05-06 13:33:47</wp:post_date>
		<wp:post_date_gmt>2008-05-06 18:33:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-050</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="darsono-sutedja"><![CDATA[darsono sutedja]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="erb"><![CDATA[erb]]></category>
		<category domain="post_tag" nicename="erub"><![CDATA[erub]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="genosaurus"><![CDATA[genosaurus]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="rcov"><![CDATA[rcov]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Boston Ruby Users Group Presentation</title>
		<link>http://www.metabates.com/2008/05/13/boston-ruby-users-group-presentation/</link>
		<pubDate>Wed, 14 May 2008 02:11:16 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[Tonight I gave a presentation on Mack at the Boston Ruby Users Group. I like to think the presentation went very well. Lot's of great questions and feedback. Thanks to everyone who came.

For those who couldn't make it, and for those who did, here is the slide deck I presented:

<a href="http://www.mackframework.com/wp-content/uploads/2008/05/mack-brug.pdf">Mack (Boston Ruby Users Group) Presentation</a>

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date>2008-05-13 21:11:16</wp:post_date>
		<wp:post_date_gmt>2008-05-14 02:11:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>boston-ruby-users-group-presentation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="boston-ruby-users-group"><![CDATA[boston ruby users group]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="presentation"><![CDATA[presentation]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mack on Lighthouse</title>
		<link>http://www.metabates.com/2008/05/14/mack-on-lighthouse/</link>
		<pubDate>Thu, 15 May 2008 04:18:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[You've asked for it, and now you've got it. You can now find Mack on Lighthouse,Â <a href="http://lighthouse.mackframework.com" target="_blank">http://lighthouse.mackframework.com</a>. So from now on if you find any bugs, etc... please head on over there, and fill out a simple ticket, and let the bug tracking fun begin!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2008-05-14 23:18:17</wp:post_date>
		<wp:post_date_gmt>2008-05-15 04:18:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-on-lighthouse</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="lighthouse"><![CDATA[lighthouse]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Preview (0.5.5): The New Rendering Engine</title>
		<link>http://www.metabates.com/2008/05/20/the-new-rendering-engine/</link>
		<pubDate>Tue, 20 May 2008 20:12:32 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[In the latest version of Mack the rendering engine has been completely re-written from the ground up. With this comes some new features, some incompatibility, and most importantly,Â extensibility. Let's jump on in and see what we can expect with this release.
<h3>Incompatibility</h3>
<ul>
	<li>Gone is &lt;%= @content_for_layout %&gt; in layouts. In is &lt;%= yield_to :view %&gt;.</li>
	<li>Gone is render(options_hash) in controllers/views. In is render(type, value, options_hash)
Examples:
render(:action =&gt; :new) is now render(:action, :new)
render(:url =&gt; "http://www.mackframework.com", :parameters =&gt; {:message =&gt; "hi"}) is nowÂ render(:url, "http://www.mackframework.com", :parameters =&gt; {:message =&gt; "hi"})</li>
	<li>Gone is *.xml.erb. In is *.xml.builder</li>
</ul>
<div>Let's quickly talk about how theseÂ incompatibilitiesÂ have come about. First there were several bugs that needed to be addressed with the rendering engine. For example, if you set an instance variable in a view, it wasn't available in the layout. That's a pain if you want to do things like programatically set the page title. There were also 'hacks' used to do things like render xml using the Builder::XmlMarkup library. It wasn't clean, but it worked. Finally, the rendering engine itself wasn't that extensible. All of that has now changed.</div>
<div></div>
<h3>Render Me Softly</h3>
In the new rendering engine there are two parts to the system, Mack::Rendering::Type::* objects and Mack::Rendering::Engine::* objects. Let me explain the difference.
<h4>Mack::Rendering::Type::*</h4>
A type is something like :action, :text, :inline, :url, etc... That is the type of thing you want to do. I want to render an action. I want to render a url, etc... There are classes for each of these types, and you can easily add your own. These types do all sorts of work before they pass it off to an engine, if need be. For example, in the case of Mack::Rendering::Type::Partial the render method does the work of inserting an '_' in the appropriate place, so the file can found.
<pre>&lt;%= render(:partial, "users/form") %&gt; # =&gt; "users/_form"</pre>
Once that happens it tries to find an engine to process the partial.
<h4>Mack::Rendering::Engine::*</h4>
An engine does the actual work of rendering the io, with the binding of the Mack::Rendering::ViewTemplate object, it's been given by the results of the render method in the Mack::Rendering::Type::* object. Engine examples would be, Erubis (ERB), Markaby, Haml, and Builder::XmlMarkup, all of which are included with Mack in this release. New engines can easily be plugged in and registered with the system.

Coming soon a tutorial on adding PDF::Writer support using the new system.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2008-05-20 15:12:32</wp:post_date>
		<wp:post_date_gmt>2008-05-20 20:12:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-new-rendering-engine</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="erb"><![CDATA[erb]]></category>
		<category domain="post_tag" nicename="erubis"><![CDATA[erubis]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="haml"><![CDATA[haml]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="markaby"><![CDATA[markaby]]></category>
		<category domain="post_tag" nicename="rendering"><![CDATA[rendering]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Preview (0.5.5): Adding PDF::Writer Plugin Support Tutorial</title>
		<link>http://www.metabates.com/2008/05/20/055-adding-pdfwriter-plugin-support-tutorial/</link>
		<pubDate>Tue, 20 May 2008 20:45:27 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=99</guid>
		<description></description>
		<content:encoded><![CDATA[Ok, let's take the new rendering system out for a spin, shall we? Let's add the PDF::Writer library to our Obligatory Blog Demo application. If you haven't followed this demo you should do that <a href="http://www.mackframework.com/2008/04/18/046-the-obligatory-blog-demo-take-2/" target="_blank">now</a>.

Let's start by requiring the gem in our system. Open up your gems.rb file found in config/initializers and let's add the gem:
<pre>require_gems do |gem|
  gem.add "pdf-writer", :version =&gt; "1.1.8", :libs =&gt; "pdf/writer"
end</pre>
Great! We've told Mack we want to use the 'pdf-writer' gem, version '1.1.8', and we want to automatically require the file 'pdf/writer'. Now, let's install the gem:
<pre>$ sudo rake gems:install</pre>
See how easy this is? We've installed the gem, required the libraries, now we're ready to write our plugin.
<pre>$ rake generate:plugin name=render_pdf</pre>
That should generate a few files/folders in our vendor/plugins directory. Let's open up vendor/plugins/render_pdf/lib/render_pdf.rb and let's start coding.

What we want to do is create a new Mack::Rendering::Engine::Base class so that when we call render(:action) it will have a new engine to render the view file as a PDF.

We'll examine each section in a minute, but for now, let's type this into our render_pdf.rb file:
<pre>module Mack
  module Rendering
    module Engine
      class Pdf &lt; Mack::Rendering::Engine::Base

        def render(io, binding)
          @_pdf = ::PDF::Writer.new
          self.view_template.instance_variable_set("@_pdf", @_pdf)
          eval(io, binding)
          @_pdf.render
        end

        def extension
          :pdfw
        end

        module ViewHelpers
          def pdf
            @_pdf
          end
        end

      end
    end
  end
end
Mack::Rendering::ViewTemplate.send(:include, Mack::Rendering::Engine::Pdf::ViewHelpers)
Mack::Rendering::Engine::Registry.register(:action, :pdf)</pre>
Ok, so on line #4 we extended Mack::Rendering::Engine::Base. This will give us access to a view methods, and will allow us to write to a very simple API. The only method you are <em>absolutely</em> required to implement is the render method. As we can see on line #6, we did just that.

First thing we do in the render method is instantiate a new PDF::Writer class and assign it to an instance variable. We then set that instance variable into the Mack::Rendering::ViewTemplate object we have. We do that because the way the PDF::Writer object works you need to constantly reference the instance of the writer to do your work. Example:
<pre>@_pdf.text "Hello World", :font_size =&gt; 24, :justification =&gt; :center</pre>
On line #9 we eval the io and the binding we've been given. The io will be contents of the view file we have disk, as a String, and the binding will be that of the Mack::Rendering::ViewTemplate object we've been given.

In the extension method we tell the system that are files are going to be found with the extension, pdfw. Another example of this would be the Erubis engine which declares its extension as erb.

The Mack::Rendering::Engine::Pdf::ViewHelpers module we've declared on line #17 is there to hide the @_pdf instance variable with a nicer pdf method. On line #27 we include this module into Mack::Rendering::ViewTemplate so it has access to it.

Finally, and most importantly, we need to register the new engine we've built with the system. We do that on line #28 with this bit of code:
<pre>Mack::Rendering::Engine::Registry.register(:action, :pdf)</pre>
That's saying whenever someone calls render(:action), consider me as an engine to render that. The way the selection of which engine to use is done, is very simple. First come first serve. The engines are in an array, and the first one to have a file with its extension on disk wins. Plain and simple.

Now, let's see all this in action. Let's add PDF support for our 'show' page.

Open up views/posts/show.html.erb and add the following line:
<pre>&lt;%= link_to("pdf", posts_show_url(:id =&gt; @post, :format =&gt; :pdf)) %&gt;</pre>
That will give us a link that looks like '/posts/:id.pdf'. This will, of course, go to our PostsController and the show action. This method does not need to be altered. That's right, you heard me. It does not need to change. Mack will handle the appropriate content-type headers for you. Just another great feature in 0.5.5.

Create a file called views/posts/show.pdf.pdfw. I know this might look a little weird, what with 'pdf.pdfw', but here's the reason why. That's break the file name down into its three parts. 'show' is the name of the action. 'pdf' is the format of the request, think also html, xml, etc... 'pdfw' is the engine we want to use. If we hated ourselves we could do this all in erb with a file called show.pdf.erb, but why would we want to do that?

Anyway, let's dump this nice block of code into our show.pdf.pdfw file:
<pre>pdf.select_font "Times-Roman"
pdf.fill_color(Color::RGB::Red)
pdf.text @post.title, :font_size =&gt; 24, :justification =&gt; :center
pdf.fill_color(Color::RGB::Black)
pdf.text "by #{@post.email}", :font_size =&gt; 12, :justification =&gt; :center
pdf.with_options(:font_size =&gt; 10, :justification =&gt; :left) do |p|
  p.text "\n\n"
  p.text @post.body
  p.text "\n\n"
  p.text "Created at: #{@post.created_at}"
  p.text "Updated at: #{@post.updated_at}"
end</pre>
Since this is not a tutorial on this particular gem, I'm not going to go into what all that does. Instead, let's just have a look at it in action.

Fire up your server:
<pre>$ rake server</pre>
And go to: http://localhost:3000. If you don't already have a post created, create one. Now click on the show link. You should have a link on your page that says 'pdf' click on that link. Voila! You should be seeing a wonderfully formatted PDF right now!

Congrats! You've built a plugin and a new rendering engine for Mack. Now, go crazy!

The source for all this can be found at:Â <a href="http://github.com/markbates/mack_blog_demo/tree/master" target="_blank">http://github.com/markbates/mack_blog_demo/tree/master</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date>2008-05-20 15:45:27</wp:post_date>
		<wp:post_date_gmt>2008-05-20 20:45:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>055-adding-pdfwriter-plugin-support-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="engine"><![CDATA[engine]]></category>
		<category domain="post_tag" nicename="erubis"><![CDATA[erubis]]></category>
		<category domain="post_tag" nicename="gems"><![CDATA[gems]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="pdf"><![CDATA[pdf]]></category>
		<category domain="post_tag" nicename="render"><![CDATA[render]]></category>
		<category domain="post_tag" nicename="rendering"><![CDATA[rendering]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.5.5</title>
		<link>http://www.metabates.com/2008/05/21/release-055/</link>
		<pubDate>Wed, 21 May 2008 18:35:49 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, Mack 0.5.5 is released! In addition to some great bug fixes, there is now a new rendering engine, support for automatic mime-types, the ability to register new mime-types, Markaby and Haml support, and much much more! It's a great release.

To find out more about the new rendering engine check out these two posts:

<a href="http://www.mackframework.com/2008/05/20/the-new-rendering-engine/" target="_blank">http://www.mackframework.com/2008/05/20/the-new-rendering-engine/</a>

<a href="http://www.mackframework.com/2008/05/20/055-adding-pdfwriter-plugin-support-tutorial/" target="_blank">http://www.mackframework.com/2008/05/20/055-adding-pdfwriter-plugin-support-tutorial/</a>

Changelog:
<ul>
	<li>INCOMPATIBILITY NOTICE: Ripped apart the ENTIRE rendering engine and rewrote it from the ground up. This means that wherever you are using 'render' calls in your views and controllers need to be changed. The new format is render(type, value, options). Examples: render(:action, :show), render(:url, "http://www.mackframework.com"), etc...</li>
	<li>INCOMPATIBILITY NOTICE: Files named *.xml.erb need to be changed to *.xml.builder to use the Builder::XmlMarkup library. If you leave the .erb extension on there the file will be run through Erubis.</li>
	<li>INCOMPATIBILITY NOTICE: &lt;%= @content_for_layout %&gt; is now &lt;%= yield_to :view %&gt;</li>
	<li>Added Markaby support.</li>
	<li>Added Haml support.</li>
	<li>Added content_for and yield_to methods in views.</li>
	<li>Erubis compiled templates are now cached for increased performance.</li>
	<li>Added render(:inline) and render(:template) support.</li>
	<li>Refactored, and reorganized some files to clean up the gem.</li>
	<li>Fixed bug with cookies not merging with configured app_config parameters.</li>
	<li>Added mime-types. The 'Content-Type' header is now being set based on the format that is requested. Default is text/html.</li>
	<li>Fixed r.defaults in routes so they are always the last routes to be checked, no matter where they are placed in the routes definitions.</li>
	<li>render(:url) now recognizes 'local' urls and tries to run them through the app, mimicking most headers from the original request.</li>
	<li>Added 'options' banners to the mack and mack_ring_server binaries.</li>
	<li>gem: genosaurus 1.1.8</li>
	<li>gem: mack_ruby_core_extensions 0.1.28</li>
	<li>gem: markaby 0.5.0</li>
	<li>gem: mack-data_mapper 0.5.5</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2008-05-21 13:35:49</wp:post_date>
		<wp:post_date_gmt>2008-05-21 18:35:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-055</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="erubis"><![CDATA[erubis]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="haml"><![CDATA[haml]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="markaby"><![CDATA[markaby]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rendering"><![CDATA[rendering]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OT: Some Music</title>
		<link>http://www.metabates.com/2008/05/26/ot-some-music/</link>
		<pubDate>Tue, 27 May 2008 02:25:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[So I know this is off topic, but hey, it's my blog, I'll do what I want. My new band, <a href="http://www.thebluewires.com" target="_blank">The Blue Wires</a>, has finally released it's first demos. We're pretty excited about them. If you have a moment, why not hop on over there and check them out, I think you'll enjoy!

<a href="http://www.thebluewires.com/music/" target="_blank">http://www.thebluewires.com/music/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2008-05-26 21:25:53</wp:post_date>
		<wp:post_date_gmt>2008-05-27 02:25:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ot-some-music</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="demos"><![CDATA[demos]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="music"><![CDATA[music]]></category>
		<category domain="post_tag" nicename="off-topic"><![CDATA[off topic]]></category>
		<category domain="post_tag" nicename="the-blue-wires"><![CDATA[the blue wires]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RailsConf &#039;08</title>
		<link>http://www.metabates.com/2008/05/27/railsconf-08/</link>
		<pubDate>Wed, 28 May 2008 00:58:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=102</guid>
		<description></description>
		<content:encoded><![CDATA[Well folks, RailsConf '08, is just about upon us. I'm heading out to Portland, are you? If so, let's make contact. It'll be great to meet everyone who's been following Mack and supporting what we're doing here.

I'm going to be leading a Birds of a Feather session Thursday night, "Rails Alternatives and You" from 7.30pm - 8.30pm in room D133. There are going to representatives of Merb and DataMapper there as well, so it should be a good time. Again, it'd be great to meet some of you.

On Friday during lunch at 12.35pm, I'll be signing copies of the 'Advanced Rails Recipes' book at the Powell's Book booth, along with some of the other authors. I think I'm more excited about this than anything else happening at the rest of the conference!

For those of you who have been to a RailsConf in the past, know it's a great time. For those who haven't, it's a great time. :) Last year I got to meet a lot of great people, and this year I'm looking forward to meeting more. I hope you'll be one of them.

See ya in Portland.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2008-05-27 19:58:01</wp:post_date>
		<wp:post_date_gmt>2008-05-28 00:58:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>railsconf-08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="advanced-rails-recipes"><![CDATA[advanced rails recipes]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="merb"><![CDATA[merb]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rails-conf-08"><![CDATA[rails conf 08]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DataMapper 0.9.x and Mack</title>
		<link>http://www.metabates.com/2008/06/01/datamapper-09x-and-mack/</link>
		<pubDate>Sun, 01 Jun 2008 06:14:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[As I've told a lot of you my goal was to have a Mack release out by the end of RailsConf, which ends tomorrow, that would be rocking the newly released version of DataMapper, 0.9.1. The good news is I've pretty much got it all done, and it works great! The bad news is I'm not going to release it.

Why is this you might ask? Why aren't I going to get Mack support for DataMapper 0.9.1 out there, if it already works. Great questions. The answer is simply this, migrations. I've spent most of the weekend hanging out with a great guy by the name of Adam French. Adam is one of the core developer's of DataMapper. As a matter of fact, I just left Adam after we spent a couple of hours in the hotel bar writing a gem called, dm-voyeur, to allow for 'observing' of DataMapper::Resource objects.

Anyway, as I've been hanging out with Adam I've been trying to upgrade the Mack migration generator script to build the new style format for DataMapper 0.9.1. What I found though, was that migrations have a minor flaw, you have to write the SQL for the column! That means they aren't portable! This bit me in the butt when I had a migration I wrote against Postgres that would run, but wouldn't give me the results I expected in SQLite3. After spending most of the weekend complaining to Adam about this, he kindly pointed out that I have full commit access to DataMapper, and I should probably just fix the bloody thing myself. So that's what I've done.

The great news is that migrations are now pretty sweet. The bad news is I'm not going to release Mack support for DataMapper 0.9.x until they put out the next release so everyone in the Mack universe can have a nice experience using the new migrations. Although I don't know just when the next release of DataMapper will be, I estimate that it will be relatively soon. Keep an eye on this space.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2008-06-01 01:14:51</wp:post_date>
		<wp:post_date_gmt>2008-06-01 06:14:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>datamapper-09x-and-mack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="adam-french"><![CDATA[adam french]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="dm-voyeur"><![CDATA[dm-voyeur]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="migrations"><![CDATA[migrations]]></category>
		<category domain="post_tag" nicename="rails-conf-08"><![CDATA[rails conf 08]]></category>
		<category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cachetastic 1.7.0 Release</title>
		<link>http://www.metabates.com/2008/06/04/cachetastic-170-release/</link>
		<pubDate>Wed, 04 Jun 2008 14:42:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=104</guid>
		<description></description>
		<content:encoded><![CDATA[The simple, yet extremely powerful, Ruby caching framework, Cachetastic has been upgraded to 1.7.0. The big new feature of this release is the Cachetastic::Cacheable module. Including this module allows any class to become a Cache.
<pre>class Person
include Cachetastic::Cacheable
end
Person.set_into_cache(:hi, "Hello There")
Person.get_from_cache(:hi) #=&gt; "Hello There"</pre>
Under the covers this creates a Cachetastic::Caches::Base object and proxies requests to it. This is a very simple example and belies the richness of the Cachetastic library.Â 

<a href="http://cachetastic-api.mackframework.com/" target="_blank">http://cachetastic-api.mackframework.com/</a>

Features:
<ul>
	<li>Flexible configuration. All caches have can either have their own configurations, or they can inherit from a default configuration.</li>
	<li>Easy to use Adapter API. Included adapters include, LocalMemory, Memcache, DRb, File, and more. With the Adapter API being so simple, it's easy to build your own custom adapter.</li>
	<li>Flexible logging. Each cache can have it's own loggers, or they can use the default logger.</li>
	<li>JIT caching. Through Ruby's powerful block structure, you can pass a block to a 'get' call and have it run if the results from the get are either 'nil' or 'empty'</li>
	<li>Cachetastic::Cacheable module turns any Object into a cache. It allows for any instance of that Object to cache and uncache itself.</li>
	<li>And much more!</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2008-06-04 09:42:53</wp:post_date>
		<wp:post_date_gmt>2008-06-04 14:42:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cachetastic-170-release</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="post_tag" nicename="drb"><![CDATA[drb]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="memcache"><![CDATA[memcache]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.5.5.4</title>
		<link>http://www.metabates.com/2008/06/10/release-0554/</link>
		<pubDate>Tue, 10 Jun 2008 12:04:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=105</guid>
		<description></description>
		<content:encoded><![CDATA[This is actually a combined post about 0.5.5.3 and 0.5.5.4. They are both small patch releases, but they both address some pretty big problems.

<strong>0.5.5.3:</strong>

The new version of Passenger (aka mod_rails) now has support for Rack based applications. In their documentation they show how to use a Mack app with Passenger. The documentation is based on the yet to be released Thin adapter. With that said, both of those systems use a piece of Mack that's no longer there. Because of that I've restored the small section of code, to make sure those two systems work with Mack. Which is great news.

On some flavors of Unix when you do a Dir.glob you don't necessarily get back an ordered list of files. Because of that some people we're getting uninitializedÂ constant errors. This has also been addressed in 0.5.5.3.

<strong>0.5.5.4:</strong>

A couple of people have reported issues where they were getting the following error even with the most simple application:

"Rack::Lint::LintError: env missing required key QUERY_STRING"

A Mack supporter by the name of Andre Ludwig stepped up to help me try and figure out the problem. I couldn't reproduce it on the machines I have access to, I suppose that goes without saying, because I could've reproduced it, I would've fixed it sooner. Anyway, Andre stepped up with both his time, spending most of his Sunday online with me, but also with his hardware. Andre opened up his server to me so I could go in there directly and play with things until I found the problem.

Sure enough, once I got in there, it didn't take me too long to figure out what the problem was. It turned out to be a conflict between the latest version of Mongrel (1.1.5) and the latest version of Thin (0.8.1). A simple rewrite of the rake server task and voila! problem solved.

So I would like to say thanks so much to Andre Ludwig for all his time and his hardware. I would also like to thank Saji for originally reporting the problem and for doing some troubleshooting for me as well.

As the community grows I can't help but be awed by not only how much people are loving what Mack is doing, but also by the communities willingness to get involved and help out. Thanks so much everyone!

Changelog 0.5.5.4:
<ul>
	<li>Fixed the damn Lint error some people were facing!</li>
</ul>
<div>

Changelog 0.5.5.3:
<ul>
	<li>Restored compatibility with Passenger and the next version of Thin.</li>
	<li>Fixed 'requires' out of order in certain flavors or unix. Hopefully.</li>
</ul>
Â 

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date>2008-06-10 07:04:24</wp:post_date>
		<wp:post_date_gmt>2008-06-10 12:04:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-0554</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="andre-ludwig"><![CDATA[andre ludwig]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="mod_rails"><![CDATA[mod_rails]]></category>
		<category domain="post_tag" nicename="mongrel"><![CDATA[mongrel]]></category>
		<category domain="post_tag" nicename="passenger"><![CDATA[passenger]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="saji"><![CDATA[saji]]></category>
		<category domain="post_tag" nicename="thin"><![CDATA[thin]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wiki + DM 0.9.2</title>
		<link>http://www.metabates.com/2008/06/13/wiki-dm-092/</link>
		<pubDate>Fri, 13 Jun 2008 19:04:13 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[Hey everyone, people have asked for it, so here it is, a Wiki for Mack:

<a href="http://wiki.mackframework.com/" target="_blank">http://wiki.mackframework.com/</a>

I've placed a few tutorials up there, and it'll be the defacto place for such information.

I highly encourage everyone to create an account and add to the knowledge base there.

On a different note, it looks like the next version of DataMapper will be out in the next few days. This is great news for Mack developers as the next release of Mack has been held back because it requires stuff in the DataMapper 0.9.2. Once that's out, the next version of Mack will be right on it's tail! Keep watching this space.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2008-06-13 14:04:13</wp:post_date>
		<wp:post_date_gmt>2008-06-13 19:04:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wiki-dm-092</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[wiki]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why so quiet?</title>
		<link>http://www.metabates.com/2008/06/23/why-so-quiet/</link>
		<pubDate>Mon, 23 Jun 2008 18:00:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[I'm sure everyone is wondering why things have been so quiet around the Mack front recently. Well, there are a couple of reasons. One, I'm on vacation in Ireland right now, so my coding time has dropped dramatically. Second, I'm still very much so patiently awaiting the 0.9.2 release of DataMapper, which the next version of Mack needs. Third, there is a lot of Mack work afoot at the moment.

The company I work has seen fit to give me a few more resources to help me make Mack the most kick ass framework out there. I've not got 1.5 more bodies diligently working away on Mack, with another body to hopefully be hired in the next full weeks. That will mean, within a few weeks there will be 3.5 full time bodies working on Mack! Awesome!

There are some great things that are going to be in the next build, but mostly it'll be a nice refactoring. We're going to splitting a bunch of stuff out of the core of Mack and putting into a mack-more package, similar to the approach Merb and DataMapper have adopted. In mack-more there will be l10n internationalization, RJS support (Prototype AND jQuery), DataMapper 0.9.x support, HAML, Markaby, PDF::Writer support, amongst others. It'll be nice. Trust me. :)

We hope to have the next release out within the first or second week of July, of course, this really depends on when the DataMapper release can get out there. Once we get this release out, we can really focus on some extremely kick ass new features. Stay tuned!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2008-06-23 13:00:10</wp:post_date>
		<wp:post_date_gmt>2008-06-23 18:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-so-quiet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="haml"><![CDATA[haml]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="markaby"><![CDATA[markaby]]></category>
		<category domain="post_tag" nicename="merb"><![CDATA[merb]]></category>
		<category domain="post_tag" nicename="pdf"><![CDATA[pdf]]></category>
		<category domain="post_tag" nicename="prototype"><![CDATA[prototype]]></category>
		<category domain="post_tag" nicename="rjs"><![CDATA[rjs]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby Opals</title>
		<link>http://www.metabates.com/2008/06/23/ruby-opals/</link>
		<pubDate>Mon, 23 Jun 2008 18:14:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[At RubyConf a bunch of us sat around a few glasses of beer and had a 'bitch' session about the state of Ruby Gems, a system we all consider be rather sub-par. At that session Tracy Flynn, friend andÂ colleague of yours truly, said we should do something about it. He suggested we write RubyOpals. Well, Tracy is putting his money where his mouth is,Â <a href="http://github.com/tflynn/rubyopals/tree/master" target="_blank">http://github.com/tflynn/rubyopals/tree/master</a>. I can tell you that I for one, can't wait for Ruby Opals! I've already forked the project and started contributing! As soon as the first version is ready for release, I can tell you that Mack, Cachetastic, Genosaurus, etc... will all be the first available as opals.

I highly encourage all of you out there to add this project to your 'watch' list on GitHub. And if you have the time, and want to help write something special, I highly encourage you to fork it and start contributing! Time to get out there and start making the Ruby world a much, much, much better place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2008-06-23 13:14:57</wp:post_date>
		<wp:post_date_gmt>2008-06-23 18:14:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-opals</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="post_tag" nicename="gems"><![CDATA[gems]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="genosaurus"><![CDATA[genosaurus]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="ruby-opals"><![CDATA[ruby opals]]></category>
		<category domain="post_tag" nicename="tracy-flynn"><![CDATA[tracy flynn]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0.6.0 Coming VERY soon!</title>
		<link>http://www.metabates.com/2008/07/10/060-coming-very-soon/</link>
		<pubDate>Thu, 10 Jul 2008 18:40:59 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[Well folks, as you know, things have been a bit quiet on the Mack front these days, but it's all been for a very good reason. We've been prepping the next release, 0.6.0. This release is expected to hit the streets sometime the beginning of next week. There's a lot of really great stuff in the release, DataMapper 0.9.2 support (finally!), RSpec testing support, a mack-more project to house a bunch of cool Mack related gems, Exception handling in Routing, and more... A full list will be available when the release happens.

In addition to the great new features, a lot of bugs have been worked out, and more of the API has solidified further. Because of some of these changes I've posted an upgrade guide from 0.5.x to 0.6.0. This guide can be found on the <a href="http://wiki.mackframework.com/index.php/en/Upgrading%20from%200.5.x%20to%200.6.x" target="_blank">wiki</a>.&nbsp;

This guide is meant to make upgrading as quickly and as a painless possible. There are a couple of big changes, but they should be fairly simple to make.

I'm very happy with this release, it's been long toiled over, and it shows. It's very stable, fast, and fun. I think everyone is really going to like it.&nbsp;

As more info about the release becomes available, I'll keep everyone posted.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2008-07-10 13:40:59</wp:post_date>
		<wp:post_date_gmt>2008-07-10 18:40:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>060-coming-very-soon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="mack-more"><![CDATA[mack-more]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="routing"><![CDATA[routing]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="post_tag" nicename="upgrade"><![CDATA[upgrade]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[wiki]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.6.0</title>
		<link>http://www.metabates.com/2008/07/16/release-060/</link>
		<pubDate>Wed, 16 Jul 2008 14:04:22 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=110</guid>
		<description></description>
		<content:encoded><![CDATA[Well, it's finally here, Mack 0.6.0! This release has taken a long time, but I feel that it's definitely worth it. This has to be the best release of Mack to date. During this release the Mack dev team grew by 100%, Darsono Sutedja, previously a contributor to Mack, is now a full time Mack core team developer! Darsono has done an absolutely great job on this release, thanks Darsono. With that out of the way, let's jump straight to the good stuff, shall we?
<h3>DataMapper 0.9.2 Support</h3>
At long last Mack supports DataMapper 0.9.2. Because previous versions of Mack used DataMapper 0.3.2, there is some upgrade work that you'll need to do, but trust me, it's worth it. DataMapper 0.9.2 is a gigantic leap forward from 0.3.2. If you have problems installing the data_mapper gem, make sure that you don't have gems.datamapper.org in your source path for rubygems. You can remove it with the following command:
<pre>gem source -r http://gems.datamapper.orgÂ </pre>
<h3>RSpec Testing Support</h3>
RSpec is now the default testing framework for new Mack applications. This innovative testing framework makes it fun, and simple, to do behavior driven development. If you haven't yet played with RSpec, I would highly recommend it. I wasn't a big fan of 'spec' testing prior to meeting Adam French, of DataMapper fame, and he turned me on to the joys of rspec. I think you'll like it too, if you give it a chance. :)
<h3>mack-more</h3>
There is now a mack-more package. This will house all the optional gems available to the Mack framework. This include things like HAML and Markaby support, localization, etc... Use what you want, ignore the rest. This will help keep the core code clean, light, and of course, fast.
<h3>Localization/l10n Support</h3>
Darsono did a great job with the mack-localization gem. There is now optional support for internationalization in Mack applications. Check out the gem, it's definitely worth it if you need to support multiple languages for your web application.
<h3>Much, much more!</h3>
Of course, there's a lot more Mack than the stuff I just mentioned, there's tons of bug fixes, some code clean up, some API changes, transactional testing support, the ability to catch specific errors in routes and have them diverted to a controller/action for handling.

There is a great wiki entry on upgrading your existing Mack project to 0.6.0 <a href="http://wiki.mackframework.com/index.php/en/Upgrading%20from%200.5.x%20to%200.6.x" target="_blank">here</a>. I highly recommend reading it whether or not you have an existing Mack application.

With this release the Mack team is also fully embracing Lighthouse. If you find bugs, or have suggestions please visit <a href="http://lighthouse.mackframework.com" target="_blank">http://lighthouse.mackframework.com</a>Â and log them there. You'll also find the list of features that will eventually be added to Mack.

Changelog:
<ul>
	<li>INCOMPATIBILITY NOTICE: Moved Mack::Configuration.root to Mack.root</li>
	<li>INCOMPATIBILITY NOTICE: Moved Mack::Configuration.env to Mack.env</li>
	<li>INCOMPATIBILITY NOTICE: Mack::Configuration.* path methods no longer exist. Use mack-paths instead.</li>
	<li>INCOMPATIBILITY NOTICE: Dropped mack_ruby_core_extensions in favor or mack-facets</li>
	<li>INCOMPATIBILITY NOTICE: Mack::Controller::Base is now Mack::Controller (and it's now a module)</li>
	<li>INCOMPATIBILITY NOTICE: Haml renderer is now part of mack-more.</li>
	<li>INCOMPATIBILITY NOTICE: Markaby renderer is now part of mack-more.</li>
	<li>INCOMPATIBILITY NOTICE: Changed request param's accessor routine, from params(key) to params[key]</li>
	<li>INCOMPATIBILITY NOTICE: Test::Unit::TestCase is no longer the default testing framework, RSpec is. If you wish to useÂ Test::Unit::TestCase add the following config parameter to your config/app_config/default.yml file:
Â Â mack::testing_framework: test_case</li>
	<li>INCOMPATIBILITY NOTICE: ENV["_mack_env"] and ENV["_mack_root"] are no longer supported, please use ENV["MACK_ENV"] and ENV["MACK_ROOT"], or just Mack.env and Mack.root</li>
	<li>INCOMPATIBILITY NOTICE: MACK_DEFAULT_LOGGER constant is no longer available. Please use Mack.logger instead.</li>
	<li>INCOMPATIBILITY NOTICE: The ApplicationHelper module is now deprecated. Please move view level helpers into Mack::ViewHelpers::* and controller helpers into Mack::ControllerHelpers::&lt;controller_name&gt;</li>
	<li>thin.ru and thin.yml are no longer needed, you may delete them.</li>
	<li>RSpec assertions are now automatically added.</li>
	<li>Added a Mack::Testing::Response class to make testing of responses easier.</li>
	<li>moved test_extensions to testing and added the module Testing to the files in it.</li>
	<li>Added a dependency on mack-more</li>
	<li>Added a set of Rake tasks to update existing Mack applications.</li>
	<li>[#30] Added Mack::Logging::Filter to filter out unwanted parameters from the logs.</li>
	<li>In routing you can now define a route that will catch an Exception from another controller.</li>
	<li>ORM will not be initialized if the app never specify which ORM to use.</li>
	<li>All Mack unit tests are now written using rspec-1.1.4.</li>
	<li>mack command now takes an optional -t flag to determine which testing framework to use--value could be test_case or rspec [default]</li>
	<li>new setting added to app_config: testing_framework</li>
	<li>gem: cachetastic 1.7.2</li>
	<li>gem: application_configuration 1.5.0</li>
	<li>gem: erubis 2.6.2</li>
	<li>gem: genosaurus 1.2.1</li>
	<li>gem: thin 0.8.2</li>
	<li>gem: rspec 1.1.4</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2008-07-16 09:04:22</wp:post_date>
		<wp:post_date_gmt>2008-07-16 14:04:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-060</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="darsono-sutedja"><![CDATA[darsono sutedja]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="haml"><![CDATA[haml]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="mack-more"><![CDATA[mack-more]]></category>
		<category domain="post_tag" nicename="markaby"><![CDATA[markaby]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>104</wp:comment_id>
			<wp:comment_author><![CDATA[This Week in Ruby (July 26, 2008) | Zen and the Art of Programming]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://antoniocangiano.com/2008/07/26/this-week-in-ruby-july-26-2008/</wp:comment_author_url>
			<wp:comment_author_IP>72.52.169.158</wp:comment_author_IP>
			<wp:comment_date>2008-07-26 03:10:02</wp:comment_date>
			<wp:comment_date_gmt>2008-07-26 08:10:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the alternative framework world, Mack Framework 0.6 was released, which includes DataMapper 0.9.2 and RSpec support, transactional tests, [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>(0.6.0) 4 Little Known Mack Features</title>
		<link>http://www.metabates.com/2008/07/23/4-little-known-mack-features/</link>
		<pubDate>Wed, 23 Jul 2008 18:02:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[I thought it might be fun to start posting about some of the little known features in Mack. There are a treasure trove of them in there, so let's pick a couple and start there.
<h3>render(:url)</h3>
This is a great little feature, one of my personal favorites. In your views you can do things like this:
<pre>&lt;%= render(:url, "http://www.mackframework.com) %&gt;</pre>
that will render the contents of http://www.mackframework.com into your view. You can also do 'local' urls.
<pre>&lt;%= render(:url, "/users/1") %&gt;</pre>
will make an internal request to your application and render the results of "/users/1" into your view.Â The optional 3rd parameter to render allows you to do things like set the HTTP method:
<pre>&lt;%= render(:url, "/users/1", :method =&gt; :post) %&gt;</pre>
or add parameters you want to pass to the URL you want to render:Â 
<pre>&lt;%= render(:url, "/users/1", :method =&gt; :post,Â :parameters =&gt; {:id =&gt; 1}) %&gt;</pre>
<h3>Error handling in routes</h3>
Routing allows you to define controllers/actions you want to catch and handle exceptions that happen in other controllers. Let's look at the following routes.rb file:
<pre>Mack::Routes.build do |r|
  r.resource :users
  r.home_page "/", :controller =&gt; :default, :action =&gt; :index
  r.handle_errors ArgumentError, :controller =&gt; :problems, :action =&gt; :arguments
  r.handle_errors DataMapper::ObjectNotFoundError, :controller =&gt; :problems, :action =&gt; :not_found
  r.defaults
end</pre>
What's going on with r.handle_errors you ask? Well, first we tell the routing system which error we want to capture in our controllers, DataMapper::ObjectNotFoundError, then we tell it which controller and which action we want to handle that error.

When an exception is thrown during a request Mack checks to see if that exception has been registered, if it has been then the request gets forwarded to the defined controller and action for handling. So in the above example if a DataMapper::ObjectNotFoundError is raised, the request will be forwarded to the ProblemsController, not_found action.

One of the really nice things about this is that you have access to the original request, so you can't get the page the person was trying to access, any parameters that were passed, etc... You also have access the exception itself with theÂ caught_exception method.
<h3>Server-side redirects</h3>
Let's be honest, redirects are the most exciting topic, and this is the first of two sections on it! I'll try to be brief. When dealing with redirects it can sometimes be helpful to do a server-side redirect. The difference, for those who don't know, between a server-side redirect and a regular redirect is the following. With a regular redirect the response is sent back down to the client's browser, which then issues another response back to the server for the new url that was specified in the previous response. You'll often hear this referred to as a client-side redirect. A server-side redirect sends you to a different url on the server, without first sending down a response to the client. Because of this the client only gets one response.

To do a server-side redirect in Mack is very easy. Here's what a client side redirect in an action would look like:
<pre>redirect_to(users_index_url)</pre>
To make that a server-side redirect you would simply pass an extra option to the redirect_to method:
<pre>redirect_to(users_index_url,Â :server_side =&gt; true)</pre>
<h3>Redirects in routes</h3>
This is a cool little feature. Let's say that you have changed a few urls around. You want a quick way to redirect people who have bookmarked the old urls to the new urls. You could have a controller that did nothing but that, but that seems like a lot of extra work, and it's really something that your routing system should be doing for you anyway. Enter redirects in routes.
<pre>Mack::Routes.build do |r|
Â Â r.old_foo "/my_old_foo", :redirect_to =&gt; "/my_new_foo", :status =&gt; 301
end</pre>
From now on anything comes in to "/my_old_foo" will be redirected to "/my_new_foo" with a status of 301.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2008-07-23 13:02:02</wp:post_date>
		<wp:post_date_gmt>2008-07-23 18:02:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>4-little-known-mack-features</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="exceptions"><![CDATA[exceptions]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="redirects"><![CDATA[redirects]]></category>
		<category domain="post_tag" nicename="rendering"><![CDATA[rendering]]></category>
		<category domain="post_tag" nicename="routes"><![CDATA[routes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[5-little-known-mack-features]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>147</wp:comment_id>
			<wp:comment_author><![CDATA[Recent URLs tagged Redirect - Urlrecorder]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.urlrecorder.com/redirect</wp:comment_author_url>
			<wp:comment_author_IP>67.228.47.154</wp:comment_author_IP>
			<wp:comment_date>2008-10-10 17:48:04</wp:comment_date>
			<wp:comment_date_gmt>2008-10-10 22:48:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Recent public urls tagged "redirect"  &rarr; (0.6.0) 4 Little Known Mack Features [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Mack 0.6.0 featured on this week&#039;s RailsEnvy Podcast</title>
		<link>http://www.metabates.com/2008/07/23/mack-060-featured-on-this-weeks-railsenvy-podcast/</link>
		<pubDate>Wed, 23 Jul 2008 16:53:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=113</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.railsenvy.com/2008/7/23/rails-envy-podcast-episode-039-07-23-2008" target="_blank">http://www.railsenvy.com/2008/7/23/rails-envy-podcast-episode-039-07-23-2008</a>

If you're not familiar with the podcast, I highly recommend checking it out. It's a very informative, and highly entertaining podcast about all things Ruby.

Good work guys, keep it up!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2008-07-23 11:53:00</wp:post_date>
		<wp:post_date_gmt>2008-07-23 16:53:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-060-featured-on-this-weeks-railsenvy-podcast</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="rails-envy"><![CDATA[rails envy]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.6.1.1</title>
		<link>http://www.metabates.com/2008/08/04/release-061/</link>
		<pubDate>Mon, 04 Aug 2008 17:35:26 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=117</guid>
		<description></description>
		<content:encoded><![CDATA[Mack 0.6.1.1 features 38 completed tickets and a whole host of really great features and improvements. Here's a quick overview of a few of the big features in Mack 0.6.1.1.
<h3>Page Caching</h3>
There is now a mack-caching gem which gives you easy to use page caching when you require it. To use page caching first you need to add it to your gems.rb file like such:
<pre>gem.add "mack-caching", :libs =&gt; "mack-caching"</pre>
That will require the gem and give your app access to the page caching libraries. Next you to turn on page caching in your application. In the appropriate config/*.yml file add the following:
<pre>use_page_caching: true</pre>
Now, you just need to tell your controllers which actions they should cache:
<pre>class FooController
&nbsp;&nbsp;include Mack::Controller
&nbsp;&nbsp;cache_pages :only =&gt; [:index, :show]
end</pre>
If you give the cache_pages no optional parameters then it will cache all the actions for that controller. Alternatively, you could give it an :except parameter to list the actions you don't want cached.&nbsp;
<h3>Notifiers (aka Mailers)</h3>
Mack now has a mack-notifier gem that will be the repository for all 'notification' systems, the first of which is email. The Mack::Notifier API is simple and easy to use and will allow developers to plugin in different notification systems under the cover without having to change their application code.&nbsp;

A notifier can look as simple as:
<pre>class WelcomeEmail
&nbsp;&nbsp;include Mack::Notifier
end</pre>
With that you can then write the following bit of code:
<pre>we = WelcomeEmail.new
we.to = "foo@example.com"
we.from = "bar@example.com"
we.subject = "Hello World"
we.body(:text) = "My plain text body"
we.body(:html) = "My html body"
we.attach(Mack::Notifier::Attachment.new("/path/to/my/file"))&nbsp;
we.deliver</pre>
Obviously there's a lot more to the API, including a validations module, but that's a subject for another post.&nbsp;
<h3>JavaScript (aka RJS)</h3>
The mack-javascript gem now gives you Rails-like RJS support for Mack. The default library to use with mack-javascript is jQuery, but there is prototype support available as well.&nbsp;
<h3>Data Factory</h3>
Creating faux data for testing can be a real nightmare. Fixtures can be difficult to maintain and trying to create your own faux data can be a chore. That's where the mack-data_factory gem comes in.

For each model that you want to produce, you will need to define a factory class. &nbsp;

Let's say that I have 2 models: Item and User, and Item belongs to user. &nbsp;So the factories will look like the following:
<pre>class ItemFactory
&nbsp;&nbsp;include Mack::Data::Factory
&nbsp;&nbsp;field :title, "MyItem"
&nbsp;&nbsp;field :owner_id, {:user =&gt; 'id'}
end

class UserFactory
&nbsp;&nbsp;include Mack::Data::Factory
&nbsp;&nbsp;field :username, "planters", :length =&gt; 25, :content =&gt; :alpha
&nbsp;&nbsp;field :password, "roastedPeanuts", :immutable =&gt; true
end</pre>
So, the 2 classes above defined the factory for item and user. &nbsp;As you can see, each factory will need to explicitly&nbsp;list all the fields that it will populate, and for each field, you can define rules on how the content is generated.

Supported content types:&nbsp;
<ul>
	<li>:alpha --&gt; alphabets. &nbsp;rules: [:length, :min_length, :max_length]</li>
	<li>:alphanumeric --&gt; alphabets and number. &nbsp;rules: same as :alpha</li>
	<li>:numeric --&gt; numbers [optional, because if the field's default value is number, its content type will automatically set to numeric)</li>
	<li>:email --&gt; generate random email address</li>
	<li>:username --&gt; generate random username</li>
	<li>:domain --&gt; generate random domain name</li>
	<li>:firstname --&gt; generate first name</li>
	<li>:lastname --&gt; generate last name</li>
	<li>:name --&gt; generate full name</li>
	<li>:city --&gt; generate city name</li>
	<li>:streetname --&gt; generate street name</li>
	<li>:state --&gt; generate state. &nbsp;rules: [:country --&gt; :us or :uk, :abbr --&gt; true if you want a abbreviated state name (us only)]</li>
	<li>:zipcode --&gt; generate zipcode. rules: [:country --&gt; :us or :uk]</li>
	<li>:phone --&gt; generate phone number</li>
	<li>:company --&gt; generate company name. &nbsp;rules: [:include_bs --&gt; include sales tag line]
example: &nbsp;field, "", :content =&gt; :company, :include_bs =&gt; true&nbsp;could generate something like:
Fadel-Larkin&nbsp;monetize cross-media experiences</li>
</ul>
<div>There's a lot more to the mack-data_factory gem, so I highly recommend you check it out.</div>
Changelog:
<ul>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/60-mack-app_generator-is-broken" target="_blank">#60</a>] Fixed Mack executable problem</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/59-the-gems-tasks-aren-t-working-again" target="_blank">#59</a>] Fixed gems:* tasks</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/57-files-should-be-moved-under-lib-mack" target="_blank">#57</a>] Moved most files under to lib/mack</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/56-create-mack-utils-registrymap" target="_blank">#56</a>] mack-more: Added Mack::Utils::RegistryMap</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/55-registrymap-and-registrylist" target="_blank">#55</a>] mack-more: mack-facets: Mack::Utils::Registry is now Mack::Utils::RegistryList</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/54-datamapper-0-9-3-support" target="_blank">#54</a>] Added DataMapper 0.9.3 support</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/52-orm-require-needs-to-use-full-path" target="_blank">#52</a>] mack-more: mack-[orm] should require mack-[orm].rb using its full path.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/51-orm-setting-is-in-the-wrong-place-in-newly-generated-app" target="_blank">#51</a>] Application generator should generate orm support in the right place</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/50-split-mack-rb-in-2" target="_blank">#50</a>] Mack will now have 2 environment files: mack_core and mack_app. &nbsp;Mack.rb will load both files, but it gives other module chance to load just the core files and not the application's files.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/49-orm-tasks-aren-t-available" target="_blank">#49</a>] Making sure the orm tasks is available when orm_support is removed from the app_config</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/49-orm-tasks-aren-t-available" target="_blank">#49</a>] mack-active_record: &nbsp;mack-active_record.rb will require mack-active_record_tasks.rb</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/49-orm-tasks-aren-t-available" target="_blank">#49</a>] mack-data_mapper: &nbsp;mack-data_mapper.rb will require mack-data_mapper_tasks.rb</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/49-orm-tasks-aren-t-available" target="_blank">#49</a>] Updated warning message if orm is defined in app_config (i.e. user only needs to require mack-[orm_name], instead of both that and mack-[orm_name]_tasks).</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/48-rake-generator-list-displays-wrong-information" target="_blank">#48</a>] rake generator:list now displays the correct names for the generator tasks.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/47-rake-gems-install-blows-up" target="_blank">#47</a>] rake gems:* tasks now work, and no longer require mack_ruby_core_extensions</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/46-to_param-on-nilclass-should-raise-nomethoderror" target="_blank">#46</a>] Calling .to_param on nil now raises a NoMethodError exception.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/45-rake-stats-doesn-t-work-with-test-unit-testcase" target="_blank">#45</a>] rake stats task now works with Test::Unit::TestCase</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/44-refactor-mack-runner-to-make-it-easier-to-extend" target="_blank">#44</a>] Mack::Runner has now been extended to allow for greater extension flexibility.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/43-create-a-registry-base-class" target="_blank">#43</a>] Added a Mack::Utils::Registry class to allow for easy creation of registries.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/42-applications-should-be-able-to-turn-of-sessions-globally" target="_blank">#42</a>] Sessions can now be turned off globally using the app_config.mack.use_sessions switch.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/41-deprecate-app_config-orm" target="_blank">#41</a>] Deprecate orm_support.rb</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/38-a-controller-registry-is-needed" target="_blank">#38</a>] There is now a registry of Controllers that are in the system.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/36-controller-s-don-t-have-control-over-there-initialize-methods" target="_blank">#36</a>] Renamed the initialize method in the Mack::Controller module to configure_controller. This gives</li>
	<li>&nbsp;&nbsp;control of the initialize method back to the class.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/34-mack-l10n-raised-exception-should-have-fully-qualified-name" target="_blank">#34</a>] Mack::l10n now raises exception with a fully qualified name.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/33-mack-0-6-0-activerecord-dependency" target="_blank">#33</a>] mack-active_record now requires ActiveRecord 2.0.2 explicitly, not &gt;=2.0.2</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/31-support-for-ruby-debug" target="_blank">#31</a>] Added support for ruby-debug.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/26-log-coloring-in-console" target="_blank">#26</a>] Log Coloring for console output.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/24-mailer-support" target="_blank">#24</a>] Added mack-notifier support.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/18-page-caching" target="_blank">#18</a>] Added Page caching.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/14-fixtures-like-thing" target="_blank">#14</a>] Data Factory</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/7-hookable">#7</a>] Added support for Extlib::Hook in a few places.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/6-rjs" target="_blank">#6</a>] RJS support</li>
	<li>Added a rake tmp:clear task.</li>
	<li>gem: application_configuration 1.5.1</li>
	<li>gem: ruby-debug 0.10.0</li>
	<li>gem: data_mapper 0.9.3</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2008-08-04 12:35:26</wp:post_date>
		<wp:post_date_gmt>2008-08-04 17:35:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-061</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="caching"><![CDATA[caching]]></category>
		<category domain="post_tag" nicename="data-factory"><![CDATA[data factory]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="email"><![CDATA[email]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="logging"><![CDATA[logging]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rjs"><![CDATA[rjs]]></category>
		<category domain="post_tag" nicename="ruby-debug"><![CDATA[ruby-debug]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[Recent Links Tagged With "l10n" - JabberTags]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.jabbertags.com/popular/l10n</wp:comment_author_url>
			<wp:comment_author_IP>67.228.47.154</wp:comment_author_IP>
			<wp:comment_date>2008-12-17 22:49:19</wp:comment_date>
			<wp:comment_date_gmt>2008-12-18 03:49:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] public links &gt;&gt; l10n   Release 0.6.1.1 Saved by darshak on Tue 02-12-2008   i18n and l10n on r9r 2.2 Saved by heartslessqueen on Wed [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>189</wp:comment_id>
			<wp:comment_author><![CDATA[Recent Faves Tagged With "rjs" : MyNetFaves]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mynetfaves.com/tags/rjs</wp:comment_author_url>
			<wp:comment_author_IP>67.228.47.154</wp:comment_author_IP>
			<wp:comment_date>2009-05-15 11:20:17</wp:comment_date>
			<wp:comment_date_gmt>2009-05-15 16:20:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] public links &gt;&gt; rjs    Release 0.6.1.1 First saved by kagomebabygirl | 7 days ago      NDR Info - Nachtclub am 15. August 2008 First saved [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Preview (0.7.0): Building Distributed Application w/ Mack (Screencast!)</title>
		<link>http://www.metabates.com/2008/08/18/preview-070-building-distributed-application-w-mack-screencast/</link>
		<pubDate>Tue, 19 Aug 2008 04:06:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=133</guid>
		<description></description>
		<content:encoded><![CDATA[On Monday, August 25th, Mack 0.7.0 will be released. This is an extremely important release for Mack. Why is that you ask? Good question. Well, this is release that finally brings the much talked about distributed feature set to Mack. Distributed routes have been around for quite some time, but distributed views/layouts and distributed objects (models) have been missing. Well, in less than a week, you'll have them!

Now I know that you're just as excited about what's coming as I am, that's why I've prepared the first ever Mack screencast to demostrate these features. The screencast is a little rough around the edges, but it gets the ideas across.Â 

As always I'll post more about the 0.7.0 as the release date nears. In the meantime enjoy the screencast:

<a href="http://screencasts.mackframework.com/Mack%20Distributed%20Demo.mov">The Mack Distributed Demo Screencast</a>

Here's the <a href="http://screencasts.mackframework.com/distributed_demo_source.zip" target="_blank">source</a> code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date>2008-08-18 23:06:17</wp:post_date>
		<wp:post_date_gmt>2008-08-19 04:06:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>preview-070-building-distributed-application-w-mack-screencast</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="070"><![CDATA[0.7.0]]></category>
		<category domain="post_tag" nicename="distributed-objects"><![CDATA[distributed objects]]></category>
		<category domain="post_tag" nicename="distributed-routes"><![CDATA[distributed routes]]></category>
		<category domain="post_tag" nicename="distributed-viewslayouts"><![CDATA[distributed views/layouts]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="screencast"><![CDATA[screencast]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://screencasts.mackframework.com/Mack%20Distributed%20Demo.mov
71916306
video/quicktime
]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>105</wp:comment_id>
			<wp:comment_author><![CDATA[Ben Burkert]]></wp:comment_author>
			<wp:comment_author_email>ben@benburkert.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.113.212.86</wp:comment_author_IP>
			<wp:comment_date>2008-08-19 22:36:36</wp:comment_date>
			<wp:comment_date_gmt>2008-08-20 03:36:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congrats to Mark and the rest of the Mack team!  Mack is shaping up to be one helluva framework.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>106</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>96.252.48.194</wp:comment_author_IP>
			<wp:comment_date>2008-08-20 07:12:29</wp:comment_date>
			<wp:comment_date_gmt>2008-08-20 12:12:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Ben. We're getting there.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Release 0.7.0</title>
		<link>http://www.metabates.com/2008/08/25/release-070/</link>
		<pubDate>Mon, 25 Aug 2008 16:13:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[I know that with every release I say something like, "This is a big release", but the fact of the matter is this is a big release. Amongst the 49 tickets that make up release 0.7.0, there are two in particular that are at the core of Mack's very existence, they are Distributed Objects and Distributed Views/Layouts.

Back on March 26th Mack 0.4.0 was released. This release brought the first of three large distributed features, Distributed Routes. With 0.7.0 Mack fully realizes it's goal of making it easy to write fully distributed web applications.&nbsp;There is a very nice wiki page, on our new wiki, that shows in detail how to use the new distributed features. That page can found&nbsp;<a href="http://www.mackwiki.com/using_the_mack-distributed_gem" target="_blank">here</a>. Also, don't forget to watch the screencast of the new distributed features that can be found <a href="http://screencasts.mackframework.com/Mack%20Distributed%20Demo.mov" target="_blank">here</a>.
<h3>Distributed Objects</h3>
Distributed objects allow you to easily distribute access to your library and model code amongst any of your other Mack applications. Allowing this access is as simple as requiring the mack-distributed gem, adding a few lines to your configuration, and starting the mack_ring_server binary. 'Client' applications just need to require the mack-distributed gem.
<h3>Distributed Views/Layouts</h3>
With distributed views and layouts you can now share the look and feel from one application with all of your applications. Configuration and use is just as easy using distributed objects.
<h3>Form and HTML Helpers</h3>
People have been requesting more HTML and form helper methods, and we're more than happy to comply. There are whole bunch of these new methods now to help you more easily build your applications. The generators have been updated to use these new methods, to make your job even easier. There is also now support for doing Date/Time drop downs, similar to Rails and Merb.
<h3>'Tell' Messaging</h3>
Rails folks know 'tell' messaging as 'flash' messaging and Merb folks know it as 'message' messaging. We went with 'tell'. Tell messages are cleared after any non-redirect request. They're a great way to send a simple message down to the client.
<h3>New Wiki</h3>
With this release there is also a new wiki at, <a href="http://www.mackwiki.com" target="_blank">http://www.mackwiki.com</a>. This new wiki, incidentally built using Mack 0.7.0, will house all the tutorials and how-to's for Mack. There are a few entries from the old wiki that still need to brought over during the next day or two.

Changelog:
<ul>
	<li><a href="http://mack.lighthouseapp.com/projects/11385/tickets/114-add-javascript-link_helper" target="_blank">[#114</a>] Javascript link_helper</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/112-error-generating-mack-application" target="_blank">#112</a>] Error generating mack application</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/109-update-to-datamapper-0-9-4" target="_blank">#109</a>] DataMapper 0.9.4</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/103-log-colors-for-console-output-should-be-configurable-by-level" target="_blank">#103</a>] Log colors for the console are now configurable per log level.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/102-define-association-method-in-data-factory" target="_blank">#102</a>] New association method in data_factory</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/101-update-file-upload-testing" target="_blank">#101</a>] Update to file upload testing (build_file -&gt; file_for_upload, and multipart support in put)</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/100-inline-routing-parameters-are-being-mutated" target="_blank">#100</a>] Inline routing parameters are being mutated</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/99-facets-2-4-3-support" target="_blank">#99</a>] Upgraded to facets 2.4.3</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/98-facets-don-t-seem-to-be-loaded-when-reading-app_config-files" target="_blank">#98</a>] Fixed mack-facets not being loaded before app_config files.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/97-sessions-only-work-with-local_memory-mode" target="_blank">#97</a>] Fixed sessions only working with 'local_memory' mode</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/96-need-to-cache-distributed-view-files" target="_blank">#96</a>] Distributed Views module now uses file cache</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/92-remove-deprecated-orm-code-from-mack" target="_blank">#92</a>] Removed deprecated app_config.orm code.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/91-if-gems-rb-doesn-t-exist-mack-blows-up" target="_blank">#91</a>] Fixed Mack blowing up if there is no config/initializers/gems.rb file.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/90-add-deprecation-system" target="_blank">#90</a>] Added deprecation system.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/89-gems-tasks-don-t-work" target="_blank">#89</a>] rake gems:* will now only display warning if any gem required is not installed (and not break)</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/88-sqlite3-tests-in-mack-active_record" target="_blank">#88</a>] Implemented pending SQLite3 tests in mack-activerecord</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/87-refactor-common-orm-code-into-mack-orm-gem" target="_blank">#87</a>] Refactored out common ORM code from mack-active_record and mack-data_mapper into mack-orm</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/86-add-stylesheet-link-helper" target="_blank">#86</a>] stylesheet link helper</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/85-mack-viewhelpers-htmlhelpers-needs-to-be-refactored" target="_blank">#85</a>] Refactored out Mack::ViewHelpers::HtmlHelpers into Mack::ViewHelpers::HtmlHelpers, Mack::ViewHelpers::FormHelpers and&nbsp;Mack::ViewHelpers::linkHelpers</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/84-there-needs-to-be-a-way-to-lookup-a-specific-distributed-service" target="_blank">#84</a>] Added Mack::Distributed.lookup(url) to retrieve specific distributed services.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/83-mail_to-helper-needed" target="_blank">#83</a>] Added mail_to HTML helper.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/82-mack-distributed-needs-an-acl" target="_blank">#82</a>] Added ACL support to mack-distributed</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/81-session-s-don-t-carry-across-a-redirect-in-testing" target="_blank">#81</a>] Fixed sessions working with redirects in testing</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/80-original-object-s-inspect-should-be-added-to-the-distributed-proxy-object-s-inspect" target="_blank">#80</a>] Distributed objects present both the DRb::DRbObject inspect and the original object's inspect when asked.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/79-rename-use_distributed_routes-config" target="_blank">#79</a>] Renamed app_config.mack.use_distributed_routes to app_config.mack.share_routes</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/76-move-mack_ring_server-to-mack-distributed" target="_blank">#76</a>] Move mack_ring_server to mack-distributed</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/75-there-are-still-distributed-rake-tasks-in-mack-core" target="_blank">#75</a>] Left over mack-distributed rake tasks</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/74-optional-disable-initialization-logging" target="_blank">#74</a>] Added optional feature to disable initialization logging.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/73-tests-should-no-longer-use-functional-unit-folders" target="_blank">#73</a>] Tests no longer use the functional/unit directories</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/69-generators-for-view-helpers-and-controller-helpers" target="_blank">#69</a>] Added ViewHelperGenerator and ControllerHelperGenerator</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/68-transactional-support-in-mack-activerecord" target="_blank">#68</a>] Transactional support in mack-AR</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/67-proper-test-setup-tasks-for-datamapper-and-activerecord" target="_blank">#67</a>] Added test:setup tasks for active_record and data_mapper</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/62-remove-l10n-warnings" target="_blank">#62</a>] Removed const redefined warnings if mack-l10n is used along with mack-activerecord</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/39-haml-2-x-support" target="_blank">#39</a>] HAML 2.0.2 support</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/28-refactor-out-encryption-code" target="_blank">#28</a>] Refactored out encryption into the mack-encryption gem.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/25-simple-controller-generator" target="_blank">#25</a>] Added ControllerGenerator</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/19-more-html-helpers" target="_blank">#19</a>] Added HTML form helpers</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/15-file-upload-testing" target="_blank">#15</a>] File upload testing support (ability to do multipart form post in testing)</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/11-distributed-views-layouts" target="_blank">#11</a>] Distributed Layout/Views</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/10-distributed-models" target="_blank">#10</a>] Added distributed objects to mack-distributed.</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/8-refactor-out-distributed-code" target="_blank">#8</a>]  Move distributed code from mack-core to mack-more</li>
	<li>[<a href="http://mack.lighthouseapp.com/projects/11385/tickets/5-flash-messaging" target="_blank">#5</a>] Added tell messaging</li>
	<li>gem: genosaurus 1.2.2</li>
	<li>gem: haml 2.0.2</li>
	<li>gem: addressable 1.0.4</li>
	<li>gem: facets 2.4.3</li>
	<li>gem: data_mapper 0.9.4</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2008-08-25 11:13:53</wp:post_date>
		<wp:post_date_gmt>2008-08-25 16:13:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-070</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="addressable"><![CDATA[addressable]]></category>
		<category domain="post_tag" nicename="data-factory"><![CDATA[data factory]]></category>
		<category domain="post_tag" nicename="data_mapper"><![CDATA[data_mapper]]></category>
		<category domain="post_tag" nicename="distributed-objects"><![CDATA[distributed objects]]></category>
		<category domain="post_tag" nicename="distributed-routes"><![CDATA[distributed routes]]></category>
		<category domain="post_tag" nicename="distributed-viewslayouts"><![CDATA[distributed views/layouts]]></category>
		<category domain="post_tag" nicename="facets"><![CDATA[facets]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="genosaurus"><![CDATA[genosaurus]]></category>
		<category domain="post_tag" nicename="haml"><![CDATA[haml]]></category>
		<category domain="post_tag" nicename="helpers"><![CDATA[helpers]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="merb"><![CDATA[merb]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<category domain="post_tag" nicename="tell-messaging"><![CDATA[tell messaging]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[wiki]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://screencasts.mackframework.com/Mack%20Distributed%20Demo.mov
71917914
video/quicktime
]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>107</wp:comment_id>
			<wp:comment_author><![CDATA[Mack 0.7.0: A Significant Update to A Powerful Ruby Web App Framework for Distributed Apps]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.rubyinside.com/mack-distributed-ruby-web-application-framework-releases-070-1107.html</wp:comment_author_url>
			<wp:comment_author_IP>74.86.154.106</wp:comment_author_IP>
			<wp:comment_date>2008-08-25 21:29:41</wp:comment_date>
			<wp:comment_date_gmt>2008-08-26 02:29:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] developed by a team led by Mark Bates, has continued to grow over the past several months and today announced a significant release, Mack [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[A Fresh Cup &raquo; Blog Archive &raquo; Double Shot #277]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://afreshcup.com/?p=929</wp:comment_author_url>
			<wp:comment_author_IP>63.151.205.249</wp:comment_author_IP>
			<wp:comment_date>2008-08-26 06:09:23</wp:comment_date>
			<wp:comment_date_gmt>2008-08-26 11:09:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Mack 0.7.0 - Another of the Ruby web frameworks marches along. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>132</wp:comment_id>
			<wp:comment_author><![CDATA[Recent Faves Tagged With "acl" : MyNetFaves]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mynetfaves.com/tags/acl</wp:comment_author_url>
			<wp:comment_author_IP>67.228.47.154</wp:comment_author_IP>
			<wp:comment_date>2008-09-09 15:52:38</wp:comment_date>
			<wp:comment_date_gmt>2008-09-09 20:52:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] public links &gt;&gt; acl    Release 0.7.0 First saved by jschinker | 1 days ago      A Few National Notes First saved by time | 8 days ago    [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>141</wp:comment_id>
			<wp:comment_author><![CDATA[Nikos Dimitrakopoulos]]></wp:comment_author>
			<wp:comment_author_email>nospam@nikosd.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.nikosd.com</wp:comment_author_url>
			<wp:comment_author_IP>91.132.99.165</wp:comment_author_IP>
			<wp:comment_date>2008-09-22 02:07:21</wp:comment_date>
			<wp:comment_date_gmt>2008-09-22 07:07:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just read the wiki pages and saw the screencast and I must say that this distributed feature looks reaaally interesting and promising! My only question is, can this work over network or only at the localhost? I haven't found the time to go through the source code yet but in the documentation there is nothing mentioned about this.

Keep it up! I will be watching this project closely! (and possibly write a simple app soon to test it :) )]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>142</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>96.252.48.194</wp:comment_author_IP>
			<wp:comment_date>2008-09-22 07:19:38</wp:comment_date>
			<wp:comment_date_gmt>2008-09-22 12:19:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["My only question is, can this work over network or only at the localhost?"

Because under the cover the mack-distributed package uses Rinda/DRb it can be used over a local network no problem. It can't be used over the internet (ie. an open network). So if you can do it with Rinda/DRb you can do it with mack-distributed. :) And because it's Rinda/DRb you can also setup an ACL for extra security.

I hope that helps.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>143</wp:comment_id>
			<wp:comment_author><![CDATA[Nikos Dimitrakopoulos]]></wp:comment_author>
			<wp:comment_author_email>nospam@nikosd.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.nikosd.com</wp:comment_author_url>
			<wp:comment_author_IP>91.132.99.165</wp:comment_author_IP>
			<wp:comment_date>2008-10-01 14:58:02</wp:comment_date>
			<wp:comment_date_gmt>2008-10-01 19:58:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting... I took a look in rinda's and Drb's documentation and I think I got a main idea of how this thing works :)

Even though I have come to *not* like *that* much distributed objects (at least when it's not necessary to implement a system this way) this (mack's support for distributed objects) can be useful.

P.S.: The reason I don't really like distributed solutions is that the API of such systems tends to become hard to change when other applications depend on it which means that there is a greater possibility of getting stuck with legacy code...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>190</wp:comment_id>
			<wp:comment_author><![CDATA[Recent Links Tagged With "stylesheet" - JabberTags]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.jabbertags.com/popular/stylesheet</wp:comment_author_url>
			<wp:comment_author_IP>67.228.47.154</wp:comment_author_IP>
			<wp:comment_date>2009-05-20 08:19:28</wp:comment_date>
			<wp:comment_date_gmt>2009-05-20 13:19:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 12-5-2009   Import Other Stylesheets from within a Stylesheet Saved by blinks on Fri 08-5-2009   Release 0.7.0 Saved by webhostingtop on Mon 04-5-2009   Reference a style in my stylesheet Saved by bradder on [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Mack Article/Interview on RubyInside</title>
		<link>http://www.metabates.com/2008/08/26/mack-articleinterview-on-rubyinside/</link>
		<pubDate>Tue, 26 Aug 2008 14:58:06 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[Peter Cooper just posted a very nice article about Mack, which features an interview with me, Mark Bates, over on Ruby Inside. Please check it out:

<a href="http://www.rubyinside.com/mack-distributed-ruby-web-application-framework-releases-070-1107.html" target="_blank">http://www.rubyinside.com/mack-distributed-ruby-web-application-framework-releases-070-1107.htmlÂ </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2008-08-26 09:58:06</wp:post_date>
		<wp:post_date_gmt>2008-08-26 14:58:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-articleinterview-on-rubyinside</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="peter-cooper"><![CDATA[peter cooper]]></category>
		<category domain="category" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="ruby-inside"><![CDATA[ruby inside]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mack w/ Apache and mod_rails</title>
		<link>http://www.metabates.com/2008/08/26/mack-w-apache-and-mod_rails/</link>
		<pubDate>Wed, 27 Aug 2008 00:46:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=149</guid>
		<description></description>
		<content:encoded><![CDATA[Thanks to Mack user, Diogo Almeida, there's a great write up on the wiki on how to configure Apache using mod_rails to host a Mack app. Â Thanks Diogo.

<a href="http://www.mackwiki.com/using_passenger_phusion_to_host_a_mack_application" target="_self">http://www.mackwiki.com/using_passenger_phusion_to_host_a_mack_application</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date>2008-08-26 19:46:44</wp:post_date>
		<wp:post_date_gmt>2008-08-27 00:46:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-w-apache-and-mod_rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
		<category domain="post_tag" nicename="diogo-almeida"><![CDATA[diogo almeida]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="mod_rails"><![CDATA[mod_rails]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="passenger"><![CDATA[passenger]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>118</wp:comment_id>
			<wp:comment_author><![CDATA[DeLynn Berry]]></wp:comment_author>
			<wp:comment_author_email>delynn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.71.23.138</wp:comment_author_IP>
			<wp:comment_date>2008-08-31 15:04:10</wp:comment_date>
			<wp:comment_date_gmt>2008-08-31 20:04:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In addition to the steps detailed in the wikie page, I also had to add a config.ru file at the root of my Mack application. I copied the following from the mod_rails documentation site:

ENV["MACK_ENV"] = ENV["RACK_ENV"]
load("Rakefile")
require 'rubygems'
require 'mack'
run Mack::Utils::Server.build_app]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>122</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>96.252.48.194</wp:comment_author_IP>
			<wp:comment_date>2008-09-01 16:22:54</wp:comment_date>
			<wp:comment_date_gmt>2008-09-01 21:22:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks DeLynn, obviously I forgot to put that in the wiki. My bad. Oops. I'll add it now. In Edge Mack there's a Passenger generator that will generate the config.ru file for you:

$ rake generate:passenger]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>123</wp:comment_id>
			<wp:comment_author><![CDATA[DeLynn Berry]]></wp:comment_author>
			<wp:comment_author_email>delynn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.125.146.33</wp:comment_author_IP>
			<wp:comment_date>2008-09-02 11:20:31</wp:comment_date>
			<wp:comment_date_gmt>2008-09-02 16:20:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I actually saw that generator in edge this weekend, just forgot to come back here an comment about it. :-)

I really enjoyed playing with Mack this weekend. Hopefully I can contribute further once I get more familiar with the project. Keep up the great work!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Patch Releases 0.7.0.1 and 0.6.1.2</title>
		<link>http://www.metabates.com/2008/08/29/patch-releases-0701-and-0612/</link>
		<pubDate>Fri, 29 Aug 2008 15:48:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=151</guid>
		<description></description>
		<content:encoded><![CDATA[Today two patches to Mack have been released, 0.7.0.1 and 0.6.1.2. They upgrade the version of application_configuration and are highly recommended. There was a bug with application_configuration that could cause it to stop loading configuration settings, which obviously, would be bad. :) Please update your version of Mack accordingly.&nbsp;

As a side note, Mack will be moving away from application_configuration to configatron around version 0.8.0, but more on that later.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date>2008-08-29 10:48:57</wp:post_date>
		<wp:post_date_gmt>2008-08-29 15:48:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>patch-releases-0701-and-0612</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="application_configuration"><![CDATA[application_configuration]]></category>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configatron 1.0.0 Released!</title>
		<link>http://www.metabates.com/2008/08/29/configatron-100-released/</link>
		<pubDate>Fri, 29 Aug 2008 16:02:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=153</guid>
		<description></description>
		<content:encoded><![CDATA[Configatron makes configuring your applications and scripts incredibly easy. No longer is a there a need to use constants or global variables. Now you can use a simple and painless system to configure your life. And, because it's all Ruby, you can do any crazy thing you would like to! <a href="http://configatron.mackframework.com/">API</a>

<em>Note: Configatron is a general purpose library, that can be used in ANY Ruby application or script, it's not Mack specific. So go on and configure to your hearts content. :)</em>
<pre>$ sudo gem install configatron</pre>
<h2>Examples</h2>
<h3>Simple</h3>
<script src="http://gist.github.com/7986.js"></script>

Now, anywhere in your code you can do the following:

<script src="http://gist.github.com/7987.js"></script>

Viola! Simple as can be.

Now you're saying, what if I want to have a 'default' set of options, but then override them later, based on other information? Simple again. Let's use our above example. We've configured our 'database_url' option to be "postgres://localhost/mack_framework_rocks". The problem with that is that is our production database url, not our development url. Fair enough, all you have to do is redeclare it:

<script src="http://gist.github.com/7988.js"></script>

becomes:

<script src="http://gist.github.com/7989.js"></script>

Notice how our other configuration parameters haven't changed? Cool, eh?
<h3>Namespaces</h3>
The question that should be on your lips is what I need to have namespaced configuration parameters. It's easy! Configatron allows you to create namespaces.

<script src="http://gist.github.com/7990.js"></script>

becomes:

<script src="http://gist.github.com/7992.js"></script>

Configatron allows you to nest namespaces to your hearts content! Just keep going, it's that easy.

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2008-08-29 11:02:44</wp:post_date>
		<wp:post_date_gmt>2008-08-29 16:02:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configatron-100-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>109</wp:comment_id>
			<wp:comment_author><![CDATA[Sebastian]]></wp:comment_author>
			<wp:comment_author_email>swittenkamp@cafepress.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.51.212.254</wp:comment_author_IP>
			<wp:comment_date>2008-08-29 12:32:06</wp:comment_date>
			<wp:comment_date_gmt>2008-08-29 17:32:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So - this looks cool, but my question is: what is the output from your examples? Is this a Mack-specific thing?

I actually have a great use for this at work if it's a standalone thing. Could I use Configatron to key off a template, or use it in some kind of templating scenario?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>110</wp:comment_id>
			<wp:comment_author><![CDATA[Robin Kaarsgaard]]></wp:comment_author>
			<wp:comment_author_email>blodmangel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>217.116.239.3</wp:comment_author_IP>
			<wp:comment_date>2008-08-29 16:36:27</wp:comment_date>
			<wp:comment_date_gmt>2008-08-29 21:36:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice initiative! It all looks quite clean and elegant, and the idea of a universal configuration system is really cool! Bravo!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>111</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>96.252.48.194</wp:comment_author_IP>
			<wp:comment_date>2008-08-29 18:11:41</wp:comment_date>
			<wp:comment_date_gmt>2008-08-29 23:11:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's completely separate from Mack. As of right now it's not even being used by Mack, but it will be in a couple of releases. Changing out a configuration system is a big deal in a framework, so I'm waiting for a major release to do it. It's actually be extracted from another project entirely. 

To use it just require 'rubygems' and then require 'configatron' and you'll be all set!

Enjoy!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>96.252.48.194</wp:comment_author_IP>
			<wp:comment_date>2008-08-29 18:20:43</wp:comment_date>
			<wp:comment_date_gmt>2008-08-29 23:20:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also, Sebestian, not sure what you're templating needs are, but have you checked out Genosaurus? http://genosaurus-api.mackframework.com/ It's a simple and easy to generator system. Not sure if that helps, but I figured I would throw it out there. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>113</wp:comment_id>
			<wp:comment_author><![CDATA[George Anderson]]></wp:comment_author>
			<wp:comment_author_email>george@benevolentcode.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.81.247.17</wp:comment_author_IP>
			<wp:comment_date>2008-08-29 20:39:30</wp:comment_date>
			<wp:comment_date_gmt>2008-08-30 01:39:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; sudo gem install configatron

if that's not obvious.

And thanks for sharing your code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>114</wp:comment_id>
			<wp:comment_author><![CDATA[Luke Redpath]]></wp:comment_author>
			<wp:comment_author_email>contact@lukeredpath.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.194.223.67</wp:comment_author_IP>
			<wp:comment_date>2008-08-30 08:34:17</wp:comment_date>
			<wp:comment_date_gmt>2008-08-30 13:34:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you looked at SimpleConfig? It already seems to do what configatron does, although it is distributed as a Rails plugin:

http://github.com/lukeredpath/simpleconfig/tree/master]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>115</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>96.252.48.194</wp:comment_author_IP>
			<wp:comment_date>2008-08-30 09:09:50</wp:comment_date>
			<wp:comment_date_gmt>2008-08-30 14:09:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[SimpleConfig looks nice, but it definitely has a few differences from Configatron. The first big difference is that SimpleConfig is limited to use with Rails. Configatron can be used with any framework, any application, and any script. Configatron also seems a bit easier to use. There are no mixins needed to use it. The configatron method lives in Kernel, which means it's available everywhere, no 'configuration' needed. :) Different strokes, eh? There are a few other configuration systems out there, I always encourage people to check out the options before they decide on a piece of software to use.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>116</wp:comment_id>
			<wp:comment_author><![CDATA[Soleone]]></wp:comment_author>
			<wp:comment_author_email>soleone@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.230.101.39</wp:comment_author_IP>
			<wp:comment_date>2008-08-30 19:38:52</wp:comment_date>
			<wp:comment_date_gmt>2008-08-31 00:38:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Haha, just today I was thinking of inventing a library that does something like this myself. Great work, love the simplicity!

Would be cool though if it also worked with yaml files, and if you could configure it to use another word than 'configatron'.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>117</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>96.252.48.194</wp:comment_author_IP>
			<wp:comment_date>2008-08-30 22:09:27</wp:comment_date>
			<wp:comment_date_gmt>2008-08-31 03:09:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've been meaning to add a configure_from_yaml file method to it, I'll see if I can get to it this week. There's a configure_from_hash method you could use in the meantime. If you don't like the method name configatron, you can easily just alias it off to something else. I used it because I felt pretty confident that no one else would be using that name in their apps. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>119</wp:comment_id>
			<wp:comment_author><![CDATA[Soleone]]></wp:comment_author>
			<wp:comment_author_email>soleone@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.138.7.29</wp:comment_author_IP>
			<wp:comment_date>2008-08-31 22:20:33</wp:comment_date>
			<wp:comment_date_gmt>2008-09-01 03:20:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Allright, haven't thought about aliasing. Thanks for the hint, works great! I will definitely use this in future projects, especially with the yaml support coming ;) Because I want end users of my config file only to see the bare minimum (which means possibly no ruby code block)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>120</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>96.252.48.194</wp:comment_author_IP>
			<wp:comment_date>2008-08-31 22:35:54</wp:comment_date>
			<wp:comment_date_gmt>2008-09-01 03:35:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Soleone, glad you like it, I do too. :) In the meantime, before YAML support comes along, hopefully this week, maybe next, you can use the configure_from_hash method, just pass it YAML.load('/path/to/file.yml'), and it should work just fine.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>121</wp:comment_id>
			<wp:comment_author><![CDATA[A Fresh Cup &raquo; Blog Archive &raquo; Double Shot #281]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://afreshcup.com/?p=933</wp:comment_author_url>
			<wp:comment_author_IP>63.151.205.249</wp:comment_author_IP>
			<wp:comment_date>2008-09-01 06:38:04</wp:comment_date>
			<wp:comment_date_gmt>2008-09-01 11:38:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Configatron 1.0.0 Released - General-purpose manager for configuration variables in Ruby applications. (via RubyFlow) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>125</wp:comment_id>
			<wp:comment_author><![CDATA[Diego Algorta]]></wp:comment_author>
			<wp:comment_author_email>diego@oboxodo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.oboxodo.com</wp:comment_author_url>
			<wp:comment_author_IP>190.135.132.125</wp:comment_author_IP>
			<wp:comment_date>2008-09-04 10:15:43</wp:comment_date>
			<wp:comment_date_gmt>2008-09-04 15:15:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you seen Mhash?

It's not exactly a configuration framework... but looking at configatron reminded me about Mhash. I see similarities. And maybe, I'd like configatron to get rid of the explicit namespace creation. Maybe you'd like to consider using Mhash as the underlying object behind configatron?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>126</wp:comment_id>
			<wp:comment_author><![CDATA[Diego Algorta]]></wp:comment_author>
			<wp:comment_author_email>diego@oboxodo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.oboxodo.com</wp:comment_author_url>
			<wp:comment_author_IP>190.135.132.125</wp:comment_author_IP>
			<wp:comment_date>2008-09-04 10:16:05</wp:comment_date>
			<wp:comment_date_gmt>2008-09-04 15:16:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Forgot to include the link:
http://www.intridea.com/2008/4/13/mash-mocking-hash-for-total-poser-objects]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>127</wp:comment_id>
			<wp:comment_author><![CDATA[Configatron 1.1.0 Released &#8212; Mack Framework]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mackframework.com/2008/09/04/configatron-110-released/</wp:comment_author_url>
			<wp:comment_author_IP>208.113.181.17</wp:comment_author_IP>
			<wp:comment_date>2008-09-04 12:54:54</wp:comment_date>
			<wp:comment_date_gmt>2008-09-04 17:54:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the heels of last week&#8217;s successful release of Configatron 1.0.0 comes version 1.1.0. The big addition, feature wise, to 1.1.0 is the ability [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>128</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>74.92.43.9</wp:comment_author_IP>
			<wp:comment_date>2008-09-04 12:59:24</wp:comment_date>
			<wp:comment_date_gmt>2008-09-04 17:59:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Diego, I'll check it out. It might be a better way of storing stuff under the covers. Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Mack Sake Tasks</title>
		<link>http://www.metabates.com/2008/08/31/mack-sake-tasks/</link>
		<pubDate>Mon, 01 Sep 2008 02:36:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[Thanks to Mack user,Â DeLynn Berry, for writing up some great Sake tasks! Now getting up and running with Mack development is even easier. Thanks DeLynn!

All you need to do is install <a href="http://errtheblog.com/posts/60-sake-bomb" target="_blank">Sake</a>.

Once Sake is installed you can install the Mack sake tasks like so:
<pre>sake -i http://www.mackframework.com/mack-dev.sake</pre>
You can see a full list of tasks with the following command:
<pre>sake -T</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date>2008-08-31 21:36:57</wp:post_date>
		<wp:post_date_gmt>2008-09-01 02:36:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-sake-tasks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="delynn-berry"><![CDATA[delynn berry]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="sake"><![CDATA[sake]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>124</wp:comment_id>
			<wp:comment_author><![CDATA[Pages tagged "sake bomb"]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.blogbookmarker.com/tags/sake-bomb</wp:comment_author_url>
			<wp:comment_author_IP>67.228.47.154</wp:comment_author_IP>
			<wp:comment_date>2008-09-03 06:03:44</wp:comment_date>
			<wp:comment_date_gmt>2008-09-03 11:03:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] bookmarks tagged sake bomb Mack Sake Tasks&nbsp;saved by 2 others  &nbsp;&nbsp;&nbsp;&nbsp;sailorvictory bookmarked on 09/03/08 | [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>173</wp:comment_id>
			<wp:comment_author><![CDATA[Recent Faves Tagged With "tasks" : MyNetFaves]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mynetfaves.com/tags/tasks</wp:comment_author_url>
			<wp:comment_author_IP>67.228.47.154</wp:comment_author_IP>
			<wp:comment_date>2009-01-19 08:50:17</wp:comment_date>
			<wp:comment_date_gmt>2009-01-19 13:50:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] links &gt;&gt; tasks    Reversing the Multitasking Impulse First saved by delargerock | 0 days ago      Mack Sake Tasks First saved by lmorroni | 12 days ago      Google Chrome First saved by pgsandrade | 17 days ago    [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Configatron 1.1.0 Released</title>
		<link>http://www.metabates.com/2008/09/04/configatron-110-released/</link>
		<pubDate>Thu, 04 Sep 2008 17:54:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[On the heels of last week's successful <a href="http://www.mackframework.com/2008/08/29/configatron-100-released/">release</a> of Configatron 1.0.0 comes version 1.1.0. The big addition, feature wise, to 1.1.0 is the ability to now load configurations from a YAML file.
<pre>configatron.configure_from_yaml('/path/to/file.yml')</pre>
When reload is called on configatron any YAML files will be read back in from disk, allowing you to change your configurations and reload them.

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date>2008-09-04 12:54:50</wp:post_date>
		<wp:post_date_gmt>2008-09-04 17:54:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configatron-110-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<category domain="post_tag" nicename="yaml"><![CDATA[yaml]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>130</wp:comment_id>
			<wp:comment_author><![CDATA[seydar]]></wp:comment_author>
			<wp:comment_author_email>seyder@rubini.us</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.69.131.136</wp:comment_author_IP>
			<wp:comment_date>2008-09-04 16:36:17</wp:comment_date>
			<wp:comment_date_gmt>2008-09-04 21:36:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[mr. bates, you always deliver useful software. Seriously, everything you have made has been brain-dead simple (except for one, which will go unnamed).

Keep it up]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Mack 0.7.0 featured on this week&#039;s RailsEnvy podcast</title>
		<link>http://www.metabates.com/2008/09/04/mack-070-featured-on-this-weeks-railsenvy-podcast/</link>
		<pubDate>Thu, 04 Sep 2008 18:10:36 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[The release of Mack 0.7.0 was featured as the lead story this week in the railsenvy.com podcast. They guys had great things to say about Mack, have a listen:

<a href="http://www.railsenvy.com/2008/9/3/rails-envy-podcast-episode-045-09-03-2008" target="_blank">http://www.railsenvy.com/2008/9/3/rails-envy-podcast-episode-045-09-03-2008</a>

As always, if you don't subscribe to the podcast, you definitely should. It's one of the best ones around.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date>2008-09-04 13:10:36</wp:post_date>
		<wp:post_date_gmt>2008-09-04 18:10:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-070-featured-on-this-weeks-railsenvy-podcast</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="podcast"><![CDATA[podcast]]></category>
		<category domain="category" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="rails-envy"><![CDATA[rails envy]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>129</wp:comment_id>
			<wp:comment_author><![CDATA[Gregg Pollack]]></wp:comment_author>
			<wp:comment_author_email>Gregg@RailsEnvy.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.RailsEnvy.com</wp:comment_author_url>
			<wp:comment_author_IP>24.173.78.62</wp:comment_author_IP>
			<wp:comment_date>2008-09-04 15:29:44</wp:comment_date>
			<wp:comment_date_gmt>2008-09-04 20:29:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the link love, keep up the great work!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Release 0.7.1</title>
		<link>http://www.metabates.com/2008/09/08/release-071/</link>
		<pubDate>Mon, 08 Sep 2008 15:15:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=167</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

Although not as sexy a release as 0.7.0, there are some very important bug fixes and some cool new little features in this release. Rack has been upgraded to v0.4.0. DataMapper to 0.9.5. Facets to 2.4.4, and a few other gems as well.

There is now a much nicer session store API that will allow developers to build their own session stores. There's also a couple of new session stores that ship with 0.7.1. There's a DataMapper session store, and a cookie session store, which is now the default session store. The previous Cachetastic based session store can be used by requiring the mack-caching gem in gems.rb and putting the following setting in your app_config/*.yml file:
<pre>mack::session_store: cachetastic</pre>
There is now built-in support to help prevent cross-site scripting attacks on forms.&nbsp;Some view helper methods have nice updates such as :disable_with and :confirm, and asset hosts.

And a whole host of other little improvements across the board. Enjoy!

Changelog:
<ul>
	<li>[#153] Emails with just a single 'part' are now being sent correctly.</li>
	<li>[#147] Added :confirm to button helpers.</li>
	<li>[#146] [Diogo Almeida] Added :disable_with to submit_button form helper.</li>
	<li>[#145] Added rake generate:&lt;generator_name&gt;:desc task to 'describe' a Genosaurus generator</li>
	<li>[#144] INCOMPATIBILITY NOTICE: rake server is no more. Please use mackery server instead.</li>
	<li>[#142] INCOMPATIBILITY NOTICE: rake console is no more. Please use mackery console instead.</li>
	<li>[#140] Added Mack::BootLoader</li>
	<li>[#139] Added ability to change the pattern for test files</li>
	<li>[#137] Added subdomains method on request.</li>
	<li>[#130] Added ability to 'reload' the console</li>
	<li>[#129] DataMapper 0.9.5 support</li>
	<li>[#128] Updated json_pure to 1.1.3 and removed ruby-debug dependency</li>
	<li>[#127] Moved mack-paths into core</li>
	<li>[#126] XSS Prevention</li>
	<li>[#125] Cookie store is now the default session store, not cachetastic</li>
	<li>[#124] Opened up the session store API</li>
	<li>[#122] Added DataMapper session store.</li>
	<li>[#121] Cookie session store support.</li>
	<li>[#120] Added PassengerGenerator to generate the necessary files to run Mack with Passenger Phusion (mod_rails)</li>
	<li>[#118] Mack/mack-more can be loaded from vendor/framework/mack and vendor/framework/mack-more</li>
	<li>[#117] Added rake task: mack:freeze:edge</li>
	<li>[#107] Updated to Rack 0.4.0</li>
	<li>[#95] Removed deprecated model_* methods</li>
	<li>[#94] Removed deprecated submit_tag</li>
	<li>[#40] Added Mack::Utils::ContentLengthHandler so response will now have 'Content-Length' in its header.</li>
	<li>[#21] Asset Hosts</li>
	<li>gem: rack 0.4.0</li>
	<li>gem: json_pure 1.1.3</li>
	<li>gem: data_mapper 0.9.5</li>
	<li>gem: genosaurus 1.2.4</li>
	<li>gem: ezcrypto 0.7</li>
	<li>gem: facets 2.4.4</li>
</ul>
Â 

Â </div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date>2008-09-08 10:15:50</wp:post_date>
		<wp:post_date_gmt>2008-09-08 15:15:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-071</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="post_tag" nicename="cookie"><![CDATA[cookie]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="diogo-almeida"><![CDATA[diogo almeida]]></category>
		<category domain="post_tag" nicename="facets"><![CDATA[facets]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="genosaurus"><![CDATA[genosaurus]]></category>
		<category domain="post_tag" nicename="rack"><![CDATA[rack]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="session"><![CDATA[session]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[xss]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configatron 1.2.0 Released</title>
		<link>http://www.metabates.com/2008/09/08/configatron-120-released/</link>
		<pubDate>Mon, 08 Sep 2008 20:17:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[Thanks to Simon Menke for contributing a great patch to Configatron that will automatically 'namespace' your configuration settings if you use the configure_from_hash or the configure_from_yaml methods.

<script src="http://gist.github.com/9518.js"></script>
<script src="http://gist.github.com/9521.js"></script>

Both give you the same results:

<script src="http://gist.github.com/9522.js"></script>

If you get a chance visit Simon's blog at: <a href="http://5xm.org/">http://5xm.org/</a> and say hi. Thanks again Simon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date>2008-09-08 15:17:15</wp:post_date>
		<wp:post_date_gmt>2008-09-08 20:17:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configatron-120-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="hash"><![CDATA[hash]]></category>
		<category domain="post_tag" nicename="namespace"><![CDATA[namespace]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="simon-menke"><![CDATA[simon menke]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<category domain="post_tag" nicename="yaml"><![CDATA[yaml]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configatron 1.2.1 Released</title>
		<link>http://www.metabates.com/2008/09/10/configatron-121-released/</link>
		<pubDate>Wed, 10 Sep 2008 20:22:16 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=173</guid>
		<description></description>
		<content:encoded><![CDATA[Thanks to Brandon Dimcheff for contributing a patch that let's you call .to_hash on configatron to get your configuration settings out as a Hash.

Please take a moment and checkout Brandon's blog at:Â <a href="http://its.arubything.com/" target="_blank">http://its.arubything.com/</a>

Thanks again Brandon]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date>2008-09-10 15:22:16</wp:post_date>
		<wp:post_date_gmt>2008-09-10 20:22:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configatron-121-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brandon-dimcheff"><![CDATA[Brandon Dimcheff]]></category>
		<category domain="post_tag" nicename="configat"><![CDATA[configat]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>133</wp:comment_id>
			<wp:comment_author><![CDATA[Brandon Dimcheff]]></wp:comment_author>
			<wp:comment_author_email>bdimchef@wieldim.com</wp:comment_author_email>
			<wp:comment_author_url>http://its.arubything.com</wp:comment_author_url>
			<wp:comment_author_IP>91.123.97.4</wp:comment_author_IP>
			<wp:comment_date>2008-09-10 16:43:21</wp:comment_date>
			<wp:comment_date_gmt>2008-09-10 21:43:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks!  That was super quick.

- Brandon]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Mack @ RubyConf &#039;08</title>
		<link>http://www.metabates.com/2008/09/11/mack-rubyconf-08/</link>
		<pubDate>Thu, 11 Sep 2008 15:21:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=175</guid>
		<description></description>
		<content:encoded><![CDATA[Mark your calendars, on Day One, from 1.15PM - 2.00PM, in Room 2, I'll be delivering a presentation on building distributed applications.

<a href="http://www.rubyconf.org/talks/15" target="_blank">http://www.rubyconf.org/talks/15</a>
<blockquote>Building multiple applications that all need to share data and other information between can be a&nbsp;daunting and challenging task. Mark will help to demystify the use of Ruby systems such as Rinda and&nbsp;DRb and show you how they can be used to link applications together. Through the development of the&nbsp;Mack framework and its use in building Helium.com, Mark will share the highlights and the pitfalls&nbsp;of distributed application development.</blockquote>

Make sure and sign up for the conference today, as attendance is limited to only 500.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date>2008-09-11 10:21:51</wp:post_date>
		<wp:post_date_gmt>2008-09-11 15:21:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-rubyconf-08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="drb"><![CDATA[drb]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<category domain="post_tag" nicename="ruby-conf"><![CDATA[ruby conf]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configatron 2.0.0 Released!</title>
		<link>http://www.metabates.com/2008/09/17/configatron-200-released/</link>
		<pubDate>Wed, 17 Sep 2008 19:30:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=177</guid>
		<description></description>
		<content:encoded><![CDATA[I've spent the last few days incorporating Configatron 1.x into the Mack framework, for our forth coming 0.8.0 release. During that time, I've released that Configatron could be better, and that it should be better. I got quickly annoyed with the multiple lines of code I needed to write to just to set a single 'nested' parameter. I got frustrated trying to set default values for libraries, <em>after</em>, I had already loaded the user's configurations. Why couldn't I easily check to see if a parameter was nil or not? So taking all that into account, as well as some great feedback from users, Configatron 2.0.0 was born. It's a complete rewrite of the library. It's quicker, and easier to use.

Just take a look at this example:

<script src="http://gist.github.com/11259.js"></script>

It definitely doesn't get much easier than that!

With this new release you can protect parameters to prevent end users from modifying them:

<script src="http://gist.github.com/11288.js"></script>

Since most configurations systems get loaded before outside libraries, you can run into a problem where the library is expecting certain parameters to be set, but your end user hasn't set them all, they've just set the few that are important to them. So what do you do? You don't want to override the end user's settings, Configatron can now help you with that:

<script src="http://gist.github.com/11289.js"></script>

Of course, these are just some of the enhancements in 2.x Please read the <a href="http://configatron.mackframework.com/" target="_blank">README</a> file and checkout the API for more information.


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date>2008-09-17 14:30:01</wp:post_date>
		<wp:post_date_gmt>2008-09-17 19:30:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configatron-200-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>135</wp:comment_id>
			<wp:comment_author><![CDATA[Fabio Cevasco]]></wp:comment_author>
			<wp:comment_author_email>h3rald@h3rald.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.h3rald.com</wp:comment_author_url>
			<wp:comment_author_IP>79.24.120.85</wp:comment_author_IP>
			<wp:comment_date>2008-09-17 15:12:00</wp:comment_date>
			<wp:comment_date_gmt>2008-09-17 20:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Configatron just became PERFECT. Awesome man, I'll definitely use it in my next project!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>136</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>96.252.48.194</wp:comment_author_IP>
			<wp:comment_date>2008-09-17 15:13:21</wp:comment_date>
			<wp:comment_date_gmt>2008-09-17 20:13:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Glad you like the changes Fabio. I am to please. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>137</wp:comment_id>
			<wp:comment_author><![CDATA[Nate Sutton]]></wp:comment_author>
			<wp:comment_author_email>nathan.sutton@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.130.52.39</wp:comment_author_IP>
			<wp:comment_date>2008-09-17 16:08:12</wp:comment_date>
			<wp:comment_date_gmt>2008-09-17 21:08:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You definitely need DB storage for this.  This would allow administratively-editable settings in your application that persist across deployments.  Some settings shouldn't be changed, for sure, but some should be editable by the user within the application.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>138</wp:comment_id>
			<wp:comment_author><![CDATA[Jurgen]]></wp:comment_author>
			<wp:comment_author_email>jurgen.de.jonghe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>128.141.130.74</wp:comment_author_IP>
			<wp:comment_date>2008-09-18 03:01:08</wp:comment_date>
			<wp:comment_date_gmt>2008-09-18 08:01:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice!

I'm not sure about the set_default ... maybe something like:

configatron.name  :default =&gt; "MB"



configatron.name= "whatever"

woulb be a shortcut for:

configatron.name  :value =&gt; "whatever"

and if you wanted to protect it:

configatron.name  :value =&gt; "whatever", :protect =&gt; true]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>139</wp:comment_id>
			<wp:comment_author><![CDATA[A Fresh Cup &raquo; Blog Archive &raquo; Double Shot #294]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://afreshcup.com/?p=946</wp:comment_author_url>
			<wp:comment_author_IP>63.151.205.249</wp:comment_author_IP>
			<wp:comment_date>2008-09-18 05:57:04</wp:comment_date>
			<wp:comment_date_gmt>2008-09-18 10:57:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Configatron 2.0.0 Released! - A big bump and easier syntax for this generalized configuration library. (via Rubyflow) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>140</wp:comment_id>
			<wp:comment_author><![CDATA[Robin Kaarsgaard]]></wp:comment_author>
			<wp:comment_author_email>blodmangel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>217.195.186.2</wp:comment_author_IP>
			<wp:comment_date>2008-09-19 03:29:08</wp:comment_date>
			<wp:comment_date_gmt>2008-09-19 08:29:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome work - something good just got better! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Configatron 2.1.1 Released!</title>
		<link>http://www.metabates.com/2008/09/18/configatron-210-released/</link>
		<pubDate>Thu, 18 Sep 2008 16:50:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[On the heels of yesterday's release of Configatron 2.0.0, Cody Maggard has generously donated a patch to add the following methods: <code>unprotect</code>, <code>protect_all!</code>, and <code>unprotect_all!</code>

Cody is also the developer of the configatron-rails plugin which makes integrating configatron into your Rails app pretty darn easy. You can checkout his project on <a href="http://github.com/cmaggard/configatron-rails/tree/master" target="_blank">GitHub</a>. Thanks Cody!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2008-09-18 11:50:38</wp:post_date>
		<wp:post_date_gmt>2008-09-18 16:50:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configatron-210-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cody-maggard"><![CDATA[cody maggard]]></category>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configatron 2.1.4 Released!</title>
		<link>http://www.metabates.com/2008/10/03/configatron-214-released/</link>
		<pubDate>Fri, 03 Oct 2008 18:25:39 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[This release contains protection of already defined methods, such as <code>object_id</code>. This comes from Configatron advocate, Don March. Thanks Don!

Also in this release is a much improved <code>inspect</code> method.

<script src="http://gist.github.com/14603.js"></script>

As you can see the results of the inspect are a nice, alphabetized, 'cut and paste-able', print out of your configuration settings.

As always, it may take sometime for the gem mirrors to get the release. If you want it now you can install it using www.mackgems.com as the source:

<code>$ sudo gem install configatron --source=http://www.mackgems.com</code>


Look for Configatron support in the next release of Mack, 0.8.0, due out on Monday!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date>2008-10-03 13:25:39</wp:post_date>
		<wp:post_date_gmt>2008-10-03 18:25:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configatron-214-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="post_tag" nicename="don-march"><![CDATA[don march]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[Release 0.8.0 &#8212; Mack Framework]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mackframework.com/2008/10/06/release-080/</wp:comment_author_url>
			<wp:comment_author_IP>208.113.181.17</wp:comment_author_IP>
			<wp:comment_date>2008-10-06 11:06:37</wp:comment_date>
			<wp:comment_date_gmt>2008-10-06 16:06:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Configatron 2.1.4 Released! [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>149</wp:comment_id>
			<wp:comment_author><![CDATA[Jean-Paul]]></wp:comment_author>
			<wp:comment_author_email>hounkanrinjp@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://jpgeek.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>196.207.47.60</wp:comment_author_IP>
			<wp:comment_date>2008-11-17 23:11:33</wp:comment_date>
			<wp:comment_date_gmt>2008-11-18 04:11:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

I've been trying to add http://www.mackgems.com as a source but it just wouldn't work. Is the repository still running has has the URI for it changed?

Regards.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>150</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>98.110.189.208</wp:comment_author_IP>
			<wp:comment_date>2008-11-29 12:51:29</wp:comment_date>
			<wp:comment_date_gmt>2008-11-29 17:51:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Jean-Paul, I apologize for the delay in getting back to you, but I've been down with pneumonia. Anyway, the www.mackgems.com server is back up and running, you should be able to add it as a source now. Sorry about that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Release 0.8.0</title>
		<link>http://www.metabates.com/2008/10/06/release-080/</link>
		<pubDate>Mon, 06 Oct 2008 16:06:32 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[Here it is the 0.8.0 release of Mack! What a fun and exciting release it is as well. There are a few big changes under the hood, all for the better of course, but there's only really one that will cause existing Mack projects some conversion pain. However, we've tried to take the sting out of that with a helpful rake task.
<h3>Configatron Support</h3>
Mack 0.8.0 replaces the old application_configuration system with the new ultra sexy and cool, <a href="http://www.mackframework.com/2008/10/03/configatron-214-released/">Configatron</a> system. This is a much better way of doing system configurations, and I'm sure you'll agree once you give it a spin. We've tried to take the edge off the conversion of these configuration systems with a helpful little rake task:
<pre>$&nbsp;rake mack:update:configuration</pre>
For most cases, that task should do just fine. There might be a few places you have to tweak, such as in your own code, but once you do that, you'll love Configatron!

For more information about using Configatron checkout this page:

<a href="http://www.mackery.com/configuration/configatron">http://www.mackery.com/configuration/configatron</a>
<h3>A New Router</h3>
That's right, the router in Mack has been completely rewritten from the ground up, yet unlike other frameworks, we've managed to keep our external API the same, so you don't have to change your routes.rb at all. :) That's a bit of good news, isn't it?

What do you get with the new router? Well, for one, it should be faster, that's always a plus. You can also now do 'wildcard' parameters in routes, use procs, extended 'resourced' routes, define 'host' and 'scheme' parameters, use regular expressions, and a few other little nifty things. Plus, because of the rewrite, it's going to make it easier to extending the routing system to be even more powerful! In a future release, sometime in the 0.8.x series, you'll even be able to plugin in your own router just by implementing a few API methods.

For more information about the new router, and what you can do, check out:

<a href="http://www.mackery.com/routing/index">http://www.mackery.com/routing/index</a>
<h3>Asset Management</h3>
There is now a really great asset management system that easily allows you to build bundles of CSS and JavaScript files to help keep your code neat and easy to use. Bundle that with the new mack-asset_packager gem, and support for asset hosts, you get a simple, easy, and fast way to compress and deliver your assets.&nbsp;

For more information, checkout these helpful pages from the user guide:

<a href="http://www.mackery.com/views/asset_mgr">http://www.mackery.com/views/asset_mgr</a>
<a href="http://www.mackery.com/views/asset_host">http://www.mackery.com/views/asset_host</a>&nbsp;
<h3>Misc.</h3>
As always, there's a bunch of other great stuff just lurking around in this release. A better logger, for a start, more helpers, bug fixes, better error reporting, default 404 and 500 pages, and more. Please download and enjoy the release, I'm sure you'll find worth it. Enjoy!

Changelog:
<ol>
	<li>[#187] Fixed: When an exception is raised, the request doesn't get 'logged'</li>
	<li>[#185] Fixed: .html is being appended to logged requests when there's a 404</li>
	<li>[#184] Request logging should also print the message of the status code</li>
	<li>[#183] Updates to asset mgr/host</li>
	<li>[#181] Content-type can now be set with calling render.</li>
	<li>[#179] When configatron.mack.show_exceptions is false you now either the public/404.html or public/500.html file.</li>
	<li>[#178] Added a configure parameter to turn off log coloring</li>
	<li>[#176] Added a Google Analytics helper.</li>
	<li>[#175] Generating urls should use host or scheme if defined</li>
	<li>[#171] Ability to extend resources in routes</li>
	<li>[#170] Regex support in routes</li>
	<li>[#169] Proc support for Routes</li>
	<li>[#168] Fixed ERB errors not being reported correctly.</li>
	<li>[#167] Rake task to convert app config yamls to configatron</li>
	<li>[#165] Asset Packager</li>
	<li>[#164] Response helper for 'attachments'</li>
	<li>[#159] Added link_unless_current and link_if helpers</li>
	<li>[#156] Added 'Wildcard' Routes support</li>
	<li>[#152] INCOMPATIBILITY NOTICE: Removed deprecated support for delivered_emails use delivered_notifiers instead.</li>
	<li>[#138] Added support for 'host' &amp; 'scheme' parameters in routes</li>
	<li>[#135] Replaced log4r with logging gem.</li>
	<li>[#119] Freeze gems</li>
	<li>[#106] INCOMPATIBILITY NOTICE: Removed deprecated support for droute_url</li>
	<li>[#93] INCOMPATIBILITY NOTICE: Removed deprecated support for 'top' level ApplicationHelper</li>
	<li>[#23] INCOMPATIBILITY NOTICE: Removed support for application_configuration and added support for configatron</li>
	<li>gem: logging 0.9.4</li>
	<li>gem: thin 1.0.0</li>
	<li>gem: rspec 1.1.8</li>
	<li>gem: configatron 2.1.4</li>
	<li>gem: cachetastic 2.0.0</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2008-10-06 11:06:32</wp:post_date>
		<wp:post_date_gmt>2008-10-06 16:06:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-080</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="assets"><![CDATA[assets]]></category>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="logging"><![CDATA[logging]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="routes"><![CDATA[routes]]></category>
		<category domain="post_tag" nicename="routing"><![CDATA[routing]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>146</wp:comment_id>
			<wp:comment_author><![CDATA[Double Shot #307 &laquo; A Fresh Cup]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://afreshcup.com/2008/10/07/double-shot-307/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.152</wp:comment_author_IP>
			<wp:comment_date>2008-10-07 04:17:55</wp:comment_date>
			<wp:comment_date_gmt>2008-10-07 09:17:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Release 0.8.0 - Of the Mack framework, that is. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Mack featured on this week&#039;s Rails Envy Podcast</title>
		<link>http://www.metabates.com/2008/10/17/mack-featured-on-this-weeks-rails-envy-podcast/</link>
		<pubDate>Fri, 17 Oct 2008 15:41:54 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=192</guid>
		<description></description>
		<content:encoded><![CDATA[The great guys over at RailsEvny.com have been nice enough again to include Mack in one of their podcasts. If you aren't a regular subscriber to the podcast (and why not?), you really should be. Take a listen:

<a href="http://railsenvy.com/2008/10/15/rails-envy-podcast-episode-051-10-15-2008" target="_blank">http://railsenvy.com/2008/10/15/rails-envy-podcast-episode-051-10-15-2008</a>

Thanks again guys for the inclusion, and keep up the good work!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date>2008-10-17 10:41:54</wp:post_date>
		<wp:post_date_gmt>2008-10-17 15:41:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mack-featured-on-this-weeks-rails-envy-podcast</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="podcast"><![CDATA[podcast]]></category>
		<category domain="category" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="rails-envy"><![CDATA[rails envy]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.8.1</title>
		<link>http://www.metabates.com/2008/10/26/release-081/</link>
		<pubDate>Sun, 26 Oct 2008 22:05:22 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=195</guid>
		<description></description>
		<content:encoded><![CDATA[I know with each release I say how excited I am by this release, but that's usually because with each release there's some great new feature that makes me either proud to have developed it, or to proud to be associated with it. Mack 0.8.1 is definitely no exception.

Before I get into what has to be my favorite feature since the distributed features of 0.7.0, and quite possibly my favorite feature in Mack today, let's talk about a few of the other features in this release.
<h3>More Routing Enhancements</h3>
There are a few great new features in the routing system in this release. The first off is a real crowd favorite, Nested Resources. Just like Rails you can now nest resources in Mack.

<a href="http://www.mackery.com/routing/nested_resources">http://www.mackery.com/routing/nested_resources</a>

In Mack 0.8.0 we introduced the ability to put host information in the routes file. This would be used to match the host when matching a route as well as building the url for that route when using the url helpers. This made dealing with subdomains very easier. Well, to really give everyone that subdomain fu everybody loves, we've added the ability to put embedded parameters in the host parameter in routes. It's pretty dang cool, let me tell you. Checkout these examples:

<a href="http://www.mackery.com/routing/misc">http://www.mackery.com/routing/misc</a>
<h3>Pagination API</h3>
There is now a pagination API that's part of the mack-orm API. The first implementation of this in the mack-data_mapper package. At its heart it's extremely easily to implement for new ORMs, one method, and using it is just as easy. There will be a write up on using the API in the forth coming days.
<h3>Jabber Support</h3>
The mack-notifier package can now send notifications using the Jabber protocol.
<h2>!!Portlets!!</h2>
Portlets are what components in Rails should've been and they're what slices in Merb should be. Portlets are a way off packaging a full Mack application into a Ruby Gem so they can easily be shared and used in other Mack applications. As you're about to see, this simple page is all the information you need to know about developing, testing, packaging, and using Portlets.

Portlets encapsulate a whole Mack application, from controllers to views to models to configuration settings to your images, stylesheets and javascripts. This makes it possible to develop extremely rich applications and share them with other Mack applications.

<a href="http://www.mackery.com/portlets/developing">http://www.mackery.com/portlets/developing</a>
<a href="http://www.mackery.com/portlets/testing">http://www.mackery.com/portlets/testing</a>
<a href="http://www.mackery.com/portlets/packaging">http://www.mackery.com/portlets/packaging</a>
<a href="http://www.mackery.com/portlets/using">http://www.mackery.com/portlets/using</a>
<h3>Bug Fixes and Minor Feature Updates</h3>
As always there are great bug fixes and feature updates. Below is the changelog that outlines those improvements.

Changelog:
<ul>
	<li>[#217] Fixed rake mack:dump:routes throws errors</li>
	<li>[#216] Added ability to turn off view caching in distributed app</li>
	<li>[#215] Asset path lookup flow update</li>
	<li>[#213] Fixed the params method should be case insensitive</li>
	<li>[#211] Added a pagination API to mack-data_mapper</li>
	<li>[#210] Added a pagination API to mack-orm</li>
	<li>[#209] inline form built by link_to should include authenticity token</li>
	<li>[#208] Added support for DataMapper repository context per request</li>
	<li>[#207] Fixed session cookie not being deleted properly</li>
	<li>[#206] Portlet now have access to its base_path</li>
	<li>[#205] Fixed testing of nested parameters and file uploads breaks</li>
	<li>[#204] Resource routes can now take options when being defined.</li>
	<li>[#203] Updated distributed: view_cache to include Mack::ViewHelpers instead of Mack::ViewHelpers::LinkHelpers</li>
	<li>[#200] INCOMPATIBILITY NOTICE: mack-notifier configatron namespaces have changed from *_settings to * (e.g. smtp_settings to smtp)</li>
	<li>[#198] Added Embedded parameters in 'host' for Routes</li>
	<li>[#196] Extlib 0.9.8 support</li>
	<li>[#195] DataMapper 0.9.6 support</li>
	<li>[#193] Portlet Support</li>
	<li>[#192] mack-localization now supports portlet</li>
	<li>[#191] Asset-Packager support for Portlet</li>
	<li>[#143] Nested resources in Routes</li>
	<li>[#134] Form elements are now 'errorfied'.</li>
	<li>[#131] Date/Time select boxes can now be easily re-arranged.</li>
	<li>[#78] Jabber support</li>
	<li>gem: configatron 2.1.5</li>
	<li>gem: extlib 0.9.8</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date>2008-10-26 17:05:22</wp:post_date>
		<wp:post_date_gmt>2008-10-26 22:05:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-081</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="extlib"><![CDATA[extlib]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="jabber"><![CDATA[jabber]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="merb"><![CDATA[merb]]></category>
		<category domain="post_tag" nicename="nested-resources"><![CDATA[nested resources]]></category>
		<category domain="post_tag" nicename="pagination"><![CDATA[pagination]]></category>
		<category domain="post_tag" nicename="portlet"><![CDATA[portlet]]></category>
		<category domain="post_tag" nicename="portlets"><![CDATA[portlets]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="routes"><![CDATA[routes]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to use a non-singleton version of Configatron</title>
		<link>http://www.metabates.com/2008/11/20/how-to-use-a-non-singleton-version-of-configatron/</link>
		<pubDate>Thu, 20 Nov 2008 12:20:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[Since Configatron has come out it's become a pretty popular library, and because of that I've received several feature requests. Nothing wrong with that. I actually welcome that, because, let's be honest, that's how configatron will become even better.

The biggest request I've received is from people who want to use Configatron, but they want their own instance of it, and not the global singleton instance of it. Although, I personally don't see why you would need that, I'm a big enough man to understand that just because I don't need it, doesn't mean others don't.

Last night I was reviewing the code, because I was asked this question again, and in doing so I realized that power has been there all along. It's actually very simple. When you make a call on <code>Kernel#configatron</code> it returns a singleton of the <code>Configatron</code> class, but after that all it does is return an instance of the <code>Configatron::Store</code> class. So if you want your own instance of Configatron, what you really want is an instance of the <code>Configatron::Store</code> class, which you can do like so:

<script src="http://gist.github.com/27027.js"></script>Â 

Well, there you go, I hope that helps. Enjoy.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2008-11-20 07:20:24</wp:post_date>
		<wp:post_date_gmt>2008-11-20 12:20:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-use-a-non-singleton-version-of-configatron</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="singleton"><![CDATA[singleton]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configatron 2.1.6 Released!</title>
		<link>http://www.metabates.com/2008/11/21/configatron-216-released/</link>
		<pubDate>Sat, 22 Nov 2008 00:15:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=200</guid>
		<description></description>
		<content:encoded><![CDATA[Thanks to Matthew A. Brown for his contribution to the Configatron library. He added the ability to 'lock'  down a namespace. Configatron has had a <code>protect</code> method for a while, but that only locks down a specific configuration. With <code>lock</code> you can lock down the whole namespace and prevent everything in that namespace from being altered. Maybe some code will help you understand:

<script src="http://gist.github.com/27705.js"></script>

When you get a chance checkout Mat's Github page, <a href="http://github.com/outoftime">http://github.com/outoftime</a>. Thank you very much Mat for your contribution.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date>2008-11-21 19:15:57</wp:post_date>
		<wp:post_date_gmt>2008-11-22 00:15:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configatron-216-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="matthew-a-brown"><![CDATA[matthew a. brown]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Building Distributed Applications from RubyConf 2008</title>
		<link>http://www.metabates.com/2008/11/29/building-distributed-applications-from-rubyconf-2008/</link>
		<pubDate>Sat, 29 Nov 2008 16:10:47 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[Confreaks has recently published the videos of all the presentations from this year''s RubyConf, including the presentation yours truly did on 'Building Distributed Applications'.

<a href="http://rubyconf2008.confreaks.com/building-distributed-applications.html">http://rubyconf2008.confreaks.com/building-distributed-applications.html</a>

There are plenty of other great talks on the site, so sit back, make some popcorn, and enjoy some of the wonderful talks that were on offer down in Florida this year.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date>2008-11-29 11:10:47</wp:post_date>
		<wp:post_date_gmt>2008-11-29 16:10:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-distributed-applications-from-rubyconf-2008</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rubyconf-2008"><![CDATA[rubyconf 2008]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release 0.8.2</title>
		<link>http://www.metabates.com/2008/11/30/release-082/</link>
		<pubDate>Mon, 01 Dec 2008 02:57:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=206</guid>
		<description></description>
		<content:encoded><![CDATA[Hey there folks, sorry for the long wait for this release, but it's here. It's been a long November for yours truly. I've had to find a new job. I've had pneumonia. We, at least in America, have celebrated Thanksgiving. And, of course, who can forget RubyConf 2008?

So with that said, what's in 0.8.2? Honestly, not a whole lot. There are a couple of bug fixes, a button_to_remote (think submit_to_remote in Rails) helper, and deferred routes. More on deferred routes in a moment, as it's actually a pretty cool feature that only Mack and Merb share. And finally there is bundled gems.
<h3>Bundled Gems</h3>
What do I mean I say 'bundled gems'? Well, because of the rather large number of gems that get installed with Mack, and because of some gem version dependency issues, Mack is now bundling it's third party dependency gems inside itself. For example, mack-facets used to rely on the gems 'facets' and 'english'. Those gems are now bundled inside the mack-facets gem and now longer need to be downloaded and installed by end users. This should make installing Mack super easy. It should also make dealing with having multiple versions of Mack installed on your system easier to deal with and maintain.
<h3>Deferred? Routes</h3>
So what are deferred routes? Ezra wrote a really great write up back in <a href="http://brainspl.at/articles/2008/04/18/deferred-requests-with-merb-ebb-and-thin" target="_blank">April</a>. The idea is simple, with newer web servers such as Thin and Ebb, you can tell them to spawn a new thread to handle particular requests, such as long running processes like file uploads. This can really help speed things up as server can process regular requests using an event machine model, which is very fast, but can be really slow and block the server for longer processes. Now those processes can spawn into their own threads and not block the server.

In Mack 0.8.2 you can mark your routes with a deferred? =&gt; true option which will trigger this behavior. It's much more advanced than the similar feature that can be found in Merb, which requires a separate configuration for your deferred actions, and the urls have to be 'hard coded'. Mack let's you use all the dynamic power of your routes, like you would want to. It's just another option on the route itself. For a great tutorial on using deferred routes, check out the following page on www.mackery.com:

<a href="http://www.mackery.com/routing/deferred_routes">http://www.mackery.com/routing/deferred_routes</a>
<h3>Upgraded Dependencies</h3>
A few gems have been upgraded as part of this release, the big ones include DataMapper to 0.9.7, ActiveRecord to 2.2.2, and Haml to 2.0.4.

Changelog:
<ul>
	<li>[#237] Fixed render :rjs throws errors</li>
	<li>[#236] Upgraded to ActiveRecord 2.2.2</li>
	<li>[#235] Upgraded to DataMapper 0.9.7</li>
	<li>[#230] Upgraded to facets 2.4.5</li>
	<li>[#229] Upgraded to english 0.3.1</li>
	<li>[#227] Removed WEBrick logging</li>
	<li>[#226] Bundled gems.</li>
	<li>[#225] Removed dependency on Thin</li>
	<li>[#223] Fixed mackery console fails</li>
	<li>[#148] Added button_to_remote helper method.</li>
	<li>[#16] Added deferred? routes.</li>
	<li>gem: active_record 2.2.2</li>
	<li>gem: data_mapper 0.9.7</li>
	<li>gem: addressable 2.0.0</li>
	<li>gem: facets 2.4.5</li>
	<li>gem: english 0.3.1</li>
	<li>gem: rspec 1.1.11</li>
	<li>gem: haml 2.0.4</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2008-11-30 21:57:12</wp:post_date>
		<wp:post_date_gmt>2008-12-01 02:57:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-082</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="addressable"><![CDATA[addressable]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="post_tag" nicename="deferred-routes"><![CDATA[deferred? routes]]></category>
		<category domain="post_tag" nicename="ebb"><![CDATA[ebb]]></category>
		<category domain="post_tag" nicename="english"><![CDATA[english]]></category>
		<category domain="post_tag" nicename="ezra-zygmuntowicz"><![CDATA[Ezra Zygmuntowicz]]></category>
		<category domain="post_tag" nicename="facets"><![CDATA[facets]]></category>
		<category domain="post_tag" nicename="gems"><![CDATA[gems]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="haml"><![CDATA[haml]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="merb"><![CDATA[merb]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="post_tag" nicename="thin"><![CDATA[thin]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>151</wp:comment_id>
			<wp:comment_author><![CDATA[libmonac]]></wp:comment_author>
			<wp:comment_author_email>ll@ll.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>61.253.58.143</wp:comment_author_IP>
			<wp:comment_date>2008-11-30 23:12:19</wp:comment_date>
			<wp:comment_date_gmt>2008-12-01 04:12:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I heard that the AR2.2 support ThreadSafe, 
So, with AR thread safe, I can still have all advantages of mack
thread safe?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>152</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>98.110.189.208</wp:comment_author_IP>
			<wp:comment_date>2008-12-01 08:28:40</wp:comment_date>
			<wp:comment_date_gmt>2008-12-01 13:28:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's the theory. I haven't tried out AR 2.2 thread safeness yet, but I can vouch for Mack being thread safe. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>153</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Aimonetti]]></wp:comment_author>
			<wp:comment_author_email>mattaimonetti@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://merbist.com</wp:comment_author_url>
			<wp:comment_author_IP>76.26.224.187</wp:comment_author_IP>
			<wp:comment_date>2008-12-01 18:55:16</wp:comment_date>
			<wp:comment_date_gmt>2008-12-01 23:55:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@mark congrats on the release!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>154</wp:comment_id>
			<wp:comment_author><![CDATA[DBA]]></wp:comment_author>
			<wp:comment_author_email>diogo.borges.almeida@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.mackforum.com</wp:comment_author_url>
			<wp:comment_author_IP>85.138.170.45</wp:comment_author_IP>
			<wp:comment_date>2008-12-02 03:40:13</wp:comment_date>
			<wp:comment_date_gmt>2008-12-02 08:40:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Many of Rails components are yet to become thread safe. You see, for the more your core API is thread safe, everything you use inside it, be ir AR, or a lib, must be thread safe as well.

That sure will take a while for a framework that, unlike Mack, was not build with thread safety in mind.

This said, Rails will prolly be thread safe one day or another, for the sake of safety :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Merb + Rails3 = Rarb?</title>
		<link>http://www.metabates.com/2008/12/23/merb-rails3-rarb/</link>
		<pubDate>Tue, 23 Dec 2008 22:32:08 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[For all those of you who have missed it, today it was announced that Merb will be discontinued and merged into Rails 3 sometime by the end of next year:

<a href="http://weblog.rubyonrails.org/2008/12/23/merb-gets-merged-into-rails-3" target="_blank">http://weblog.rubyonrails.org/2008/12/23/merb-gets-merged-into-rails-3</a>

What does this mean for Mack and other alternate frameworks? Well a lot, and nothing, all at the same time. I personally, am not pro the merge. Merb was the biggest the alternative to Rails out there. This has been a problem for us smaller frameworks in that it was hard to get a fold hold into the alternative to Rails marketshare that Merb had a hold on. So with Merb going away, why aren't happy that Mack has the opportunity to become the big alternative to Rails?

Well, the answer to that question is simple. Innovation and competition. With Merb becoming as big as it was becoming it was forcing Rails to become a better framework. It also made the other alternative frameworks, such as Mack, to be better frameworks as well. Mack has always strived to be a great hybrid of all the frameworks out there. It has strived to provide the best of all those worlds. If all those worlds merge together, what space is left for something like Mack? Mack, and others, could end up being no different than Rarb (Rails + Merb), and then where is the innovation?

If this was the two biggest cable companies or banks merging the government would be screaming monoply. While I'm not saying that, I do feel that this certainly will have an impact on innovation, an impact that only a good healthy competition can bring. Now, please don't get me wrong, I think Rarb will definitely be innovative. It should be as both Rails and Merb independently have done some amazing things, and I hope that they continue to do so.

So what does the future hold for Mack with this news? Business as usual. Mack will continue to try and be innovative. It will try to make your life a little easier as a developer, and make developing portals and distributed applications easy and fun. Hopefully, Mack will fill the void that will be left by Merb and more people will pick it up as a mature web framework. Hopefully, that will do what Merb once did, force Rails (or rather Rarb), to be more innovative. Hopefully, it will become the alternative that will create another web framework to be innovate to knock it down, and so on...

How do you feel? Are you happy? Are you sad? Are you indifferent? I'd love to hear what you think.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2008-12-23 17:32:08</wp:post_date>
		<wp:post_date_gmt>2008-12-23 22:32:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>merb-rails3-rarb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="merb"><![CDATA[merb]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rarb"><![CDATA[rarb]]></category>
		<category domain="post_tag" nicename="ruby-frameworks"><![CDATA[ruby frameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>156</wp:comment_id>
			<wp:comment_author><![CDATA[Carl Lerche]]></wp:comment_author>
			<wp:comment_author_email>carl@splendificent.com</wp:comment_author_email>
			<wp:comment_author_url>http://splendificent.com</wp:comment_author_url>
			<wp:comment_author_IP>96.253.164.54</wp:comment_author_IP>
			<wp:comment_date>2008-12-23 18:22:02</wp:comment_date>
			<wp:comment_date_gmt>2008-12-23 23:22:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I hardly believe that there is no more competition. There are WAY more frameworks out there than the ruby ones. Believing that the web development ecosystem is limited to just ruby seems somewhat closed minded.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>157</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Barry]]></wp:comment_author>
			<wp:comment_author_email>mail@paulbarry.com</wp:comment_author_email>
			<wp:comment_author_url>http://paulbarry.com</wp:comment_author_url>
			<wp:comment_author_IP>76.100.98.185</wp:comment_author_IP>
			<wp:comment_date>2008-12-23 18:28:48</wp:comment_date>
			<wp:comment_date_gmt>2008-12-23 23:28:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you are looking to compare this to a corporate merger, I would say this is like XM and Sirius.  Those 2 were both offering almost the exact same thing, so it seems like merging create a monopoly.  But as Carl said, what Rails is competing against is frameworks in other languages, such as Django, PHP, etc.  Bringing Rails and Merb together makes Ruby more competitive against other languages.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>158</wp:comment_id>
			<wp:comment_author><![CDATA[Shane]]></wp:comment_author>
			<wp:comment_author_email>shane.hanna@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.206.182.106</wp:comment_author_IP>
			<wp:comment_date>2008-12-23 20:06:57</wp:comment_date>
			<wp:comment_date_gmt>2008-12-24 01:06:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'd be happier if Rails3 was a Rails 'stack' built on Merb. I switched to Merb to get away from the aliased method chains, monkey patches and squiggle code thats so typical of Rails and related libraries.

Time will tell if Yehuda can whip DHH and co. into shape but this can only be good for alternatives like Mack.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>159</wp:comment_id>
			<wp:comment_author><![CDATA[remi]]></wp:comment_author>
			<wp:comment_author_email>remi@remitaylor.com</wp:comment_author_email>
			<wp:comment_author_url>http://remi.org</wp:comment_author_url>
			<wp:comment_author_IP>98.165.225.119</wp:comment_author_IP>
			<wp:comment_date>2008-12-23 20:43:16</wp:comment_date>
			<wp:comment_date_gmt>2008-12-24 01:43:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[+1 to what Shane said

"Iâ€™d be happier if Rails3 was a Rails â€™stackâ€™ built on Merb"

I really, really hope the Merb core team knows what they're doing with this merger.  Atleast I know that the Merb guys are hardcore opinionated (in a good way) and they're unlikely to support a project that won't be *better* than Merb.

The Merb core team would *not* have agreed to this if they didn't strongly believe they could make Rails 3 better than Merb 2 would've been.  Keep in mind how much effort these guys have put into Merb!  They would *not* drop the project without some really seriously confidence that this would be better.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>160</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>98.110.189.208</wp:comment_author_IP>
			<wp:comment_date>2008-12-23 20:51:01</wp:comment_date>
			<wp:comment_date_gmt>2008-12-24 01:51:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree that there are way more frameworks out there than Ruby ones, I don't think anyone is arguing that. And I also agree that we, as a community, should always look outside of our own language for inspiration, despite what DHH said at RailsConf 08. We have to look at everything, and not just what's immediately around us.

With that said, if I were using Java I would use Struts, because I real like it as a framework in Java, if I was using python it would be Django, and so on... But, I like to use Ruby, and so don't lots of people, so I think we should have choice in the language we like to use, just like there's choices in those other languages.

What I'm afraid of is that the smaller Ruby frameworks will find it difficult to go against Rarb with it's near total market share. This has already happened with frameworks like Halcyon. 

Like I said there are parts of me that are excited about it, because I work in a Rails shop during the day, and it would be great to use DataMapper, jQuery, rspec, etc... in a really easy way as first class citizens. It would be wonderful to have a more powerful router, etc... so that part of me is excited about this.

What I'm concerned about is that it might make it more difficult for those who think different, and think things can be done in a better way to flourish in this new world. It hasn't been easy up to this point, I assure you, but people have been interested to find new alternatives to Rails. That may want to leave Rails, might, *might*, dwindle, making motivation on the side of alternative framework developers difficult to muster up.

On the plus side Mack is routinely mentioned in the list of alternative frameworks, and this could very well help to promote it up that list and fill the void that will be left by Merb.

So again, I hope Rarb is good, I hope it's innovative. I also hope that people who decide to use it, use it for the right reasons, because it fills the needs of the application they're trying to develop, and not use it because it's the big guy on the block. I also hope that alternative developers use this as a time to promote themselves as a great alternative.

I hope that helps to clarify my position. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>161</wp:comment_id>
			<wp:comment_author><![CDATA[Justin]]></wp:comment_author>
			<wp:comment_author_email>justinwr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.kineticweb.com</wp:comment_author_url>
			<wp:comment_author_IP>71.230.71.54</wp:comment_author_IP>
			<wp:comment_date>2008-12-23 23:08:49</wp:comment_date>
			<wp:comment_date_gmt>2008-12-24 04:08:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[After reading this article I'm definitely going to look into Mack more.

Of course, if Yehuda and friends manages to do this Rails will definitely be awesome again. But until then, Rails is only what I do at work. Any Ruby frameworking I'll need off hours will need to be filled by another framework, as I'm just tired of the terrible mess those Ruby retards brought to the language. The only thing Rails was initially good at was a purpose, not a code base. The code was gimmicky and reminds me of what some people write when they just need to get it working.

If this is the big refactor, as Merb had pushing up to 1.0 then so be it. Rails needs that in order to stay viable. At least Ez seems to feel that way about this.

Otherwise, its time to look at Mack again! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>162</wp:comment_id>
			<wp:comment_author><![CDATA[Dan Kubb]]></wp:comment_author>
			<wp:comment_author_email>dan@kubb.name</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>204.174.98.110</wp:comment_author_IP>
			<wp:comment_date>2008-12-24 00:50:14</wp:comment_date>
			<wp:comment_date_gmt>2008-12-24 05:50:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've been asserting in private discussions with some of the Merb core people that the pieces of Merb and Rails that can be used by all frameworks should be pushed up into the Rack layer.  It doesn't make sense for every framework to have to implement sessions, routing, exception notifications, etc when the functionality is so similar.  Push the commodity pieces into Rack and let every framework share the common pieces.  Yehuda, Carl and Ezra have agreed that this is a good idea, so hopefully we'll see this merger result in it being easier for alternative frameworks built on Rack.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>163</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Aimonetti]]></wp:comment_author>
			<wp:comment_author_email>mattaimonetti@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://merbist.com</wp:comment_author_url>
			<wp:comment_author_IP>72.130.144.12</wp:comment_author_IP>
			<wp:comment_date>2008-12-24 04:34:53</wp:comment_date>
			<wp:comment_date_gmt>2008-12-24 09:34:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post Mark. As you know, the merb core team always values plurality and competition.

We addressed this very issue when we discussed the possibility to merge with Rails. I agree that merb had a positive effect on rails and vice versa. It also drove the other frameworks which pushed us further.
The problem we faced was simple: do we want to keep competition just for the sake of it? Rails clearly told us: we want what you have and we would love you to work with us. So the options were:
- tell them to go to hell and let them try redo what we already did and know how to do.
- accept to work with them and make rails a better framework.

Option 1 would maintain the competition, but now you have 2 groups of people trying to do the same thing and being better at different aspects. The community gets confused and communication breaks.

Option 2: will loose the merb vs rails competition, but we double the amount of people working on rails and make it better.

We went with option 2, knowing that within the rails/merb team we will disagree and learn from each other.  I hope you will keep us on our toes and the rest of the community will push us to be even better.

I wish you the best and hope we'll get ot work together on some rack related stuff!

- Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>164</wp:comment_id>
			<wp:comment_author><![CDATA[Diego Scataglini]]></wp:comment_author>
			<wp:comment_author_email>dwebsubmit@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jroller.com/dscataglini</wp:comment_author_url>
			<wp:comment_author_IP>76.109.210.206</wp:comment_author_IP>
			<wp:comment_date>2008-12-24 07:52:57</wp:comment_date>
			<wp:comment_date_gmt>2008-12-24 12:52:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I personally think that there is plenty room for other framework. Lately I played with sinatra and loved it. A while ago I played with ramaze. (haven't tried mack but will)
I can definitely see the application of other smaller or differently oriented frameworks like waves. (although waves is not really a web framework)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>165</wp:comment_id>
			<wp:comment_author><![CDATA[Tim]]></wp:comment_author>
			<wp:comment_author_email>tkadom@skiptree.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.skiptree.com</wp:comment_author_url>
			<wp:comment_author_IP>71.59.50.130</wp:comment_author_IP>
			<wp:comment_date>2008-12-24 13:55:05</wp:comment_date>
			<wp:comment_date_gmt>2008-12-24 18:55:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I guess it comes down to who has the final say.  I would think the teams would be well served in dividing areas of responsibility.  Let the merb team handle the stuff thats close to the metal, and let the rails team work on the rails specific stack and features.

Personally I worry that DataMapper may be the red-headed stepchild in this merger, but I hope I am wrong.  I do think that merging the two teams will be good for the ruby community in the long run, and rails  will greatly benefit as a result of these two teams combining.  

I think the ideal merger would leave the merb team enhancing merb core, and making the merb framework stronger with a focus of just being a framework for building web frameworks.  rails would be a layer on top of merb in the style of merb-more.

I guess I would prefer if the rails guys decided to adopt the merb-core and build rails on top of it.  It sounds like that is what might be happening, and if so, I don't see why anyone would be unhappy about the merger...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>166</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>72.93.183.236</wp:comment_author_IP>
			<wp:comment_date>2008-12-24 14:23:30</wp:comment_date>
			<wp:comment_date_gmt>2008-12-24 19:23:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I love the idea of some of the Rarb stuff, particularly the stuff that comes from Merb, being made into separate Rack middleware pieces. That would be great. It would nice for alternative frameworks to say, "Yeah, I want to use the Rarb router" or "I don't like that router, I'll build my own." That type of thing I think will be great for the community, and it's something that I really look forward to seeing what happens.

I also agree that if they slap some Rails things on top of Merb that would be great, however, I feel that it's going to be ripping out sections of Rails with Merb, which will result in a hybrid of old Rails code and new Merb code. That would be uncool. 

Ultimately I think we can all agree that there are good parts to the merger, and bad parts to the merger. The key really comes down to how it gets pulled off by the core teams, the communities acceptance of Rarb, and the desire of 'alternative' developers to keep fighting the good fight. 

Also, I should clarify that when I say 'alternative' I don't just mean web frameworks, I also mean ORMs (DataMapper, Sequel, etc...), testing (RSpec, Shoulda, etc...), and so forth. 

Let's all keep up the innovation that the Ruby community is known for. Let's all keep each other on our toes, and let's build the best software we can.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>167</wp:comment_id>
			<wp:comment_author><![CDATA[goffry]]></wp:comment_author>
			<wp:comment_author_email>goffry@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>92.124.181.162</wp:comment_author_IP>
			<wp:comment_date>2008-12-26 11:30:50</wp:comment_date>
			<wp:comment_date_gmt>2008-12-26 16:30:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Please shed light with new logo. Doesn't this guy right?
http://tinyurl.com/9suvo6]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>168</wp:comment_id>
			<wp:comment_author><![CDATA[Sean McCleary]]></wp:comment_author>
			<wp:comment_author_email>seanmcc@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mrinterweb.com</wp:comment_author_url>
			<wp:comment_author_IP>70.90.134.14</wp:comment_author_IP>
			<wp:comment_date>2009-01-01 17:33:39</wp:comment_date>
			<wp:comment_date_gmt>2009-01-01 22:33:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am very excited about this merge.  I have been torn to the point of delaying new projects because I could not decide if I wanted to use Rails or Merb.  If this merge can bring the best of both frameworks together as it promises, my framework decisions will be much easier.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>171</wp:comment_id>
			<wp:comment_author><![CDATA[Sam Smoot]]></wp:comment_author>
			<wp:comment_author_email>ssmoot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.129.174.222</wp:comment_author_IP>
			<wp:comment_date>2009-01-05 15:07:55</wp:comment_date>
			<wp:comment_date_gmt>2009-01-05 20:07:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Dan re: Rack

A generic third-party Sessions library would be great.

I'd rather not see any of that stuff polluting Rack though. Rack is just fine as is IMO.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>188</wp:comment_id>
			<wp:comment_author><![CDATA[ibrahim saraÃ§oÄŸlu]]></wp:comment_author>
			<wp:comment_author_email>burslar@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nedirbilgi.com/</wp:comment_author_url>
			<wp:comment_author_IP>78.187.123.64</wp:comment_author_IP>
			<wp:comment_date>2009-05-12 06:27:47</wp:comment_date>
			<wp:comment_date_gmt>2009-05-12 11:27:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for this informative read, I really appreciate sharing this great post. Keep up your work.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Configatron 2.2.0 Released, now with Ruby 1.9 and JRuby support!</title>
		<link>http://www.metabates.com/2009/01/01/configatron-220-released-now-with-ruby-19-and-jruby-support/</link>
		<pubDate>Thu, 01 Jan 2009 16:31:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[Happy New Year everyone!

With the help of the absolutely amazing <a href="http://blog.robseaman.com/2008/12/20/switching-between-ruby-1-8-1-9-with-multiruby" target="_blank">multiruby</a> library and an edge version of rspec from GitHub, the latest version of Configatron now supports JRuby 1.1.6 and Ruby 1.9.1rc1. There are no other functional changes to the library, so it's a full drop in replacement for vesion 2.1.6.

I highly encourage everyone to checkout multiruby and start upgrading their libraries so we can all move to 1.9 quicker, which means more speed and more power. Once we're all in 1.9 land we can really make use of some of the amazing features it provides.

Anyway, I'll be working on upgrading all my libraries and applications to work on 1.8 and 1.9, and hopefully JRuby, over the next couple of months. So be on the look out for a new versions of Cachetastic, Genosaurus [update: Genosaurus already works with 1.9 and JRuby. Hoorah!], and, of course, Mack.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date>2009-01-01 11:31:00</wp:post_date>
		<wp:post_date_gmt>2009-01-01 16:31:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configatron-220-released-now-with-ruby-19-and-jruby-support</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="genosaurus"><![CDATA[genosaurus]]></category>
		<category domain="post_tag" nicename="jruby"><![CDATA[jruby]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="multiruby"><![CDATA[multiruby]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="post_tag" nicename="ruby-19"><![CDATA[ruby 1.9]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>169</wp:comment_id>
			<wp:comment_author><![CDATA[Markus Jais]]></wp:comment_author>
			<wp:comment_author_email>markusjais@gmx.de</wp:comment_author_email>
			<wp:comment_author_url>http://markusjaisdev.com</wp:comment_author_url>
			<wp:comment_author_IP>87.193.164.178</wp:comment_author_IP>
			<wp:comment_date>2009-01-02 03:38:48</wp:comment_date>
			<wp:comment_date_gmt>2009-01-02 08:38:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very cool. I get the impression that the transition to Ruby 1.9 will happen quite fast. Faster as I know it from other languages (like from PHP 4 to PHP 5).
Thanks for your effort. I will try the new version with the 1.9.1 RC I just installed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>170</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>72.93.183.236</wp:comment_author_IP>
			<wp:comment_date>2009-01-02 10:15:23</wp:comment_date>
			<wp:comment_date_gmt>2009-01-02 15:15:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm hoping things move fast. I'll be great to get on 1.9 asap. It offers so much benefit. There are just a lot of libraries that need to be brought into line for that to happen. My fear is the older libraries that a lot of people use that don't get maintained any more. DB drives, log4r, etc... I think as a community we can all pitch in and make that happen.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Release 0.8.3</title>
		<link>http://www.metabates.com/2009/01/18/release-083/</link>
		<pubDate>Sun, 18 Jan 2009 18:20:54 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=214</guid>
		<description></description>
		<content:encoded><![CDATA[Thanks to the cold and snowy New England winter this year, I've been able to devote quite a bit of time to getting Mack to run on Ruby 1.9, so with that said, here's the 0.8.3 release of Mack, featuring... TADA... Ruby 1.9!! Of course there are a few other features and improvements in this release. Here's a quick run down:
<h3>Ruby 1.9</h3>
The big one. Mack runs very well on Ruby 1.9, unfortunately I can't say the same thing about some other frameworks. I've had some run ins with DataMapper on 1.9, but I'm sure those will be ironed out shortly.

A few weeks ago I announced I was working on getting Ruby 1.9 support for all my gems and libraries. I started out with Configatron, then upgraded Cachetastic and Genosaurus. Now Mack is 1.9 compatible. When I made the announcement the guys at RailsEnvy picked up on it and said that I made a call to arms to the community to pick up 1.9 support. Now granted, I didn't actually say those words, but I think the intent was there, so I'm going to now officially say those words. This is a 'call to arms' to the Ruby community to upgrade their gems, plugins, libraries, frameworks, etc... to work on Ruby 1.9. I've done it, and I can tell you, it's not that tough. Just use multiruby, and you're off and running.
<h3>ActiveSupport In, Facets Out</h3>
What with the world getting smaller these days, well, at least the world of Ruby web frameworks. A lot of great work is going into refactoring ActiveSupport and making it faster, better, and smaller. Because of that and the fact that every time a new release of Facets comes out it breaks a whole lot of stuff, I've decided to use ActiveSupport as the basis of the mack-facets gem. So basically mack-facets is just ActiveSupport with a few more enhancements.
<h3>JavaScript Effects</h3>
Thanks to the tireless efforts of Gerardo Pis-Lopez, mack-javascript, has been upgraded to add helpers methods for effects for both Prototype/Scriptaculous and jQuery. Thank you to Gerardo for the much needed upgraded to mack-javascript.
<h3>Upgrades</h3>
Mack has been upgraded to use Rack 0.9.1, DataMapper 0.9.9, and a few other smaller gems.

Changelog:
<ul>
	<li>[#243] Upgraded to Rack 0.9.1</li>
	<li>[#242] Upgraded to DataMapper 0.9.9</li>
	<li>[#241] Removed dependency on Facets</li>
	<li>[#239] Add do_sqlite3 to gems.rb</li>
	<li>[#166] Effects for mack-javascript</li>
	<li>[#133] Added Form Builders</li>
	<li>[#22] Ruby 1.9 Support</li>
	<li>gem: rack 0.9.1</li>
	<li>gem: rspec 1.1.12</li>
	<li>gem: configatron 2.2.2</li>
	<li>gem: cachetastic 2.1.2</li>
	<li>gem: data_mapper 0.9.9</li>
	<li>gem: addressable 2.0.1</li>
	<li>gem: extlib 0.9.9</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date>2009-01-18 13:20:54</wp:post_date>
		<wp:post_date_gmt>2009-01-18 18:20:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-083</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="data_mapper"><![CDATA[data_mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="gerado-pis-lopez"><![CDATA[gerado pis-lopez]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="prototype"><![CDATA[prototype]]></category>
		<category domain="post_tag" nicename="rack"><![CDATA[rack]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="ruby-19"><![CDATA[ruby 1.9]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>172</wp:comment_id>
			<wp:comment_author><![CDATA[Geezzzer]]></wp:comment_author>
			<wp:comment_author_email>geezer@example.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.55.96.79</wp:comment_author_IP>
			<wp:comment_date>2009-01-18 15:17:40</wp:comment_date>
			<wp:comment_date_gmt>2009-01-18 20:17:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, what is  Mack  anyway?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>174</wp:comment_id>
			<wp:comment_author><![CDATA[Dan Kubb]]></wp:comment_author>
			<wp:comment_author_email>dan@kubb.name</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>204.174.98.110</wp:comment_author_IP>
			<wp:comment_date>2009-01-20 04:55:30</wp:comment_date>
			<wp:comment_date_gmt>2009-01-20 09:55:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just wanted to drop a note to let everyone using the Mack Framework that DataMapper 0.9.10 was released today and now provides Ruby 1.9 support.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>175</wp:comment_id>
			<wp:comment_author><![CDATA[Brian Takita]]></wp:comment_author>
			<wp:comment_author_email>brian.takita@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.pivotalblabs.com/users/brian/blog</wp:comment_author_url>
			<wp:comment_author_IP>208.105.22.42</wp:comment_author_IP>
			<wp:comment_date>2009-01-21 13:59:41</wp:comment_date>
			<wp:comment_date_gmt>2009-01-21 18:59:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Geezzzer:
http://www.mackery.com/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>176</wp:comment_id>
			<wp:comment_author><![CDATA[Philip MacIver]]></wp:comment_author>
			<wp:comment_author_email>philip@ivercore.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.ivercore.com</wp:comment_author_url>
			<wp:comment_author_IP>77.228.26.98</wp:comment_author_IP>
			<wp:comment_date>2009-01-27 18:16:33</wp:comment_date>
			<wp:comment_date_gmt>2009-01-27 23:16:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have been trying to look for more documentation than currently exists in the user manual, but I am finding it very hard to track any down. 

What I am looking for is things like, if I want to use haml instead of erb, what do I need to do? Do I have to require a gem in some file? or set it in a config file somewhere. 

I would love to jump in and build an app with this, but the lack of documentation and resources to find out the things that I want is very frustrating.

Any help would be welcome. 

Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>177</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.48.193.147</wp:comment_author_IP>
			<wp:comment_date>2009-01-27 22:56:57</wp:comment_date>
			<wp:comment_date_gmt>2009-01-28 03:56:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Philip, yeah, the documentation definitely needs work. To quote the Beatles, it's getting better all the time. I've gone and added a section on mack-haml, just for you. :)

http://www.mackery.com/mack_more/haml/index

That should help you, it's pretty darn easy. Let me know if you have any questions.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>178</wp:comment_id>
			<wp:comment_author><![CDATA[Philip MacIver]]></wp:comment_author>
			<wp:comment_author_email>philip@ivercore.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.ivercore.com</wp:comment_author_url>
			<wp:comment_author_IP>77.228.26.98</wp:comment_author_IP>
			<wp:comment_date>2009-01-28 00:08:51</wp:comment_date>
			<wp:comment_date_gmt>2009-01-28 05:08:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for that.

One thing that I have noticed of all frameworks, not just this one, is that when there is a default there is nowhere that shows it is a default in the running app.

I just think that for the sake of clarity, that if something is a default it is a default because there is a line in a config file, in the running app that says something similar to what you have for the haml example you put up

require_gems do |gem|  
  gem.add "mack-haml", :libs =&gt; "mack-haml"  
end

But this should be for every default action in the running app. And if it isn't there then the individual things that make up app wont work.

I see this as having 2 advantages

1. Anyone creating an app, especially for the first time like I did can see exactly what is being loaded by just looking at one file

2. People can rip out and put in whatever gems they want, and it can be more customised stack of applications.

But only really looking at this app really for a day, I don't  know if the above makes sense to do. I just think that if this was how frameworks laid out themselves it would make a lot more sense to me, and less like a black box that magic things happen in.

Just my cents.

But again thanks for the piece of documentation you provided]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>179</wp:comment_id>
			<wp:comment_author><![CDATA[Philip MacIver]]></wp:comment_author>
			<wp:comment_author_email>philip@ivercore.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.ivercore.com</wp:comment_author_url>
			<wp:comment_author_IP>77.228.26.98</wp:comment_author_IP>
			<wp:comment_date>2009-01-28 00:28:27</wp:comment_date>
			<wp:comment_date_gmt>2009-01-28 05:28:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[By the way, what is the difference between the first parameter, and the one that is passed in that is called :libs, are they not just one and the same?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>180</wp:comment_id>
			<wp:comment_author><![CDATA[Philip MacIver]]></wp:comment_author>
			<wp:comment_author_email>philip@ivercore.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.ivercore.com</wp:comment_author_url>
			<wp:comment_author_IP>77.228.26.98</wp:comment_author_IP>
			<wp:comment_date>2009-01-28 01:52:06</wp:comment_date>
			<wp:comment_date_gmt>2009-01-28 06:52:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Okay, just used the haml thing and it seemed to work, all except the layout. When I use a layout with an erb extension it works fine, but when I use one with a haml extension it gives me the following

 /progs/web/test_app/app/views/layouts/application.html.*

Maybe a small bug where views only expect erb layouts?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Thank you.</title>
		<link>http://www.metabates.com/2009/03/04/thank-you/</link>
		<pubDate>Thu, 05 Mar 2009 03:05:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[It is with a sad and heavy heart that this evening I announce that I will no longer be developing the Mack Framework. The project, started a year ago, and has been source of great pride, joy, and at times frustation. Of all the projects I have ever worked on, this one was definitely closest to my heart.

The decision to stop working on Mack was something I did not take lightly. If I had my druthers, and plenty of free time and a source of funding, I most certainly would continue on working on it. However, reality has a different way of plenty out.

When I first started developing Mack the company I was working for at the time was frustrated with the pains and shortcomings of Rails. It was the right platform for the company when we started, however, two years in a start up is a life time and the company took many twists and turns, that lead us to the path of seeking an alternative platform to Rails. At the time Merb was not a serious contender, and there was little else out there that was looking to satisfy the needs we had. Enter Mack. I spent nearly 10 months developing Mack for that company. We rolled out several Mack applications. It worked really well for what we wanted it to do.

Again, however, reality came into play. The company was forced to lay off nearly 50% of its staff, and I was one of them. I quickly took a position as the Director of Engineering for another startup in Boston. This shop, too, is a Rails shop. The difference between the two companies is that for the company I work for now Rails is the right solution. This means that I am spending my days working with Rails, and not developing Mack.

At night and on the weekends I like to spend time with my wife and my son. I play in a band, <a href="http://www.thebluewires.com">www.thebluewires.com</a>, and I am working on a book for Addison-Wesley entitled, "Distributed Programming with Ruby". I'm a busy man, and Mack is a big project. You can't successfully write a web framework part time. Especially when that part time is really more like part-part time. You need to be able to put dedicated full time resources onto a project of that scale, and I just don't have the time to do it.

Would I love to see the project continue? Certainly. If there is someone out there who wants to take it on, please let me know. I would love to see it grow. There is so much I wanted to do with it. So many great ideas.

Now, for the good news, I am planning to port a bunch of the Mack functionality over to the Rails 3 platform. The obvious one being the mack-distributed package which is a key differentiator between Mack and the other Ruby frameworks. Another package I think worthy of migration is mack-notifier, which provides, in my opinion, a really nice clean API for doing notifications, whether they be email, Jabber, SMS, etc... I also really like the mack-data_factory package. It provides an ORM agnostic way to do great data factories for testing. Finally there are some routing improvements that I think Rails could really benefit from, as well as a few other bits and bobs here and there.

I wish to thank everyone who has supported this project over the year. A few key people I think that deserve a special call out are: Darsono Sutedja (the second biggest contributed to Mack), Gerardo Pis-Lopez (the third biggest contributor), and Greg Arsenault (my previous boss who fought for me to develop Mack). If there was such a thing as the Mack Core Team, those guys would be it. I would also like to thank people like Peter Cooper, Gregg Pollack, Adam French, Dan Kubb, and everyone else who either opened a Lighthouse ticket, submitted a patch, wrote a blog entry about Mack, or who was just there for support and guidance over the past year.

I am going to keep www.mackframework.com around as a forum for my other projects, such as Cachetastic and Configatron, and the other projects I have brewing. Expect some cool new projects out of me in 2009, include some iPhone projects that I'm excited about undertaking. I will be releasing the last version of Mack by the end of the month. It will essentially be a few bug fixes, an upgrade of DataMapper, and Sass support.

To summarize, thank you everyone. I appreciate your support and I look forward to contributing to the community in new and exciting ways.

Thank you.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2009-03-04 22:05:25</wp:post_date>
		<wp:post_date_gmt>2009-03-05 03:05:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thank-you</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="adam-french"><![CDATA[adam french]]></category>
		<category domain="post_tag" nicename="addison-wesley"><![CDATA[addison-wesley]]></category>
		<category domain="post_tag" nicename="dan-kubb"><![CDATA[dan kubb]]></category>
		<category domain="post_tag" nicename="darsono-sutedja"><![CDATA[darsono sutedja]]></category>
		<category domain="post_tag" nicename="data-mapper"><![CDATA[data mapper]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="gerado-pis-lopez"><![CDATA[gerado pis-lopez]]></category>
		<category domain="post_tag" nicename="greg-arsenault"><![CDATA[greg arsenault]]></category>
		<category domain="post_tag" nicename="gregg-pollack"><![CDATA[gregg pollack]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="peter-cooper"><![CDATA[peter cooper]]></category>
		<category domain="post_tag" nicename="rails-3"><![CDATA[rails 3]]></category>
		<category domain="post_tag" nicename="sass"><![CDATA[sass]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>182</wp:comment_id>
			<wp:comment_author><![CDATA[Kamil Kukura]]></wp:comment_author>
			<wp:comment_author_email>kamk@volny.cz</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>88.101.166.53</wp:comment_author_IP>
			<wp:comment_date>2009-03-10 03:28:41</wp:comment_date>
			<wp:comment_date_gmt>2009-03-10 08:28:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I like the idea of porting distributed stuff to Rails 3. I and my friends already found ourselves in situation where we build another Rails application and reusing models because of the same database.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>183</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.48.193.147</wp:comment_author_IP>
			<wp:comment_date>2009-04-05 22:10:24</wp:comment_date>
			<wp:comment_date_gmt>2009-04-06 03:10:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Kamil, you should check out the Distribunaut post I just posted, it's the quick port of the distributed objects section of the mack-distributed gem. That should solve your problems.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>185</wp:comment_id>
			<wp:comment_author><![CDATA[sensei]]></wp:comment_author>
			<wp:comment_author_email>sensei@zenunit.com</wp:comment_author_email>
			<wp:comment_author_url>http://sensei.zenunit.com/</wp:comment_author_url>
			<wp:comment_author_IP>124.170.118.202</wp:comment_author_IP>
			<wp:comment_date>2009-04-13 22:59:31</wp:comment_date>
			<wp:comment_date_gmt>2009-04-14 03:59:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, have you looked at the nanites? 
http://www.slideshare.net/ezmobius/merb-nanite-presentation]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Distribunaut</title>
		<link>http://www.metabates.com/2009/04/05/distribunaut/</link>
		<pubDate>Mon, 06 Apr 2009 03:08:34 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=218</guid>
		<description></description>
		<content:encoded><![CDATA[Hey there everyone, it certainly has been awhile, a month by my count. I have been diligently working on a book for Addison-Wesley called, "Distributed Programming with Ruby", so having the time to blog went from a luxury to almost non-existent. But here's another little post to keep your RSS feeds happy. 

I've started working on porting the mack-distributed package to the non-Mack world. This new project, and I use the term new loosely for the time being, is tentatively called Distribunaut. The project on GitHub can be found here:Â <a href="http://github.com/markbates/distribunaut/tree/master" target="_blank">http://github.com/markbates/distribunaut/tree/master</a>. It's pretty rough right now. I've ported over the distributed objects section of mack-distributed, but not the views and routes.

You can install the gem like such:

<code>$ gem sources -a http://gems.github.com
$ sudo gem install markbates-distribunaut</code>

To use Distribunaut we first need to start a Rinda::RingServer. Distribunaut comes with a binary to help make this easier:

<code>$ distribunaut_ring_server start</code>

Once we've done that we can create an object we would like to share:

<script src="http://gist.github.com/90620.js"></script>

When we run that we can access it like such:

<script src="http://gist.github.com/90621.js"></script>

That would result in the following being printed out by our 'client' code:

<script src="http://gist.github.com/90622.js"></script>

On our 'server' side we would see something like this:

<script src="http://gist.github.com/90623.js"></script>

This is, clearly, a very simple example, but it shows you how easy it is to use Distribunaut. We haven't done any real configuration, and things just magically work!

Over the next couple of months I'll be extending and rebuilding this library to make it even more powerful and easy to use. I'm going to add fault tolerance, selection algorithms, and whole lot more. The API you see in these examples will most likely remain unchanged, but I'm planning on pretty big under the cover changes.There will be a very in-depth look into all of this in the book, obviously. (Shameless plug, I know.)

If anybody out there wants to contribute to this project, I'd love the help. Any sort of feedback is welcome. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date>2009-04-05 22:08:34</wp:post_date>
		<wp:post_date_gmt>2009-04-06 03:08:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>distribunaut</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="distribunaut"><![CDATA[distribunaut]]></category>
		<category domain="post_tag" nicename="distributed-objects"><![CDATA[distributed objects]]></category>
		<category domain="post_tag" nicename="drb"><![CDATA[drb]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="mack"><![CDATA[mack]]></category>
		<category domain="post_tag" nicename="mack-distributed"><![CDATA[mack-distributed]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Distributed Programming with Ruby Book Update</title>
		<link>http://www.metabates.com/2009/05/22/distributed-programming-with-ruby-book-update/</link>
		<pubDate>Sat, 23 May 2009 02:01:47 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.mackframework.com/?p=221</guid>
		<description></description>
		<content:encoded><![CDATA[Hey there folks, I know it's been awhile, so I thought I would give you all a very quick update as to how the book is going. It's going really well. I'm about 100 pages into it, and it's shaping up very nicely. Addison-Wesley is preparing to put it into their "Rough Cuts" program so you can all get your dirty little hands on what I've written so far as early as a few weeks from now, or so I'm told.

While I don't want to give too much away about the contents, everybody loves a good surprise, let me say that part one of the book will be the most comprehensive guide to DRb and Rinda that you'll find anywhere. Including the source code!!

I'm working hard on part two of the book which focuses on third party tools, frameworks, and libraries. It's quite a fun part of the book to write as there are a great deal of choices out there, including my own Distribunaut. (PS. I released a new version of it on GitHub a week or so ago.) Writing about different libraries is quite fun as I get to really delve into the source code and see the good and bad ways people like to write code. Plus some of the libraries have really great features, or really turn things on their head.

When the book is available as a "Rough Cut", I'll certainly keep you all informed. In the mean time keep watching this space and have a great weekend!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date>2009-05-22 21:01:47</wp:post_date>
		<wp:post_date_gmt>2009-05-23 02:01:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>distributed-programming-with-ruby-book-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="addison-wesley"><![CDATA[addison-wesley]]></category>
		<category domain="post_tag" nicename="distribunaut"><![CDATA[distribunaut]]></category>
		<category domain="post_tag" nicename="distributed-programming-with-ruby"><![CDATA[distributed programming with ruby]]></category>
		<category domain="post_tag" nicename="drb"><![CDATA[drb]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="githubcom"><![CDATA[github.com]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cachetastic 3.0.0 Released</title>
		<link>http://www.metabates.com/2009/06/18/cachetastic-3-0-0-released/</link>
		<pubDate>Fri, 19 Jun 2009 02:07:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=237</guid>
		<description></description>
		<content:encoded><![CDATA[After more than two years powering production level applications I found that Cachetastic was starting to get a bit long in the tooth. I felt that there was a lot I could to make Cachetastic an even better library than it already was. I thought that I had added a bunch of cruft to the framework that people were just not using and maintaining it all seemed like a bit of a pointless chore.

So what was I unhappy about?
<h3>Configuration:</h3>
I was pretty unhappy with the way configuration was being done. I liked using Configatron to power the configuration, but I didn't like the way I implemented the way I was using Configatron. For example, to set up one of the default settings, like the expiry time, you would configure it like such:
<pre>configatron.cachetastic_default_options.expiry_time = 30.minutes</pre>
Now you would configure that same option like this:
<pre>configatron.cachetastic.defaults.expiry_time = 30.minutes</pre>
That's a little savings, but it really hits when you want to configure a particular cache. Let's say we a cache called My::Super::AwesomeCache, to configure it in past versions of Cachetastic we would do this:
<pre>configatron.my_super_awesome_cache_options.expiry_time = 15.minutes</pre>
Now in Cachetastic 3.0.0 we configure like this:
<pre>configatron.cachetastic.my.super.awesome_cache.expire_time = 15.minutes.</pre>
As you can see all configuration now happens under the cachetastic namespace in Configatron. Then it's a matter of using a Configatron namespace for each of your modules. I find it a lot easier to manage.

Another change in configuration is that in previous versions if you wanted to override one default configuration value for a particular cache,  you had to override them all. Now, you can just override the one value  you want, and the rest will be nicely inherited from the defaults.
<h3>Speed</h3>
Cachetastic has always been a very fast library, but I knew that more could be squeezed from that stone. With Cachetastic 3.0.0 you now get a hefty 25% improvement in the Memcached adapter and a whopping 99% in the LocalMemory adapter! Those are pretty awesome numbers. These numbers were easy to achieve when I stepped back and examined what it was I really wanted to do, and picked the most straightforward path to that goal.
<h3>Bloat</h3>
After more than two years Cachetastic was starting to suffer from a severe case of bloat. For example, I've never used the DRb adapter, have you? So why is it there? The same goes for the HtmlFile adapter. I wrote that because at my last job the operations team weren't savvy  enough to be able to get Apache to talk to Memcached, so they wanted to serve HTML files, hence the rather awful adapter. Both of those adapters are now history.

There also used to be support for Rails Session Caching. Considering that most people are now using the Cookie store for sessions, there really is no need for this cache. It could also be argued that it should not have been bundled with Cachetastic at all. I would agree with those arguments. Cachetastic is, and should always be, a standalone caching framework, that can be plugged into Rails or any plain old Ruby project that needs caching support.

Also purged is automatic support for mixing in the Cachetastic::Cacheable module into ActiveRecord. If you want this functionality, it is very easy to include in your application. I don't want to force it on anyone, so that is gone now.

Finally there are a handful of smaller features that I'm sure no one will miss that I've yanked out in the name of performance, reliability, and ease of maintenance.
<h3>Nice and Clean</h3>
When I realized what I really wanted, and what I didn't want, it became clear that what was needed was a fresh code base. With that said, I hit delete (well, not really) and started over again. The code is now smooth, so much easier to read, and fast. In previous versions even my eyes went a bit crossed when I tried to figure out exactly what was going on. There where quite a few levels of indirection, and things just weren't place where they probably should've been. That has all been fixed.

With a nice, clean code base comes a brand new set of tests. The tests are now extremely comprehensive, and while 2.x was very well tested, I know that 3.0.0, is tested to the hilt.

Because 3.0.0 is a brand new code base, I should probably stress the fact that is <strong>NOT</strong> backward compatible. So please be advised.
<h3>Installation:</h3>
<pre>$ sudo gem install cachetastic</pre>
<h3>Conclusion</h3>
I really hope everyone likes this brand new version of Cachetastic. I'm very happy with it, and I think if you give it a chance, you will be too.

If you'd like to have a peek at the RDoc, it can be found at:
<a href="http://cachetastic-api.mackframework.com/">http://cachetastic-api.mackframework.com/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date>2009-06-18 21:07:10</wp:post_date>
		<wp:post_date_gmt>2009-06-19 02:07:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cachetastic-3-0-0-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="cachetastic"><![CDATA[cachetastic]]></category>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="memcache"><![CDATA[memcache]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Evolving Table of Contents</title>
		<link>http://www.metabates.com/2009/06/20/the-evolving-table-of-contents/</link>
		<pubDate>Sun, 21 Jun 2009 04:26:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=241</guid>
		<description></description>
		<content:encoded><![CDATA[For those of you who have checked out the Rough Cuts version of my book, "Distributed Programming with Ruby", I thought you would like to get a peek into how the Table of Contents is going to change shortly. For those of you who haven't seen the old Table of Contents, or are just plain old interested to see what's going to be in the book, or to see how far along with the book I am, here is the current Table of Contents as of tonight:

<script src="http://gist.github.com/133394.js"></script>

As you can see it has evolved quite a bit from what was posted on Rough Cuts just about a month ago. Chances are that it will probably change again, and as it does, I'll try and keep you all posted. There is talk of adding a large chapter at the end that takes a handful of the technologies I discuss in the book and use them to build a "real world" example application, like a Twitter clone, or something like that. If anyone has any good ideas on what they would like to see for this example, please them my way, I'd love to hear them.

If there are no sections listed below a particular chapter that means that I have either not written it yet, or I'm still too early in that chapter's development to have properly assigned it actual sections.

The first draft of the book is slated for the end of July. So there is still a lot of work to be done, but it's still rather exciting. Well, it's exciting for me at least. Talk to you all soon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2009-06-20 23:26:02</wp:post_date>
		<wp:post_date_gmt>2009-06-21 04:26:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-evolving-table-of-contents</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="distributed-programmig"><![CDATA[distributed programmig]]></category>
		<category domain="post_tag" nicename="drb"><![CDATA[drb]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Becoming a Recording, sorry I meant Software, Engineer</title>
		<link>http://www.metabates.com/2009/07/12/becoming-a-recording-sorry-i-meant-software-engineer/</link>
		<pubDate>Mon, 13 Jul 2009 02:41:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=244</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I was sent a survey from the college I attended, the <a href="http://www.lipa.ac.uk">Liverpool Institute for the Performing Arts</a>. In the survey I was asked a question about what I've done in the field of music, that's what my degree is in, since I've graduated. I typed up a rather long winded answer to the question and afterwards I thought it was actually thought it was an interesting commentary on the recording industry. It also shows the path a guy like me takes from being a musician to being a software engineer.

Anyway, I thought I would share this little story with you all. I hope you enjoy it.

About 3 – 4 after graduating I found myself unemployed and decided that I would take that opportunity and try to pursue a career as a recording engineer. I spent two years struggling and working very hard at one of the best studios around and I found that things were just not working out.

I don’t necessarily think it was a problem of my not having the skills needed for the job, but rather it had to do with several other factors. One, because of the state of the recording industry ‘proper’ studios are/were struggling to find work because more and more musicians are doing recording at home on their computers. While their results might not be as ‘high quality’ as those of the studios, the musicians are/were finding that it was good enough to help land them gigs in town.

Because the studio was struggling, and I was the lowest guy on the totem pole, because I was the ‘newest’, I found that I was only getting a few sessions each month, that compared with the ‘top’ engineers who were only getting a week or two worth of work each month.

It was at this point that I sat down and re-evaluated what I wanted most in life. I decided that was really important to me was to have a family and be happy with what I was doing, and to just generally enjoy my life. Realizing that, I had to decide if my current situation was really going to work for me. While I thoroughly enjoyed being a recording engineer, when I got to do it that is, I found the pay ($90 a day - awful!), the hours (usually 12-14 hours), and the lack of sessions to not be a viable way to raise a family.

Once I decided that being a recording engineer wasn’t going to work for me, I needed to find something that would. I thought long and hard about this, as well, and realized that I really enjoyed being a software engineer. It is strangely creative, the pay is very good, and I was damn good at it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date>2009-07-12 21:41:51</wp:post_date>
		<wp:post_date_gmt>2009-07-13 02:41:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>becoming-a-recording-sorry-i-meant-software-engineer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="lipa"><![CDATA[lipa]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>260</wp:comment_id>
			<wp:comment_author><![CDATA[Pepper Jules]]></wp:comment_author>
			<wp:comment_author_email>grotty5638@live.com</wp:comment_author_email>
			<wp:comment_author_url>http://sonicproducer9.zoomshare.com/2.shtml</wp:comment_author_url>
			<wp:comment_author_IP>207.229.128.130</wp:comment_author_IP>
			<wp:comment_date>2010-01-08 18:08:38</wp:comment_date>
			<wp:comment_date_gmt>2010-01-08 23:08:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Rap music is my life&nbsp; It's my dream to someday be producer.&nbsp; My family's not that rich though so it's going to be tough to make it.&nbsp; Seems like people with money get breaks.&nbsp; Some cat from my 'hood tho.&nbsp;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Apple Push Notifications on Rails</title>
		<link>http://www.metabates.com/2009/07/24/apple-push-notifications-on-rails/</link>
		<pubDate>Sat, 25 Jul 2009 01:06:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=250</guid>
		<description></description>
		<content:encoded><![CDATA[The other night I submitted a new iPhone application to the Apple Store. The app, which I'll speak about when, and if it gets approved, uses the new Apple Push Notification service available in iPhone OS 3.0. On the server side I have a Rails application that I am using to send the notifications to Apple. The problem I ran into was how.

Enter the APN on Rails gem. While searching I found one plugin for Rails that mostly worked for me, Sam Soffes' apple_push_notification plugin. It was a great place to start, but I found that there were things that didn't suite me. For starters, not having any tests is always a big turn off for me when it comes to any code. I also didn't like that you didn't need to save a notification in order to send it. That means you don't have a record of what was sent and when. I also wanted to have devices stored separately from the notification. Finally, I wanted to be able to easily configure the plugin. Sam's was using constants that would need to be changed when it hit production.

So, with all that said and done I took Sam's great work, ripped it apart, and put it back together again, this time in gem form instead of a plugin, and here it is.

There are a few migrations, a few models, and a few Rake tasks, but here is the basic idea of how it works:

<script src="http://gist.github.com/154516.js"></script>

To get a better understanding of exactly how it works, and what it does, I highly recommend reading the <a href="http://apnonrails.metabates.com/">RDOC</a>.

There are a few things I still would like to add, for example, a controller to do CRUD for devices so iPhones can register with the Rails app. I'd also like to add a task that talks to Apple and finds out which devices are no longer accepting messages so they can be removed.

If you'd like to contribute, please feel free and for the project on GitHub: 
<a href="http://github.com/markbates/apn_on_rails/tree">http://github.com/markbates/apn_on_rails/tree</a>

Again, a special thanks to Fabien Penso and Sam Soffes for their initial work on this project.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date>2009-07-24 20:06:10</wp:post_date>
		<wp:post_date_gmt>2009-07-25 01:06:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apple-push-notifications-on-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apn"><![CDATA[apn]]></category>
		<category domain="post_tag" nicename="apple"><![CDATA[apple]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iphone]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="push-notification"><![CDATA[push notification]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>191</wp:comment_id>
			<wp:comment_author><![CDATA[Jerod Santo]]></wp:comment_author>
			<wp:comment_author_email>jerod.santo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.jerodsanto.net</wp:comment_author_url>
			<wp:comment_author_IP>72.206.113.224</wp:comment_author_IP>
			<wp:comment_date>2009-07-25 14:59:02</wp:comment_date>
			<wp:comment_date_gmt>2009-07-25 19:59:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very cool Mark, thanks for releasing this!

I have been using [[UIDevice currentDevice] uniqueIdentifier] to register unique IDs with my Rails app. Is the device token sufficient to replace my current unique string?

I agree that adding a RESTful controller to the gem would be a nice addition. How are you aggregating device tokens currently?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>192</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.48.193.147</wp:comment_author_IP>
			<wp:comment_date>2009-07-25 15:43:08</wp:comment_date>
			<wp:comment_date_gmt>2009-07-25 20:43:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Jerod, glad you like it.  Here is a trimmed down (ie, I took out app specific stuff) version of what I have in my main app delegate:

http://gist.github.com/154957

That's how Apple recommends you set your app up for push notifications. It will automatically give the users the pop-up asking them about APN and install it in the systems settings.

As you can see the call back gives you a NSData version of the device token, which is what you need to send to Apple with the notification message you want to push. 

I have a Device object that uses ObjectiveResource to talk to my Rails app and register the device token. 

Does that help?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>193</wp:comment_id>
			<wp:comment_author><![CDATA[Jerod Santo]]></wp:comment_author>
			<wp:comment_author_email>jerod.santo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.jerodsanto.net</wp:comment_author_url>
			<wp:comment_author_IP>72.206.113.224</wp:comment_author_IP>
			<wp:comment_date>2009-07-26 08:43:23</wp:comment_date>
			<wp:comment_date_gmt>2009-07-26 13:43:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mark-

Yes, that helps. Thanks.

Once installed and migrated, I assume we can safey modify the devices table without causing any problems. For instance, I'd like to associate each device to a User, which would require an extra field. No problems there?

As far as adding support for removing devices based on Apple feedback, maybe take a look at this project on GitHub which seems to have done most of the work already (again, sans tests).

http://github.com/jdg/Feedback/tree/master]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>194</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.48.193.147</wp:comment_author_IP>
			<wp:comment_date>2009-07-26 08:53:53</wp:comment_date>
			<wp:comment_date_gmt>2009-07-26 13:53:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the heads up on the feedback project Jerod, it definitely looks like it is a good start to get me where I need to be. I'll work on getting it incorporated.

You should be able to add to a user_id column onto the devices table. I might make modifications to the table down the line, but user_id won't be a column I add. Worse case scenario you might have to modify a future migration to avoid conflicts, but that's pretty darn easy.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>195</wp:comment_id>
			<wp:comment_author><![CDATA[Carson McDonald]]></wp:comment_author>
			<wp:comment_author_email>carson@ioncannon.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.ioncannon.net/</wp:comment_author_url>
			<wp:comment_author_IP>74.143.8.234</wp:comment_author_IP>
			<wp:comment_date>2009-07-27 11:28:59</wp:comment_date>
			<wp:comment_date_gmt>2009-07-27 16:28:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Am I missing something or will this make an APN connection for any call to notifications? If that is so you may want to warn people not to call it for every message. I see there is a rake task but even that could cause issues if people try to call it every minute.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>196</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-07-27 12:17:39</wp:comment_date>
			<wp:comment_date_gmt>2009-07-27 17:17:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Carson, not to worry it doesn't make a call to Apple for every message. When you call APN::Notifications.send_notifications it finds all the unsent messages in the db. If there are messages that need to be sent, then it opens up one connection to Apple and pushes all the notifications through that. If there aren't any messages, then it does nothing. Of course, it is possible to call that method after you create a new notification, but there's not much I can do about that. Apple will shut those people down pretty quickly for constantly opening/closing connections.

Does that answer your question?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>197</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-07-27 12:22:26</wp:comment_date>
			<wp:comment_date_gmt>2009-07-27 17:22:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Carson, I also just updated the README to be a bit more explicit about this: 

<pre><code>
  $ ./script/console
  >> device = APN::Device.create(:token => "XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX")
  >> notification = APN::Notification.new
  >> notification.device = device
  >> notification.badge = 5
  >> notification.sound = true
  >> notification.alert = "foobar"
  >> notification.save
</code></pre>

You can use the following Rake task to deliver your notifications:
<pre><code>
  $ rake apn:notifications:deliver
</code></pre>

The Rake task will find any unsent notifications in the database. If there aren't any notifications
it will simply do nothing. If there are notifications waiting to be delivered it will open a single connection
to Apple and push all the notifications through that one connection. Apple does not like people opening/closing
connections constantly, so it's pretty important that you are careful about batching up your notifications so
Apple doesn't shut you down.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>198</wp:comment_id>
			<wp:comment_author><![CDATA[Carson McDonald]]></wp:comment_author>
			<wp:comment_author_email>carson@ioncannon.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.ioncannon.net/</wp:comment_author_url>
			<wp:comment_author_IP>74.143.8.234</wp:comment_author_IP>
			<wp:comment_date>2009-07-27 12:50:38</wp:comment_date>
			<wp:comment_date_gmt>2009-07-27 17:50:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mark, yep that change to the README is what I was thinking. People should be somewhat careful sending the notifications as it seems there is some threshold that gets you shut down. 

I've actually been thinking it would be nice if there was a module for something like RabbitMQ that would just keep a persistent connection open and let the user do the notifications using normal message queues and get removes via subscriptions.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>199</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-07-27 14:28:17</wp:comment_date>
			<wp:comment_date_gmt>2009-07-27 19:28:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Carson I would love to see a project like that! The question is will Apple let you keep a connection open constantly like that? I suppose if it gets dropped you could detect it and re-open it. I still fear that they might not be too thrilled about an 'always-on' connection.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>207</wp:comment_id>
			<wp:comment_author><![CDATA[Fabien Penso]]></wp:comment_author>
			<wp:comment_author_email>fabienpenso@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.penso.info/</wp:comment_author_url>
			<wp:comment_author_IP>90.35.220.117</wp:comment_author_IP>
			<wp:comment_date>2009-08-01 17:25:34</wp:comment_date>
			<wp:comment_date_gmt>2009-08-01 22:25:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Apple asks for it, they said they had no problem with you keeping connected during WWDC. That's what's my (private) version of my Rails plugin is doing, using backgroundrb. I just had no time to release it to the public as I want to first run my service, then I'll clean a bit of the code and release it on github.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>208</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.48.193.147</wp:comment_author_IP>
			<wp:comment_date>2009-08-01 18:28:40</wp:comment_date>
			<wp:comment_date_gmt>2009-08-01 23:28:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Fabien, that's good to know. I know they like it when you bulk deliver, but I didn't think they would be good about having a persistent connection.

With the latest version, 0.3.0, I've wrapped the connection stuff, so you could pretty easily have it run forever with something like this:

<script src="http://gist.github.com/159858.js"></script>

I might put that in that version, a binary that you can run in the background that opens the connection and keeps polling for new notifications and delivers them.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>219</wp:comment_id>
			<wp:comment_author><![CDATA[Corey M]]></wp:comment_author>
			<wp:comment_author_email>corey@fullofdesign.ca</wp:comment_author_email>
			<wp:comment_author_url>http://fullofdesign.ca</wp:comment_author_url>
			<wp:comment_author_IP>69.156.154.105</wp:comment_author_IP>
			<wp:comment_date>2009-08-27 02:42:17</wp:comment_date>
			<wp:comment_date_gmt>2009-08-27 07:42:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mark, First up thanks in advance for this wonderful gem, its fantastic how easy it is to get up and running.

I'm wondering if you have any benchmarks for large scale notifications (say 10000 devices on 5 min intervals). I'm wondering about the consequences of having a join to get to the device token when you could store the token as a 32 byte blob right on the notification. Some quick console hacking.

&gt;&gt; token_in = "ffffffffdbc0ce239b3d15e96efe4525941ebb8d8b65bc241eceffffffffffff" #Masked for security
=&gt; "ffffffffdbc0ce239b3d15e96efe4525941ebb8d8b65bc241eceffffffffffff"
&gt;&gt; token_in_int = "0x#{token_in}".to_i(16)
=&gt; 111987304994859507620189752773925056744031439616140324133437380330181909811521
&gt;&gt; token_in_int.size
=&gt; 32
&gt;&gt; token_in.size
=&gt; 64
&gt;&gt; token_out = token_in_int.to_s(16)
=&gt; "ffffffffdbc0ce239b3d15e96efe4525941ebb8d8b65bc241eceffffffffffff"
&gt;&gt; token_out.scan(/......../).join(" ") == token_in.scan(/......../).join(" ")
=&gt; true

I'm not sure how easy it is (or isn't) to attach a byte array to an AR::Base but for an app we're building we're dealing with a lot of notifications to a lot of devices so I'm wondering if getting the token down to a 32 byte blob would make it easy to just tack it onto the notification and save a join in the query.

Just a thought,

Corey]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>220</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-08-27 09:41:32</wp:comment_date>
			<wp:comment_date_gmt>2009-08-27 14:41:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Corey, I'm glad you like the gem. I aim to please. :) 

I can't say I have those types of benchmarks, as I've been working on a much smaller scale in terms of notifications. I designed the plugin to use normalized data, so I didn't have to keep storing redundant info in the notifications table. You could easily pull it all back in one query, if you think that's a bottleneck. What I can say is that pulling 10k records in 5 minutes with AR is totally doable, I don't think that's where any bottlenecks would occur. If you get some benchmarks I would love to see them.

As for storing byte arrays to AR, I'm sure it's possible, again it's not something I've had to do before with AR. If you want to fork the project on GitHub and can come up with some great performance enhancements that make sense, I'll gladly pull that back into the project. I love when others contribute and make the project better.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>221</wp:comment_id>
			<wp:comment_author><![CDATA[Sam Soffes]]></wp:comment_author>
			<wp:comment_author_email>sam@samsoff.es</wp:comment_author_email>
			<wp:comment_author_url>http://samsoff.es</wp:comment_author_url>
			<wp:comment_author_IP>24.253.236.135</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 01:32:12</wp:comment_date>
			<wp:comment_date_gmt>2009-09-07 06:32:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks cool. Thanks for the kind words. Yours looks pretty cool.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>223</wp:comment_id>
			<wp:comment_author><![CDATA[James N]]></wp:comment_author>
			<wp:comment_author_email>rivertiger@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://codeninja.ning.com</wp:comment_author_url>
			<wp:comment_author_IP>71.107.164.83</wp:comment_author_IP>
			<wp:comment_date>2009-09-17 04:34:26</wp:comment_date>
			<wp:comment_date_gmt>2009-09-17 09:34:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you know if your plugin will allow for notifications to be sent for unlocked phones?  I heard that it doesn't always work with unlocked phones...any details on this subject? Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Almost There... Book Wise.</title>
		<link>http://www.metabates.com/2009/07/27/almost-there-book-wise/</link>
		<pubDate>Tue, 28 Jul 2009 01:54:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=260</guid>
		<description></description>
		<content:encoded><![CDATA[I'm now entering the home stretch of writing the Distributed Programming with Ruby book. I'm just a few weeks away, well, technically I'm hours away from finishing the last chapter (Delayed Job) in the official table of contents, however, I'm going to add another chapter and a half. Why? Mostly because I'm a glutton for punishment. That and I want to deliver the best book possible. The extra chapter and a half, not featured in the table of contents below, will be on MapReduce technologies. It's a really hot topic, and I think it will fit well in the book. What do you think?

<del datetime="2009-07-29T03:01:37+00:00">Unfortunately, the "Rough Cuts" book on O'Reilly's Safari site hasn't been updated in nearly 3 months! I'm not sure why. I keep asking my editor to update it, but it hasn't happened yet. I'm sure it will soon, especially since the first draft of the entire manuscript will be done in just a few weeks!</del>

UPDATE: Today they updated the "Rough Cuts" with nearly the latest revisions. It's still missing the chapters on Delayed Job and BackgrounDRb, but it's closer than it was yesterday. 

Anyway, as a public service announcement to you, the readers, I thought I would the table of contents as it stands right now, so you have a better idea of what the book is going to be about. So here it goes:

<script src="http://gist.github.com/156861.js"></script>

What do you think? Does it look good? Is this something you'd buy? Let me know. This is your chance to have an influence on a book. If you think something is missing or should be laid out differently, please let me know, it might just make it into the final product.

Ok, enough delaying here, let me get back to writing so I can finish up the Delayed Job chapter.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2009-07-27 20:54:02</wp:post_date>
		<wp:post_date_gmt>2009-07-28 01:54:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>almost-there-book-wise</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="delayed-job"><![CDATA[delayed job]]></category>
		<category domain="post_tag" nicename="distributed-programming-with-ruby"><![CDATA[distributed programming with ruby]]></category>
		<category domain="post_tag" nicename="drb"><![CDATA[drb]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="map-reduce"><![CDATA[map reduce]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>200</wp:comment_id>
			<wp:comment_author><![CDATA[Adrian Madrid]]></wp:comment_author>
			<wp:comment_author_email>aemadrid@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>97.117.65.195</wp:comment_author_IP>
			<wp:comment_date>2009-07-27 21:58:46</wp:comment_date>
			<wp:comment_date_gmt>2009-07-28 02:58:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks very good. I'll check out the rough cut.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>201</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.48.193.147</wp:comment_author_IP>
			<wp:comment_date>2009-07-27 22:07:50</wp:comment_date>
			<wp:comment_date_gmt>2009-07-28 03:07:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks. The Rough Cuts will be a lot nicer when they finally update it. :) I assume at this point they are just waiting for the full first draft to update it, which is just a couple of weeks away at this point. Please let me know what feedback you have. I'd love to hear it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>202</wp:comment_id>
			<wp:comment_author><![CDATA[Daniel Huckstep]]></wp:comment_author>
			<wp:comment_author_email>darkhelmet@darkhelmetlive.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.darkhax.com/</wp:comment_author_url>
			<wp:comment_author_IP>96.52.140.205</wp:comment_author_IP>
			<wp:comment_date>2009-07-28 23:54:03</wp:comment_date>
			<wp:comment_date_gmt>2009-07-29 04:54:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Personally, not that excited. The problem for me is that while this is relevant now, what's to say half of these technologies will even be around in 2 years? The dragon book teaches fundamentals that were valid when the book originally came out, and are still valid today. I'd be more excited to read a book about distributed programming fundamentals, and then worry about learning the application with ruby, and existing technologies on my own. The book could be applied to virtually any language then, and not just ruby. That's just one of my little preferences when it comes to books.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>203</wp:comment_id>
			<wp:comment_author><![CDATA[Claus Hausbergre]]></wp:comment_author>
			<wp:comment_author_email>chausberger@gmx.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.193.164.178</wp:comment_author_IP>
			<wp:comment_date>2009-07-29 03:18:51</wp:comment_date>
			<wp:comment_date_gmt>2009-07-29 08:18:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sounds very good. Looking forward to reading your distributed Ruby book. Something like this has been missing for a long time.
One question. Does the book also cover performance tuning and scalability of distributed Ruby programs? This is often an issue. 
I am playing with JRuby a lot these days. Is this also covered when there are difference for some libraries in comparison to the C version?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>204</wp:comment_id>
			<wp:comment_author><![CDATA[Gaveen]]></wp:comment_author>
			<wp:comment_author_email>gaveens@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://gaveen.owain.org</wp:comment_author_url>
			<wp:comment_author_IP>124.43.167.49</wp:comment_author_IP>
			<wp:comment_date>2009-07-30 11:21:58</wp:comment_date>
			<wp:comment_date_gmt>2009-07-30 16:21:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Contents definitely look great. Look forward to the book. It's good to see finally a good book coming up in Ruby distributed programming.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>205</wp:comment_id>
			<wp:comment_author><![CDATA[Edward Ocampo-Gooding]]></wp:comment_author>
			<wp:comment_author_email>edward@edwardog.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.70.29.195</wp:comment_author_IP>
			<wp:comment_date>2009-07-31 11:09:09</wp:comment_date>
			<wp:comment_date_gmt>2009-07-31 16:09:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is shaping up to be pretty awesome!

Looking forward to reading your book Mark.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>APN on Rails 0.3.0 Released</title>
		<link>http://www.metabates.com/2009/07/31/apn-on-rails-0-3-0-released/</link>
		<pubDate>Sat, 01 Aug 2009 04:51:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=264</guid>
		<description></description>
		<content:encoded><![CDATA[The latest version of Apple Push Notifications on Rails (APN on Rails) has been released. This release brings a few bug fixes, a new migration, and Feedback processing.

Installing/upgrading is easy:

<code>$ sudo gem install apn_on_rails
$ ruby script/generate apn_migrations
$ rake db:migrate
</code>

It's important to always run the migrations generator after each update to get the latest database schema needed for the the gem.

To use the new Feedback integration you have to first make sure that you update the new <code>last_registered_at</code> column when your iPhone application calls home. This column is checked against the timestamp Apple returns with the device token. If the <code>last_registered_at</code> is older than Apple's date then the device is deleted, otherwise the Feedback is ignored.

To get and process the list of devices from Apple's Feedback service just run the following Rake task:

<code>$ rake apn:feedback:process</code>

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2009-07-31 23:51:02</wp:post_date>
		<wp:post_date_gmt>2009-08-01 04:51:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apn-on-rails-0-3-0-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apn"><![CDATA[apn]]></category>
		<category domain="post_tag" nicename="apple"><![CDATA[apple]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iphone]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="push-notification"><![CDATA[push notification]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>209</wp:comment_id>
			<wp:comment_author><![CDATA[Russell Quinn]]></wp:comment_author>
			<wp:comment_author_email>mail@russellquinn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.russellquinn.com</wp:comment_author_url>
			<wp:comment_author_IP>188.60.34.40</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 10:18:35</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 15:18:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Mark,

Thanks a lot for your work on this gem. I'm trying to get it to run alongside my current Rails backend (which already has a devices model, etc.) However my first problem is that I can't get the Rake tasks to run. I've followed the README and created an example notification via the console with no problem.

But rake apn:notifications:deliver, just returns:

rake aborted!
uninitialized constant APN

Any idea of the problem?

Thanks and take care,

Russell.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>210</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 10:23:18</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 15:23:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Russell, did you add the following to your Rakefile:

begin
  require 'apn_on_rails_tasks'
rescue MissingSourceFile => e
  puts e.message
end

Can you also run the task with the --trace option and send me the stack trace, that should help point out where the problem is. 

Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>211</wp:comment_id>
			<wp:comment_author><![CDATA[Russell Quinn]]></wp:comment_author>
			<wp:comment_author_email>mail@russellquinn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.russellquinn.com</wp:comment_author_url>
			<wp:comment_author_IP>188.60.34.40</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 10:48:39</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 15:48:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey,

Thanks for the quick reply. I've added the necessary require to my Rakefile.

Trace dump is:

** Invoke apn:notifications:deliver (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute apn:notifications:deliver
rake aborted!
uninitialized constant APN
/Library/Ruby/Gems/1.8/gems/activesupport-2.3.2/lib/active_support/dependencies.rb:443:in `load_missing_constant'
/Library/Ruby/Gems/1.8/gems/activesupport-2.3.2/lib/active_support/dependencies.rb:80:in `const_missing'
/Library/Ruby/Gems/1.8/gems/activesupport-2.3.2/lib/active_support/dependencies.rb:92:in `const_missing'
/Library/Ruby/Gems/1.8/gems/apn_on_rails-0.3.0/lib/apn_on_rails/tasks/apn.rake:7
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:636:in `call'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:636:in `execute'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:631:in `each'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:631:in `execute'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:597:in `invoke_with_call_chain'
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/monitor.rb:242:in `synchronize'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:590:in `invoke_with_call_chain'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:583:in `invoke'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:2051:in `invoke_task'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:2029:in `top_level'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:2029:in `each'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:2029:in `top_level'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:2068:in `standard_exception_handling'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:2023:in `top_level'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:2001:in `run'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:2068:in `standard_exception_handling'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake.rb:1998:in `run'
/Library/Ruby/Gems/1.8/gems/rake-0.8.7/bin/rake:31
/usr/bin/rake:19:in `load'
/usr/bin/rake:19]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>212</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 10:54:27</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 15:54:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sounds like you're missing:

require 'apn_on_rails'

I have mine at the bottom of environment.rb. 

Let me know if that works for you.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>213</wp:comment_id>
			<wp:comment_author><![CDATA[Russell Quinn]]></wp:comment_author>
			<wp:comment_author_email>mail@russellquinn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.russellquinn.com</wp:comment_author_url>
			<wp:comment_author_IP>188.60.34.40</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 11:10:29</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 16:10:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bingo! I had mine in ApplicationController. Thanks Mark, after swapping Rails for Objective C for the last 12 months, I'm a little rusty getting back into it.

Thanks for you help with this problem and thanks for wrapping up all this in your gem. The test now worked!

Russell]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>214</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 11:14:33</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 16:14:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Glad I could help. :) You'll have to let me know when you're app is released.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[Russell Quinn]]></wp:comment_author>
			<wp:comment_author_email>mail@russellquinn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.russellquinn.com</wp:comment_author_url>
			<wp:comment_author_IP>77.58.227.5</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 13:23:37</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 18:23:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, I have one suggestion!

It would be great to fix a limit on the number of notifications that the rake task processes per call. In my case, the notifications are to alert users that a new download is available. I want to spread these out over a certain time period to avoid server load spikes.

Russell]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>216</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 13:26:42</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 18:26:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That sounds like a reasonable request. My I suggest forking it, and adding it?

http://github.com/markbates/apn_on_rails/tree/master

I would set a configatron setting for it, but have it overridable with an ENV param into the Rake task.

If you do it, I'd quite happily merge it back in.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>217</wp:comment_id>
			<wp:comment_author><![CDATA[Russell Quinn]]></wp:comment_author>
			<wp:comment_author_email>mail@russellquinn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.russellquinn.com</wp:comment_author_url>
			<wp:comment_author_IP>77.58.227.5</wp:comment_author_IP>
			<wp:comment_date>2009-08-12 13:42:47</wp:comment_date>
			<wp:comment_date_gmt>2009-08-12 18:42:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok, I'll look into this tomorrow (UTC+2). Thanks Mark.

Russell.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>218</wp:comment_id>
			<wp:comment_author><![CDATA[Russell Quinn]]></wp:comment_author>
			<wp:comment_author_email>mail@russellquinn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.russellquinn.com</wp:comment_author_url>
			<wp:comment_author_IP>188.60.34.40</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 08:33:12</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 13:33:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, I'm now actually using two queues to deal with my subscription publishing queue and the throttling is actually done in the first one, so I haven't made any changes to APN on Rails. Sorry :(

I'll be sure to add a credit to you in the app. Thanks again Mark.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>224</wp:comment_id>
			<wp:comment_author><![CDATA[Russell Quinn]]></wp:comment_author>
			<wp:comment_author_email>mail@russellquinn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.russellquinn.com</wp:comment_author_url>
			<wp:comment_author_IP>77.58.227.5</wp:comment_author_IP>
			<wp:comment_date>2009-09-27 18:00:20</wp:comment_date>
			<wp:comment_date_gmt>2009-09-27 23:00:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Mark!

So, the app is released now, but I'm having major problems with the apn:feedback:process rake task. It's iterating over around 2,500 devices that we have registered for notifications, but consumes huge amounts of memory and ends up crashing Apache :-/

Russell.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>225</wp:comment_id>
			<wp:comment_author><![CDATA[Russell Quinn]]></wp:comment_author>
			<wp:comment_author_email>mail@russellquinn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.russellquinn.com</wp:comment_author_url>
			<wp:comment_author_IP>188.60.34.40</wp:comment_author_IP>
			<wp:comment_date>2009-09-29 04:33:10</wp:comment_date>
			<wp:comment_date_gmt>2009-09-29 09:33:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello again,

I took a look at the code from Git Hub and maybe the issue was that the Apple feedback service was down, or there was a problem with it in some way? Could you see a possibility that erroneous data could cause the process to spiral out of control?

Feel free to contact me by e-mail as there's no comment notification for this blog.

Thanks,

Russell.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>246</wp:comment_id>
			<wp:comment_author><![CDATA[Rebecca]]></wp:comment_author>
			<wp:comment_author_email>rebeccanesson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>128.103.147.149</wp:comment_author_IP>
			<wp:comment_date>2009-12-01 10:17:52</wp:comment_date>
			<wp:comment_date_gmt>2009-12-01 15:17:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mark, 
Thanks for apn_on_rails.  It's been a big help.  I'd like to include a custom property in some of my notification payloads and I can't see a way to do that in apn_on_rails without modifying the gem code.  Is this my best option? 
Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>247</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-12-01 10:28:29</wp:comment_date>
			<wp:comment_date_gmt>2009-12-01 15:28:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Rebecca, yeah, that's something I missed in the first pass. Someone submitted a patch for it a while back, but I don't take patches without tests. The best, and easiest way to add it, is to fork the gem on GitHub, make the changes and build the gem. If you add tests and send me a pull request, I'd be more than happy to pull them back into the main project.

On a side note, I'm actively looking for a maintainer of the library, as I no longer have the time to maintain it, and I don't write iPhone apps anymore. :(

Hope that helps.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>248</wp:comment_id>
			<wp:comment_author><![CDATA[Rebecca]]></wp:comment_author>
			<wp:comment_author_email>rebeccanesson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://prx.org</wp:comment_author_url>
			<wp:comment_author_IP>128.103.147.149</wp:comment_author_IP>
			<wp:comment_date>2009-12-01 13:06:08</wp:comment_date>
			<wp:comment_date_gmt>2009-12-01 18:06:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mark,  I'm following your suggestion and forking the project on GITHub.  Would you be willing to share the patch you received earlier?  You can send it to me by email (I assume you have access to commenter email addresses...).  Once I get it working and add tests I'll send a pull request.  Depending on how this goes, I and my organization may be able to take on maintaining the library.  
Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>259</wp:comment_id>
			<wp:comment_author><![CDATA[Art]]></wp:comment_author>
			<wp:comment_author_email>kineticac@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://artchang.com</wp:comment_author_url>
			<wp:comment_author_IP>173.11.115.14</wp:comment_author_IP>
			<wp:comment_date>2010-01-04 19:51:00</wp:comment_date>
			<wp:comment_date_gmt>2010-01-05 00:51:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would also like to put in custom properties so that I can tell the App which page to open.  Rebecca / Mark: any leads on this?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Introducing Warp Drive for Rails</title>
		<link>http://www.metabates.com/2009/10/07/introducing-warp-drive-for-rails/</link>
		<pubDate>Wed, 07 Oct 2009 13:00:19 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[At work recently we had a need to build a large Rails application that we then wanted to, for lack of a better word, subclass. Unfortunately there is no real good way of doing that. Rails Engines and templates have way too may limitations. We wanted to bundle up the entire Rails app (models, controllers, views, routes, migrations, configurations, libs, assets, etc... everything!), but there was no good way of doing that. Well, now there is, it's called the Warp Drive.

I've decided to just include my README file below to explain what it is, since it's a bit lengthy, and I don't feel like retyping.

This is still in it's early stages, so use with care, but it does seem to be working for us on a daily basis. Let me know what you think!
<h2>What is Warp Drive?</h2>
Warp Drive is what Rails Engines wish they could be, and more! They kick Rails templates in the ass, and they beat keeping an ever evolving base Rails app up to date.
<h3>What are Rails Engines?</h3>
Rails Engines allow you to package up some of a Rails app (controllers, models, views, routes, libs) and put them in a plugin that can be included into a new Rails app, thereby giving it the functionality you had in the engine. That sounds good, but what about the downsides of using an engine? Well, you can't override or extend any of the functionality from the engine in your main application. You can hack at the plugin, but now you've made it difficult to update. So what do you do if you want to add or alter a method to a controller or model? What do you do if you want to change the look and feel of a view? You have to copy everything into your main application. Boo!

Rails Engines also don't allow you to package up migrations, assets, plugins, initializers, etc... All the fun stuff that you've come to know and love about a Rails application.
<h3>Enter the Warp Drive!</h3>
So what is a Warp Drive? Great question. To put it simply a Warp Drive is a standard, full featured, Rails application that you can easily bundle up into a Ruby Gem, and include into another Rails app. That second Rails app now has all the power of the first Rails. That is all there is to it.
<h2>Creating a Warp Drive.</h2>
Let's assume we have an application that implements AuthLogic for handling user registration/authentication. We have controllers, views, models, plugins, initializers, configurations, migrations, tasks, etc... it's a full featured fully functional Rails application, we call it authenticator.

We want to turn our authenticator application into a Warp Drive. We can do it in three simple steps, the first two steps you only need to do the first time, to set everything up.
<ol>
	<li><code>$ gem install warp_drive</code></li>
	<li><code>$ warpify</code>
That will add a little bit of code to your <code>Rakefile</code>. That code simply requires the Warp Drive gem, and gives you hooks to configure the gem of your Warp Drive application.</li>
	<li>$ <code>rake warp_drive:compile</code> (<code>rake warp_drive:install</code>)This will either compile your gem for your (<code>warp_drive:compile</code>) or compile and install your gem (<code>warp_drive:install</code>)</li>
</ol>
That's it! You should now have your Rails application bundled up and/or installed as a RubyGem!
<h2>Using a Warp Drive.</h2>
With your fancy new Warp Drive, authenticator, built and installed how do you use it in that new application your building? Again, it's stupid easy, and it only takes one step, that only needs to be run once:
<ol> <code>$ install_warp_drive authenticator</code></ol>
That will put a few lines of code in your <code>Rakefile</code>, so you have access to all the <code>Rakefile</code> tasks in your Warp Drive, and a line in your <code>config/environment.rb</code> so that it will load your Warp Drive when you launch your application.

That's it! You're done. Now you can run <code>rake db:migrate</code> to run the migrations from both your Warp Drive and your new application. Enjoy!
<h2>Overriding, Extending, and Other Such Fun Things</h2>
<h3>Overriding and Extending</h3>
You've been enjoying your new Warp Drive back application for a little while now, but you decide you really need to change an action in your controller, how do you go about that? Simple, just like you would any normal alteration to a Ruby class.

Example:
Here is what the action looks like in our Warp Drive UsersController:
<pre><code>
  def new
    @user = User.new
  end
</code></pre>
In our new application we can just open up the UsersController like this:
<pre><code>
  class UsersController &lt; ApplicationController

    def new_with_default_name
      new_without_default_name
      @user.login = 'default_name'
    end

    alias_method_chain :new, :default_name

  end
</code></pre>
Viola! The same works for any thing else in the system, models, libs, etc... In our example we used <code>alias_method_chain</code> to retain the original method, but we could have completely rewritten the method as well.

You can also plop in a new view and it will override the view that was in your Warp Drive. The sky is really the limit.
<h3>Assets</h3>
You can easily bundle assets from your public directory in your Warp Drive. Just make sure they are in folders called <code>warp_drive</code>. Those folders will then be symlinked to your new project's public directory when the application starts up.
<h3>Keep Those Rake Tasks Private!</h3>
We all them, Rake tasks we have created to help us do all sorts of things, and we usually don't want them to ship. Well, Warp Drive has you covered there. Just place your tasks in folders called <code>private</code> and Bob's your uncle they won't be available in the compiled gem.
<pre><code>
  lib/
    tasks/
      foo.rake
      private/
        bar.rake
</code></pre>
In this example <code>foo.rake</code> will be available to clients of your Warp Drive, but <code>bar.rake</code> will not be.

Copyright (c) 2009 Mark Bates]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2009-10-07 08:00:19</wp:post_date>
		<wp:post_date_gmt>2009-10-07 13:00:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-warp-drive-for-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="engines"><![CDATA[engines]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="warp-drive"><![CDATA[warp drive]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>226</wp:comment_id>
			<wp:comment_author><![CDATA[grimen]]></wp:comment_author>
			<wp:comment_author_email>grimen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.226.243.54</wp:comment_author_IP>
			<wp:comment_date>2009-10-08 09:08:16</wp:comment_date>
			<wp:comment_date_gmt>2009-10-08 14:08:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks interesing, will def try it out. One tip though: Avoid "alias_method_chain" when you can rely "super" instead (good 'ol subclassing applies in the sample above). Meta-programming is very useful - but in some cases only overkill/overhead.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>227</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-10-08 09:10:13</wp:comment_date>
			<wp:comment_date_gmt>2009-10-08 14:10:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@grimen, agreed, but in the above example, I'm not sub-classing the UsersController, but rather re-opening it, so super wouldn't work.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>228</wp:comment_id>
			<wp:comment_author><![CDATA[Ariejan de Vroom]]></wp:comment_author>
			<wp:comment_author_email>ariejan@ariejan.net</wp:comment_author_email>
			<wp:comment_author_url>http://ariejan.net</wp:comment_author_url>
			<wp:comment_author_IP>82.92.155.84</wp:comment_author_IP>
			<wp:comment_date>2009-10-08 09:47:06</wp:comment_date>
			<wp:comment_date_gmt>2009-10-08 14:47:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This sounds really cool! But, can you combine different warp drives?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>229</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-10-08 09:50:31</wp:comment_date>
			<wp:comment_date_gmt>2009-10-08 14:50:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Ariejan, not yet. That's coming though. I want to be able to add multiple warp drives to a Rails app.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>230</wp:comment_id>
			<wp:comment_author><![CDATA[Micah Geisel]]></wp:comment_author>
			<wp:comment_author_email>originofstorms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://botandrose.com</wp:comment_author_url>
			<wp:comment_author_IP>24.22.31.197</wp:comment_author_IP>
			<wp:comment_date>2009-10-08 13:00:54</wp:comment_date>
			<wp:comment_date_gmt>2009-10-08 18:00:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[a comment! ... you should add a link to the project; i assume its on github?

a question? ... in your UsersController example above, where is the original users_controller.rb, and how are you making sure rails' lazy-class-loading method-missing magic finds the original first, and then your override?

awesome stuff here! props for getting something working.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>231</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-10-08 13:05:16</wp:comment_date>
			<wp:comment_date_gmt>2009-10-08 18:05:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Micah, here's the github link, http://github.com/markbates/warp_drive sorry about that. In the example above the original UsersController is in the 'authenticator' WarpDrive. I didn't put in all the steps to build the 'authenticator' app, because all you need to do is build a 'standard' Rails app. As far as the magic is concerned, there is definitely a lot of magic in there, I'm not going to lie to you. :) There is definitely some aliasing and reworking of some private Rails methods to get this to work. It would be nice if they had a public initialization api, that let you hook into all of the initialization steps, but alas, they don't. Check out the project on GitHub, if you're curious as to how I did it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>232</wp:comment_id>
			<wp:comment_author><![CDATA[Oliver]]></wp:comment_author>
			<wp:comment_author_email>kiessler@inceedo.com</wp:comment_author_email>
			<wp:comment_author_url>http://inceedo.com</wp:comment_author_url>
			<wp:comment_author_IP>87.79.171.229</wp:comment_author_IP>
			<wp:comment_date>2009-10-09 04:24:14</wp:comment_date>
			<wp:comment_date_gmt>2009-10-09 09:24:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I like the idea!  But I wonder how "Warp Drive" compares to "mountable apps" in Rails 3?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>233</wp:comment_id>
			<wp:comment_author><![CDATA[Dan PIckett]]></wp:comment_author>
			<wp:comment_author_email>dpickett@enlightsolutions.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.enlightsolutions.com/articles/fridays-software-enlightenment-5-gtd-how-i-get-things-done-edition/</wp:comment_author_url>
			<wp:comment_author_IP>173.48.57.114</wp:comment_author_IP>
			<wp:comment_date>2009-10-09 08:31:22</wp:comment_date>
			<wp:comment_date_gmt>2009-10-09 13:31:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for open sourcing this! I definitely have a few projects where warp drive is a plausible solution.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>234</wp:comment_id>
			<wp:comment_author><![CDATA[Twitted by aberant]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://realurl.org/twitted.php?id=4734997766</wp:comment_author_url>
			<wp:comment_author_IP>94.23.51.159</wp:comment_author_IP>
			<wp:comment_date>2009-10-09 09:11:19</wp:comment_date>
			<wp:comment_date_gmt>2009-10-09 14:11:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was Twitted by aberant [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>235</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-10-09 09:21:46</wp:comment_date>
			<wp:comment_date_gmt>2009-10-09 14:21:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Oliver, honestly, I don't know. Mountable apps are still a bit of 'vaporware', so it's hard to tell. In the meantime, I needed this type of functionality, so I took matters into my own hands. :) Perhaps some of the WarpDrive, or it's ideas, will make it into 3.0. I'll be really disappointed if they cripple mountable apps like they did with engines.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>236</wp:comment_id>
			<wp:comment_author><![CDATA[grimen]]></wp:comment_author>
			<wp:comment_author_email>grimen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.226.243.41</wp:comment_author_IP>
			<wp:comment_date>2009-10-10 11:35:48</wp:comment_date>
			<wp:comment_date_gmt>2009-10-10 16:35:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Mark Bates: Actually you can, try. This works for me:

http://github.com/grimen/delayed_job_mailer/blob/master/lib/delayed_job_mailer.rb

Gotta love Ruby!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>237</wp:comment_id>
			<wp:comment_author><![CDATA[Sam Smoot]]></wp:comment_author>
			<wp:comment_author_email>ssmoot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://github.com/wiecklabs</wp:comment_author_url>
			<wp:comment_author_IP>99.189.224.97</wp:comment_author_IP>
			<wp:comment_date>2009-10-21 00:02:58</wp:comment_date>
			<wp:comment_date_gmt>2009-10-21 05:02:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You know, this is actually pretty similar to Harbor (our own OSS framework). We've had it in production for some time. The goal with it is a bit different than Rails. Burned enough by breaking changes in Rails/Merb we decided to do our own thing. Beyond that we wanted to override individual layouts, actions, views, partials, routes, assets, etc, picking and choosing what we wanted to pull in from gemmed, mounted apps like PortAuthority (http://github.com/wiecklabs/port_authority).

Some of our apps are mounting over a dozen individual applications to run as one client facing app.

bc.. run Harbor::Cascade.new(
    ENV['ENVIRONMENT'],
    services,
    Newsroom, PortAuthority, UserManagement, ChannelManagement, SyndicationManagement,
    ReleaseManagement, PhotoManagement, VideoManagement, AudioManagement, 
    AssetManagement, PageManagement, BasketManagement, BulletinManagement,
    Cleat
  )

Then we apply a layout, override a view here and there where necessary and in a few hours we've launched a pretty massive new application for a new client.

Harbor has been 1.0-ish for awhile. We just haven't announced it since we're still putting together our blog (http://wiecklabs.com) and all that jazz. Look at the commit history though, it's a lot more mature than you might imagine for a framework you've never heard of before.

So yeah, the idea is basically that I hate writing the same thing a dozen times over the course of a year. ;-)

Anyways, lookin' good Mark. This is more inline with what I was hoping Mack would eventually evolve into, so it's neat to see you're still innovating.

Of course, even neater would be to ditch Rails, but I understand. :-D]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>238</wp:comment_id>
			<wp:comment_author><![CDATA[Evan Light]]></wp:comment_author>
			<wp:comment_author_email>evan@tiggerpalace.com</wp:comment_author_email>
			<wp:comment_author_url>http://evan.tiggerpalace.com</wp:comment_author_url>
			<wp:comment_author_IP>66.37.87.176</wp:comment_author_IP>
			<wp:comment_date>2009-10-28 14:43:00</wp:comment_date>
			<wp:comment_date_gmt>2009-10-28 19:43:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I love the idea; however, after a couple of hours pairing, we had a great deal of trouble to get a warp drive with a controller with a "hello, world" action to work within another Rails app.  The lack of specs, lack of documentation beyond the README, and the relative complexity of the code make for an extremely steep learning curve.

I would strongly recommend more specs and examples.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>239</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@mackframework.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-10-29 09:02:08</wp:comment_date>
			<wp:comment_date_gmt>2009-10-29 14:02:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Evan, sorry you had such a problem with it. We've been using in it in production on several really complex projects with no problem. There are actually quite a few specs, but they're not where you think they would be. Because of what it is doing the best way to test it is with two applications. If you look at that test_apps folder in the project you will see two Rails apps, Enterprise and Voyager. You install the Enterprise app as a WarpDrive and then run the specs from the Voyager app. That tests that the everything is doing what it is supposed to be doing. I agree more documentation could be useful, but since it's really not doing much, there's not a whole lot more to document. What problems were you running into exactly? I'd love to help resolve them.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>257</wp:comment_id>
			<wp:comment_author><![CDATA[Rich Apodaca]]></wp:comment_author>
			<wp:comment_author_email>rich_apodaca@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://depth-first.com</wp:comment_author_url>
			<wp:comment_author_IP>76.88.116.246</wp:comment_author_IP>
			<wp:comment_date>2009-12-31 14:41:46</wp:comment_date>
			<wp:comment_date_gmt>2009-12-31 19:41:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Mark - great work - thanks! I've been able to get Warp Drive to work on a blogging engine I'm creating. Everything seems to work except for Authlogic/OpenID authentication.

I've written a summary of my problem here (with links to example code and complete error messages):

http://stackoverflow.com/questions/1986851/authlogic-openid-authentication-fails-using-warp-drive

Any ideas on where this is going wrong?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>A Few Rails Nuggets</title>
		<link>http://www.metabates.com/2009/09/07/a-few-rails-nuggets/</link>
		<pubDate>Tue, 08 Sep 2009 01:23:28 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=282</guid>
		<description></description>
		<content:encoded><![CDATA[So with my book, <a href="http://my.safaribooksonline.com:80/9780321669919">Distributed Programming with Ruby</a>, finally finished, and a nice long weekend I was able to sit down and work on a little pet project of mine. I decided to work on a little site that I could use to track my rather large Pez collection. (Yes, I know, I collect Pez - so what!)

While working on it I got to use some new technologies that I really haven't had a chance to play, so I thought I would talk a bit about some of the ones I liked the most.
<h3>Authlogic</h3>
Love it! Finally a decent authentication system! The thing I love most about it? It doesn't generate a lot of crap in your project. If I were to say one bad thing about it, it would be that it doesn't generate enough in your project. :) I know that sounds silly, but it's the truth. It gives you so much power, without having to generate a ton of lib code and crazy controller code, which is awesome. However, it would be nice if it had a generator that generated a 'basic' application for you. Just a little thing, apart from that, love it!

<a href="http://github.com/binarylogic/authlogic/tree/master">http://github.com/binarylogic/authlogic/tree/master</a>
<h3>Cucumber/Webrat</h3>
I'm sure by now everyone has heard of Cucumber. I'm not going to pretend that I'm the first to that party! Over the last month or so I've really started to use it and it has completely changed my life. That's not an overstatement.

Cucumber lets you write features and scenario in human readable format. Combine that with Webrat, which lets you do things like click buttons and follow links, you can write some amazing tests that look like something a project manager would write! Brilliant!

These tests beat the hell out of Rails integration tests. Trust me! I love watching Cucumber and Webrat click around my site while I just watch.

<a href="http://cukes.info/">http://cukes.info/</a>
<a href="http://github.com/brynary/webrat/tree/master">http://github.com/brynary/webrat/tree/master</a>
<h3>Web App Theme Generator</h3>
This cool little plugin helps you to quickly generate a very useful, and laid out, theme for your application. The themes would be familiar to anyone who has used sites like Lighthouse. They're basic, but they are very well coded and get you on your quickly so you can have something that looks fairly decent.

My only gripe with this plugin is that it is a bit clumsy to use, but thankfully you don't have to run it very often, only when you create a new controller/resource.

<a href="http://gravityblast.com/2009/07/30/2-minutes-admin-layout-with-rails-and-the-web-app-theme-generator/">http://gravityblast.com/2009/07/30/2-minutes-admin-layout-with-rails-and-the-web-app-theme-generator/</a>
<h3>Delayed Job</h3>
The last piece of tech is Delayed Job. I first discovered Delayed Job when I wrote about it in my <a href="http://my.safaribooksonline.com:80/9780321669919">book</a>. It is a great way to handle and process background tasks. It's easy, reliable, and scales really well. I've been using the Collective Idea fork of the project. It has a generator to create the migration you need. It also has a nice binary to run in the background on your server.

I've also been using a little gem I wrote that gives me hooks into Hoptoad, the is_paranoid gem, and a nice subclass for writing workers.

I have been completely enamored with Delayed Job from the first moment I used it, and I'm sure if you haven't checked it out yet, and you do, you'll feel the same!

<a href="http://github.com/collectiveidea/delayed_job/tree/master">http://github.com/collectiveidea/delayed_job/tree/master</a>
<a href="http://github.com/markbates/delayed_job_extras/tree/master ">http://github.com/markbates/delayed_job_extras/tree/master</a>

There you go, that's just a few things I've been playing with lately, that I think are going to become mainstays in any Rails project I work on. Hopefully this has given you a little for for thought on things you can use in your next project.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date>2009-09-07 20:23:28</wp:post_date>
		<wp:post_date_gmt>2009-09-08 01:23:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-few-rails-nuggets</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="authlogic"><![CDATA[authlogic]]></category>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="cucumber"><![CDATA[cucumber]]></category>
		<category domain="post_tag" nicename="delayed-job"><![CDATA[delayed job]]></category>
		<category domain="post_tag" nicename="distributed-programming-with-ruby"><![CDATA[distributed programming with ruby]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="webrat"><![CDATA[webrat]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>222</wp:comment_id>
			<wp:comment_author><![CDATA[UNCATEGORIZED - Code I Almost Wrote - Random Things To Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://random.cgi-biz.com/151-code-i-almost-wrote/</wp:comment_author_url>
			<wp:comment_author_IP>206.225.16.215</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 23:56:39</wp:comment_date>
			<wp:comment_date_gmt>2009-09-08 04:56:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Meta Bates » Blog Archive » A Few Rails Nuggets [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>264</wp:comment_id>
			<wp:comment_author><![CDATA[phlid909]]></wp:comment_author>
			<wp:comment_author_email>phlid909@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.148.49.88</wp:comment_author_IP>
			<wp:comment_date>2010-01-28 23:51:13</wp:comment_date>
			<wp:comment_date_gmt>2010-01-29 04:51:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[check out monitoring Delayed Job with webmin:

http://blog.activeinterview.com/post/2010/01/28/use-webmin-to-monitor-rails-delayed-job-or-anything/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Distributed Programming with Ruby - Now Available</title>
		<link>http://www.metabates.com/2009/11/12/distributed-programming-with-ruby-now-available/</link>
		<pubDate>Thu, 12 Nov 2009 20:40:31 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=290</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://book.markbates.com"><img class="alignleft size-medium wp-image-231" style="margin: 10px;" title="Distributed Programming with Ruby" src="http://www.metabates.com/wp-content/uploads/2009/06/0321638360_bates_mech_page_3-261x300.jpg" alt="Distributed Programming with Ruby" width="261" height="300" /></a>Well folks, it's been a long road, nearly a year since I presented the idea for "Distributed Programming with Ruby" to Obie Fernandez in a hot tub in Florida, but finally my book is done, dusted, back from the printers and available for purchase from a variety of places, include <a href="http://book.markbates.com">Amazon.com</a>!

It was an absolutely amazing experience and I can't thank everyone involved with the project enough for all of their help, guidance, and having to put up with me over the past year.

I would go into detail about all the people I wish to thank, but I did that already in the book, and let's be honest, you're going to buy it and read it anyway, so I don't want to ruin the surprise. :)

I'm sure you've already purchased your copy, but if you haven't might I recommend you pop over to <a href="http://book.markbates.com">Amazon</a> right now and pick yourself up a copy. They're selling pretty well and you don't want to miss out, do you? I didn't think so.

If you are someone with a popular blog and you would like to do a review of the book, please drop me a line and I'll see what we can do about hooking you up with a copy. Please understand, though, the publishers aren't going to send out copies to everyone who requests them, so there will be a bit of vetting going on.

Also, if you have already purchased the book if you wouldn't mind leaving a review of it on <a href="http://book.markbates.com">Amazon</a>, that would be much appreciated. It doesn't matter where you bought the book, if you could leave a review there, it will really make a difference. Thanks.
<h3><a href="http://book.markbates.com">Buy "Distributed Programming with Ruby" Today!</a></h3>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date>2009-11-12 15:40:31</wp:post_date>
		<wp:post_date_gmt>2009-11-12 20:40:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>distributed-programming-with-ruby-now-available</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="distributed-programmig"><![CDATA[distributed programmig]]></category>
		<category domain="post_tag" nicename="distributed-programming-with-ruby"><![CDATA[distributed programming with ruby]]></category>
		<category domain="post_tag" nicename="distributed-ruby"><![CDATA[distributed ruby]]></category>
		<category domain="post_tag" nicename="drb"><![CDATA[drb]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>240</wp:comment_id>
			<wp:comment_author><![CDATA[Khaled al Habache]]></wp:comment_author>
			<wp:comment_author_email>khellls@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.khelll.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>201.236.153.205</wp:comment_author_IP>
			<wp:comment_date>2009-11-12 23:22:44</wp:comment_date>
			<wp:comment_date_gmt>2009-11-13 04:22:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congrats! Seems a cool idea!

I would like to review it :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>241</wp:comment_id>
			<wp:comment_author><![CDATA[Bill Tozier]]></wp:comment_author>
			<wp:comment_author_email>slurry@williamtozier.com</wp:comment_author_email>
			<wp:comment_author_url>http://williamtozier.com/slurry</wp:comment_author_url>
			<wp:comment_author_IP>68.42.242.65</wp:comment_author_IP>
			<wp:comment_date>2009-11-13 11:28:45</wp:comment_date>
			<wp:comment_date_gmt>2009-11-13 16:28:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you know when (or if) O'Reilly Safari will have it on the shelf? To date it's just a Rough Cut.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>242</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@shortbord.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>173.9.51.138</wp:comment_author_IP>
			<wp:comment_date>2009-11-13 11:30:55</wp:comment_date>
			<wp:comment_date_gmt>2009-11-13 16:30:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Bill - Great question, I'll ask my editor. I assumed that they would've posted it by now, but I'll find out. Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>243</wp:comment_id>
			<wp:comment_author><![CDATA[Posts about Programming from google blogs as of November 13, 2009 &laquo; tryfly.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tryfly.com/?p=405</wp:comment_author_url>
			<wp:comment_author_IP>70.87.90.130</wp:comment_author_IP>
			<wp:comment_date>2009-11-13 18:43:49</wp:comment_date>
			<wp:comment_date_gmt>2009-11-13 23:43:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the second in a series of Engine Yard programming contests. Since then, we&#8217;ve heard lots.   Meta Bates » Blog Archive » Distributed Programming with Ruby &#8230; &#8211; metabates.com 11/13/2009 Distributed Programming with Ruby Well folks, it&#8217;s been a [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>244</wp:comment_id>
			<wp:comment_author><![CDATA[Cássio Marques]]></wp:comment_author>
			<wp:comment_author_email>cassiommc@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://cassiomarques.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>189.98.42.28</wp:comment_author_IP>
			<wp:comment_date>2009-11-14 18:01:43</wp:comment_date>
			<wp:comment_date_gmt>2009-11-14 23:01:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Mark,

My name is Cássio Marques and I'm a Ruby/Rails programmer from Brazil. I would love to go through your book and review it in my blog.

Congratulations!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>First Book Review is a 5-Star One!</title>
		<link>http://www.metabates.com/2009/11/19/first-book-review-is-a-5-star-one/</link>
		<pubDate>Thu, 19 Nov 2009 21:09:56 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=295</guid>
		<description></description>
		<content:encoded><![CDATA[About.com became the first, that I know about, to review my book, "Distributed Programming with Ruby". What a great first review to have as well. They rated the book 5 out of 5 stars! The review can be found <a href="http://ruby.about.com/od/bookreviews/gr/distributedprogramming.htm">here</a>.
<blockquote>"Anyone working with distributed programming in Ruby will want this book."</blockquote>
The only downside they saw in the book, was that they wanted it to be longer! I have to save something for the 2nd edition, don't I? :)

If you haven't purchased yours yet, I encourage you to do so. It's on sale at <a href="http://book.markbates.com">Amazon.com</a> right now.

If you have reviewed the book, or know of a review of the book, please pass it along.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date>2009-11-19 16:09:56</wp:post_date>
		<wp:post_date_gmt>2009-11-19 21:09:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-book-review-is-a-5-star-one</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="distributed-programmig"><![CDATA[distributed programmig]]></category>
		<category domain="post_tag" nicename="distributed-programming-with-ruby"><![CDATA[distributed programming with ruby]]></category>
		<category domain="post_tag" nicename="distributed-ruby"><![CDATA[distributed ruby]]></category>
		<category domain="post_tag" nicename="drb"><![CDATA[drb]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="rinda"><![CDATA[rinda]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>APN on Rails Needs a Home</title>
		<link>http://www.metabates.com/2009/12/21/apn-on-rails-needs-a-home/</link>
		<pubDate>Mon, 21 Dec 2009 16:30:41 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=304</guid>
		<description></description>
		<content:encoded><![CDATA[Hey there everyone, recently I have been getting a lot of requests for bug fixes and new features for the APN on Rails gem that I wrote. While I appreciate that the gem is getting a lot of use and helping a lot of people out, I, unfortunately, no longer have the time to maintain the gem.

Recent changes in my career have meant that I have moved away from doing a lot o iPhone development, and because of that I no longer have the time, nor the desire, to keep maintaining a gem I'm no longer using.

So, because of that, I would to find a new home for the APN on Rails gem so that it gets the love and attention it so desires. Are there any takers out there? Is someone willing to take on the ownership of this, apparently, very useful gem? If you are willing to take it on, please let me know and we can workout the details.

Thanks to everyone who has said good things about the gem, and I'm glad that it has helped people get to using push notifications quicker, hopefully, one of you can take this project and run with it. Thanks again.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date>2009-12-21 11:30:41</wp:post_date>
		<wp:post_date_gmt>2009-12-21 16:30:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apn-on-rails-needs-a-home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apn"><![CDATA[apn]]></category>
		<category domain="post_tag" nicename="apn_on_rails"><![CDATA[apn_on_rails]]></category>
		<category domain="post_tag" nicename="apple-push-notifications"><![CDATA[apple push notifications]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="push-notification"><![CDATA[push notification]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>275</wp:comment_id>
			<wp:comment_author><![CDATA[Fabien Penso]]></wp:comment_author>
			<wp:comment_author_email>fabienpenso@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.penso.info/</wp:comment_author_url>
			<wp:comment_author_IP>82.123.100.27</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 11:19:11</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 16:19:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hmm maybe I should finally release mine then... (what I use for http://4push.com)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>295</wp:comment_id>
			<wp:comment_author><![CDATA[John Mettraux]]></wp:comment_author>
			<wp:comment_author_email>jmettraux@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jmettraux.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>59.156.148.155</wp:comment_author_IP>
			<wp:comment_date>2010-02-09 09:49:18</wp:comment_date>
			<wp:comment_date_gmt>2010-02-09 14:49:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Mark,

have you seen this apn fork : http://bit.ly/bRKkN5 ?

It looks unfair, no credits for you (http://gemcutter.org/gems/wireframe-apn_on_rails).

Best regards,

John]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>299</wp:comment_id>
			<wp:comment_author><![CDATA[Rebecca]]></wp:comment_author>
			<wp:comment_author_email>rebeccanesson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://prx.org</wp:comment_author_url>
			<wp:comment_author_IP>128.103.147.136</wp:comment_author_IP>
			<wp:comment_date>2010-02-24 14:51:25</wp:comment_date>
			<wp:comment_date_gmt>2010-02-24 19:51:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mark, 

I commented briefly before to thank you for apn_on_rails and to post about a small mod I made in a fork.  We (prx.org) are using apn_on_rails in our recently release This American Life iPhone app and are planning to use it again in our next project.  I'd like to offer to officially give apn_on_rails a home if you're still looking for someone to do that.  Let me know if you're interested.  

Thanks, 
Rebecca]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Ruby 1.9 &amp; Rails 3.0</title>
		<link>http://www.metabates.com/2010/02/08/ruby-1-9-rails-3-0/</link>
		<pubDate>Mon, 08 Feb 2010 15:06:27 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=313</guid>
		<description></description>
		<content:encoded><![CDATA[I've always been a big proponent of Ruby 1.9, I make no bones about it. My question is why wouldn't you be? It's faster, more powerful, easier to use, and makes things a lot clearer and cleaner than 1.8. So why then are pretty much all of us still running our applications on 1.8.x? Great question, and as far as I can tell there is really only 1 answer.

That answer? Because no one else is. It's stupid really, but it's the truth. We're all afraid to run our applications in 1.9 because we don't know many other people that are. Because of that it makes it hard for you to make your application work with 1.9 because all those gems and libraries  you use aren't 1.9 compatible, so you're forced to keep running your app on 1.8. And so the cycle continues.

Enter Rails 3.0. Here is a major upgrade to the most prominent web framework in the Ruby community, and I would argue the reason that most of us got into Ruby in the first place. This upgrade will force us all to make some pretty severe changes to our applications to make them fully compatible.  The changes in ActiveRecord alone are so sweeping and massive that we, as a community, are going to have to put some serious time into upgrade our applications. Yet, despite this, we are all going to do it.

Why are we all going to upgrade to Rails 3.0? Because it  looks cool and sexy, and we want those great new features and all those performance enhancements to make our applications run faster. Which leads me back to Ruby 1.9.

In Rails 3.0 they are dropping support for Ruby 1.8.6 and below in favor of Ruby &gt;1.8.7 and &gt;1.9.1. I propose that Rails 3.0 becomes Ruby 1.9 compatible only. Think about it. What a perfect opportunity for us all. We are all going to have to upgrade the libraries and gems we maintain to support Rails 3.0 and we are going to be upgrading our applications to Rails 3.0, so why not go full steam into Ruby 1.9?

There is no better time than now to push forward into the future as a whole community. Let's put Ruby 1.8 behind and reap the benefits of what Ruby 1.9 has to offer. What do you say? Can we do it? I think we can.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date>2010-02-08 10:06:27</wp:post_date>
		<wp:post_date_gmt>2010-02-08 15:06:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-1-9-rails-3-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>270</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Haley]]></wp:comment_author>
			<wp:comment_author_email>matt@smajnr.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.231.160.47</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 10:31:22</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 15:31:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I was also disappointed with the lack of support for Ruby 1.9.1, but then again I plan on deploying on Passenger with 1.8.7.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>271</wp:comment_id>
			<wp:comment_author><![CDATA[Julik]]></wp:comment_author>
			<wp:comment_author_email>me@julik.nl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.172.36.49</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 10:40:38</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 15:40:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good luck with EncodingErrors then.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>272</wp:comment_id>
			<wp:comment_author><![CDATA[Ollivier Robert]]></wp:comment_author>
			<wp:comment_author_email>keltia@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>88.191.250.24</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 10:45:04</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 15:45:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've been saying that for months now on ruby-talk.  Putting 1.9 thingies into 1.8.7 is only going to make things worse because people won't have an incentive to move on to 1.9, especially gem authors.  Rails 3 should be 1.9.1-only.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>273</wp:comment_id>
			<wp:comment_author><![CDATA[ecin]]></wp:comment_author>
			<wp:comment_author_email>ecin@copypastel.com</wp:comment_author_email>
			<wp:comment_author_url>http://copypastel.com</wp:comment_author_url>
			<wp:comment_author_IP>190.80.145.129</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 11:02:41</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 16:02:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It would make for harsher upgrade paths, that's for sure.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>274</wp:comment_id>
			<wp:comment_author><![CDATA[unixcharles]]></wp:comment_author>
			<wp:comment_author_email>unixcharles@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.81.195.32</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 11:17:39</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 16:17:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with you, yes its going to be a bit of a hard upgrade, but I prefer upgrading my apps once to rails3 and ruby1.9 that doing this twice.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>276</wp:comment_id>
			<wp:comment_author><![CDATA[Jerod Santo]]></wp:comment_author>
			<wp:comment_author_email>jerod.santo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.jerodsanto.net</wp:comment_author_url>
			<wp:comment_author_IP>72.206.113.224</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 11:34:20</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 16:34:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The question is whether this would increase the adoption of Ruby 1.9 or decrease the adoption of Rails 3. Probably the former, but we won't know unless we're forced to.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>277</wp:comment_id>
			<wp:comment_author><![CDATA[Brian Cardarella]]></wp:comment_author>
			<wp:comment_author_email>bcardarella@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://cardarella.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>69.250.37.196</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 11:51:26</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 16:51:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree. I think there was a major opportunity missed with pushing the community forward. However, I wonder if "too much change" would have created too much of a rift for some people to cross. One of the major problems in the Python community I'm aware of is the divide between the 2.x and 3.x. People are refusing to adopt because of the amount of time/money it would cost to upgrade. This comparison could be made in the Ruby/Rails community. We're at a major crossroads here where a major upgrade to the most popular framework has been pushed. There are major websites on the 2.x Rails platform (and some still on the 1.x) that upgrade is going to be hairy. Introducing a new language upgrade on top of that might be enough for people to not upgrade.

tldr: maybe it a battle best left for another day?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>278</wp:comment_id>
			<wp:comment_author><![CDATA[James McElhiney]]></wp:comment_author>
			<wp:comment_author_email>james@bitwelder.com</wp:comment_author_email>
			<wp:comment_author_url>http://bitwelder.com</wp:comment_author_url>
			<wp:comment_author_IP>76.118.182.77</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 12:00:56</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 17:00:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sounds like a good plan but we need to get hosting providers on board too.  Does anyone know when Heroku will add 1.9 support?  They're currently using MRI 1.8.6.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>279</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.174.182.214</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 12:13:30</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 17:13:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@ James McElhiney: Heroku is offering 1.9.1 now through their beta program. I got the latest staging version of Shortbord up there now. The performance is incredible. The beta has some issues, but it's worth trying to get into the beta program.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>280</wp:comment_id>
			<wp:comment_author><![CDATA[windock]]></wp:comment_author>
			<wp:comment_author_email>godwindock@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.251.20.138</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 12:24:29</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 17:24:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Let's be better and faster than python folks. Totally agree.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>281</wp:comment_id>
			<wp:comment_author><![CDATA[Loren Segal]]></wp:comment_author>
			<wp:comment_author_email>lsegal@soen.ca</wp:comment_author_email>
			<wp:comment_author_url>http://gnuu.org</wp:comment_author_url>
			<wp:comment_author_IP>173.179.159.253</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 12:35:08</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 17:35:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The reality everyone immediately glances over is that the upgrade path between 1.8-1.9 is ridiculously minor. Ridiculously. As in, half your Rails mini-apps probably already work without modification if you just setup your ENV right. The larger projects might have some more significant encoding issues, might need to change a few idioms, but unless you're using something like ParseTree, it's not going to be significant.

Rails3 is a huge leap in itself. 1.9 doesn't tack on that much extra work. I really can't see the justification for saying "I would have totally spent the next few *weeks* upgrading to rails3 if it wasn't for the extra few *hours* I'd need to spend upgrading to 1.9!"]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>282</wp:comment_id>
			<wp:comment_author><![CDATA[Neeraj Singh]]></wp:comment_author>
			<wp:comment_author_email>neerajdotname@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://neeraj.name</wp:comment_author_url>
			<wp:comment_author_IP>216.73.136.48</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 12:58:11</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 17:58:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would say that Rails 3.1 should be bug fixes for Rails 3.0. 

Rails 3.2 should be ruby only 1.9 compatible.

I would rather upgrade to rails 3.0 and then move to ruby 1.9. Two big changes at that same time could be tough.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>283</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin Menard]]></wp:comment_author>
			<wp:comment_author_email>nirvdrum@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.76.199.86</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 13:00:11</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 18:00:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The last time I tried upgrading to 1.9, there wasn't even proper debugger support (i.e, it just didn't work).  This was only a few months back.  That should be a bare minimum for pushing any new language version forward.  Several other libraries I tried out had issues as well.  Upgrading for the sake of upgrading doesn't really buy me anything.

Another major hurdle is that all the major linux vendors are shipping 1.8 still.  So, running 1.9 on my EC2 cluster puts me into unsupported territory, which isn't a nice place to be.  The reality there is it'd be much easier for me to move to JRuby to address my performance needs than it would be to move to 1.9.1.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>284</wp:comment_id>
			<wp:comment_author><![CDATA[Xaviour Maxwell]]></wp:comment_author>
			<wp:comment_author_email>rubysiddhi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.199.241.50</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 13:06:04</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 18:06:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am just starting to learn Ruby 1.9.1. I plan on moving on to Rails 3 and using the two together. It's really a no brainer knowing it is faster and more powerful combination.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>285</wp:comment_id>
			<wp:comment_author><![CDATA[Twitted by hugobarauna]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://realurl.org/twitted.php?id=8818803062</wp:comment_author_url>
			<wp:comment_author_IP>94.23.51.159</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 13:10:48</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 18:10:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was Twitted by hugobarauna [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>286</wp:comment_id>
			<wp:comment_author><![CDATA[jc]]></wp:comment_author>
			<wp:comment_author_email>jpcx01@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.236.9.86</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 13:24:28</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 18:24:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I tried using Ruby 1.9.1 on Rails3 projects this weekend (using RVM). It was a complete failure (site wouldnt even start). Bugs have all been reported, but I ended up just switching back to Ruby 1.8.7 fixed everything.

So, don't expect a smooth ride at the moment.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>287</wp:comment_id>
			<wp:comment_author><![CDATA[Jeremy Kemper]]></wp:comment_author>
			<wp:comment_author_email>jeremy@bitsweat.net</wp:comment_author_email>
			<wp:comment_author_url>http://bitsweat.net</wp:comment_author_url>
			<wp:comment_author_IP>99.74.219.182</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 14:30:51</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 19:30:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Rails 3 will definitely prefer Ruby 1.9.2 -- when it's released -- and require Ruby 1.8.7 or later.

If you're running 1.9, I'd recommend building 1.9.2dev rather than using 1.9.1. It's big upgrade, it has quite a few behavior changes, and Rails master is developed against 1.9.2 exclusively (though we do continuous integration against 1.9.1 for good measure).

The key to *requiring* 1.9.2 is full mysql-ruby, pg, and sqlite3-ruby encoding support. These database drivers have had ages to upgrade but still aren't up to snuff. Pitch in, make it happen, and you'll find the database-backed web app world one step behind you.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>288</wp:comment_id>
			<wp:comment_author><![CDATA[grimen]]></wp:comment_author>
			<wp:comment_author_email>grimen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://github.com/grimen</wp:comment_author_url>
			<wp:comment_author_IP>85.226.242.29</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 15:25:03</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 20:25:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1.9 only, totally agree - most Ruby devs I know re afraid of 1.9 for some reason. For the Ruby-cause!

Kevin Menard:

if RUBY_VERSION &gt;= '1.9'
  config.gem 'ruby-debug19', :lib =&gt; 'ruby-debug'
else
  config.gem 'ruby-debug'
end

jc: It's web platform beta; use on own risk.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>289</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Grimm]]></wp:comment_author>
			<wp:comment_author_email>andrew.j.grimm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://andrewjgrimm.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>149.171.104.204</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 17:18:46</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 22:18:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm not a rails developer myself, but the assumption you have is that people will only upgrade their gems to 1.9 if you force them to do so. My experience is that people want to update their gems to 1.9, but are doing so in their copious free time.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>290</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin Menard]]></wp:comment_author>
			<wp:comment_author_email>nirvdrum@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.76.199.86</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 17:28:40</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 22:28:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Grimen:

I appreciate the response.  But having to do that is also a bit absurd and illustrates why moving to 1.9 is a pain in the neck.  It feels like death by a thousand cuts.  Trust me, I'm not staying on 1.8 because I love the way the GC crashes.  I'm staying there because it's the most pragmatic thing to do.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>291</wp:comment_id>
			<wp:comment_author><![CDATA[Dan Kubb]]></wp:comment_author>
			<wp:comment_author_email>dan.kubb@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.99.158.47</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 17:42:08</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 22:42:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Jeremy: Or we could just push towards adopting DataObjects as a DB later undereath ActiveRecord and Arel.

DataObjects (DO) has support for MySQL, SQLite3, PostgreSQL and several other DBs.  It supports Ruby 1.8.6 through 1.9.2.  It also has encoding support on 1.9.  It works with JRuby and even Rubinius (!). The windows MRI gem is a "fat binary" allowing the same gem to work with 1.8 and 1.9. It has non-blocking support like neverblock. It is supported by DataMapper and Sequel, and DM has been using it for well over 2 years. The gem installation command is the same across all versions and flavors of ruby. The interface is uniform across all the drivers It has an active developer community and great support. Oh, and it's also extremely fast.

I could go on but you get the point. DO was 1.9 compatible over a year ago, while most of the other DB drivers are lagging behind the curve as Jeremy points out.

One of the DO developers (myabc) recently started porting Arel to work with DO: http://github.com/myabc/arel/tree/do -- I know he'd appreciate some help from the community.  Hop into #dm-hacking on IRC, and ask myabc, dbussink or myself (dkubb) what you can do to help.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>292</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.174.182.214</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 17:51:11</wp:comment_date>
			<wp:comment_date_gmt>2010-02-08 22:51:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Jeremy: I completely second Dan's suggestion of adopting DataObjects for AR. That's a great idea Dan, and one that I wish happened a long time ago. Think of how much cleaner the AR/ARel code would get if it only had to work with a single unified API. Plus, I used to be a big DM supporter/contributor back in the day, and I can tell you that those drivers are rock solid and FAST!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>293</wp:comment_id>
			<wp:comment_author><![CDATA[Phrozen]]></wp:comment_author>
			<wp:comment_author_email>phrozen10@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>201.124.31.75</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 21:05:43</wp:comment_date>
			<wp:comment_date_gmt>2010-02-09 02:05:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Agreed! Most of active projects will do their migration to 3.0 &amp; 1.9 in order to support the new technologies, those slow or abandoned projects will not be compatible any more, leaving room for new ones with better and cleaner code. Harsh progress?? but still progress...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>294</wp:comment_id>
			<wp:comment_author><![CDATA[Sam Granieri]]></wp:comment_author>
			<wp:comment_author_email>sam@samgranieri.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.sangranieri.com</wp:comment_author_url>
			<wp:comment_author_IP>99.141.81.5</wp:comment_author_IP>
			<wp:comment_date>2010-02-08 22:05:46</wp:comment_date>
			<wp:comment_date_gmt>2010-02-09 03:05:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Rails 3.1 should require ruby Ruby 1.9.2 at the bare minimum. Let's make it happen!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>296</wp:comment_id>
			<wp:comment_author><![CDATA[Shanna]]></wp:comment_author>
			<wp:comment_author_email>shane.hanna@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.206.182.106</wp:comment_author_IP>
			<wp:comment_date>2010-02-10 01:56:27</wp:comment_date>
			<wp:comment_date_gmt>2010-02-10 06:56:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Grimen. I don't know who started the RUBY_VERSION &gt;= '1.9' idiom but they got it backwards. Ruby 1.9 is released, everyone should be writing for (and with) 1.9 aiming for 1.8 compatibility not the other way around.

I understand it's a subtle difference but an important one and has the added advantage that when the time comes to drop 1.8 support (and it will just like 1.6 conditions disappeared over time) it will be easy to remove all your 1.8 compatibility code which is neatly marked as such :)

if RUBY_VERSION = '1.9'
# ... 1.8 compatibility backports, monkey patches get required here.
end

Developing any new code in 1.8 at this point isn't doing anyone any favors and hinders progress that we desperately need. Even if you don't personally you can bet every one of us uses gems daily that would benefit from 1.9.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>297</wp:comment_id>
			<wp:comment_author><![CDATA[Shanna]]></wp:comment_author>
			<wp:comment_author_email>shane.hanna@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.206.182.106</wp:comment_author_IP>
			<wp:comment_date>2010-02-10 02:03:31</wp:comment_date>
			<wp:comment_date_gmt>2010-02-10 07:03:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Formatting error on the code sample, with no preview and no edits. Gist is here: http://gist.github.com/300090]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>298</wp:comment_id>
			<wp:comment_author><![CDATA[grimen]]></wp:comment_author>
			<wp:comment_author_email>grimen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://github.com/grimen</wp:comment_author_url>
			<wp:comment_author_IP>85.226.243.241</wp:comment_author_IP>
			<wp:comment_date>2010-02-11 18:26:03</wp:comment_date>
			<wp:comment_date_gmt>2010-02-11 23:26:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Shanna: It's was nothing wrong with RUBY_VERSION &gt;= ‘1.9? in apps when hundreds of gems was not compatible in 2009. I'm coding in Ruby 1.9 all day long, but neither of us are superman and can make all gems be 1.9-compatible: I't sup to the community as whole to fix that. While complex gems like ruby-debug is not 1.9, RUBY_VERSION &gt;= ‘1.9? is totally fine as I see it. Rather 1.9 in mind than not at all. A I said, I'm only on 1.8 when I have to.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>APN on Rails has a new Home.</title>
		<link>http://www.metabates.com/2010/03/10/apn-on-rails-has-a-new-home/</link>
		<pubDate>Wed, 10 Mar 2010 15:46:20 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=327</guid>
		<description></description>
		<content:encoded><![CDATA[Quite often I get asked why don't I blog more? Why don't I tweet more? Why don't I _fill in the blank_ more. The answer is I'm a busy man. I'm the CTO for a pre-funding startup, <a href="http://www.shortbord.com/invites/ZAZLBQH5FA">www.shortbord.com</a>, the father of two adorable little boys, the lead singer of a Boston-based band, <a href="http://www.myspace.com/colawarvets">www.myspace.com/colawarvets</a>, and that's just the big stuff! I have to prioritize what I can spend my time on, and unfortunately some of my open source projects are the first to get the ax.

Why do the open source projects always seem to get the ax? Well, let me start by saying that they don't <em>always</em> get the ax, but they certainly jump to the top of the list. There are certain libraries I've written, <a href="http://github.com/markbates/cachetastic">cachetastic</a> and <a href="http://github.com/markbates/configatron">configatron</a>, are the two most prominent that I use day in and day out. They will always get the love the deserve. Then there are projects like APN on Rails. I wrote it because I had an iPhone app (no longer available) that I wanted notifications for, and there was nothing else available for Ruby to do the job. The plugin took off like crazy and I was overwhelmed with patches, questions, bugs, etc... That was great, and I was happy to help, for a time, but alas, I haven't written an iPhone app for ages, and I just don't have time to maintain a plugin that I wasn't even using.

A while ago I realized that the best thing for APN on Rails, myself, and for the community was to find someone to take over the project so that it got the love it deserved. I put out the call and the good folks over at <a href="http://www.prx.org/">PRX</a> (Public Radio Exchange) answered the call. The folks at PRX have written some great iPhone apps, including the very popular "This American Life" app.

So I'm happy to announce that the new official home for APN on Rails is now at: <a href="http://github.com/PRX/apn_on_rails">http://github.com/PRX/apn_on_rails</a>. I ask that you continue to show the same support to PRX that you have shown to me over the life of this plugin.

Again, thank you to everyone, and thank you to Rebecca Nesson and the folks over at PRX for picking up the project and giving it renewed life.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>327</wp:post_id>
		<wp:post_date>2010-03-10 10:46:20</wp:post_date>
		<wp:post_date_gmt>2010-03-10 15:46:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apn-on-rails-has-a-new-home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apn"><![CDATA[apn]]></category>
		<category domain="post_tag" nicename="apn_on_rails"><![CDATA[apn_on_rails]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="githubcom"><![CDATA[github.com]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>320</wp:comment_id>
			<wp:comment_author><![CDATA[Ricardo]]></wp:comment_author>
			<wp:comment_author_email>ricardo_ruiz_lopez@yahoo.es</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.149.140.50</wp:comment_author_IP>
			<wp:comment_date>2010-03-31 12:48:55</wp:comment_date>
			<wp:comment_date_gmt>2010-03-31 17:48:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi!

I didn't try APN at the moment. I wonder if someone uses APN in real life projects, were reliability is important. Is there any case where you lost notifications?

What do you think? Any example?

Thank you very much for your help.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>321</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.48.194.232</wp:comment_author_IP>
			<wp:comment_date>2010-03-31 12:54:59</wp:comment_date>
			<wp:comment_date_gmt>2010-03-31 17:54:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ricardo, APN is as about as reliable as it can be. Push notifications are not guaranteed by Apple to actually be delivered, so keep that in mind when you're developing your app. If the user has their phone turned off or they don't have reception at that time the notification will most likely never be delivered. Don't confuse push notifications with SMS. I wouldn't trust them to tell me something life critical.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>324</wp:comment_id>
			<wp:comment_author><![CDATA[Ricardo]]></wp:comment_author>
			<wp:comment_author_email>riruilo@yahoo.es</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.124.181.187</wp:comment_author_IP>
			<wp:comment_date>2010-04-02 10:16:42</wp:comment_date>
			<wp:comment_date_gmt>2010-04-02 15:16:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Mark for reply.

I read this on Apple docs:

"You should regularly connect with the feedback web server and fetch the current list of those devices that have repeatedly reported failed-delivery attempts. Then you should cease sending notifications to the devices associated with those applications. See “The Feedback Service” for more information."

http://developer.apple.com/iphone/library/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingWIthAPS/CommunicatingWIthAPS.html

My question is: Does your program take cares of this "feedback server"?

By the way, do you know any program on the appstore that uses your APN gem?

Thanks for your program.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Six Tracks of Drums</title>
		<link>http://www.metabates.com/2010/06/14/six-tracks-of-drums/</link>
		<pubDate>Tue, 15 Jun 2010 04:06:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[When I was 11 I made my very first recording. It was 1987 and the technology choices for recording were, how to put this, almost non-existant. So I did what any smart 11 year old would do, I improvised! Let me walk you through the history of my recording career. Don't worry, I'll make it brief.
<h3>The Boom Box.</h3>
I had a two cassette boom box, it was a beast of a machine. It was a 'portable' machine, meaning that it took 8 D batteries and a burly man named Attila to carry it. My recordings started simply on this machine. I would use the built in microphone to record my awful wailings and terribly out of tune acoustic guitar.

As my love of bands like the Beatles grew, so did my desire to capture my musical legacy the way I desired. It was around age 12 or so that the true experimentation began. I started playing around with using different input devices. I acquired a rather terrible Radio Shack microphone for the princely sum of $19.95. It sported, and I kind you not, a "built-in on/off switch". That was actually a feature of this microphone. Actually it was the only feature of this microphone! My other trick for recording was to use a pair of headphones as a microphone. Did it sound good? Absolutely not! But it worked.

While the 'quality' of the recordings got marginally better with my new microphone and headphone combinations, I was lacking the studio trickery I so desired. I needed multitrack. If the Beatles had it, why didn't I? Of course I couldn't afford an actual multitrack recorder at this age, so again, improvisation proved key. I realized that if I recorded me singing and playing (at the same time), I could then pop that tape into the top player and record me playing and singing again while the first tape plays back into the second tape. How did it sound? How do you think it sounded??
<h3>The 4 Track!</h3>
At the tender age of 14 I managed to squeeze together enough allowance and saved up enough birthday/Christmas presents to get a Fostex 4-track cassette recorder. It was incredible! Here was what I had wanted all along. I could now discretely record all the wonderful parts (up to four) I could dream up!

I felt like the Beatles making Sgt. Pepper. Never before had anyone wielded such recording power (except for everyone else who had)! I was George Martin. I learned what every last knob on that machine did. I knew all of it's tricks. I played with the varispeed knob. I recorded backwards parts. I was crazy.

Then I made a huge discovery! I could mix the 4 tracks down to stereo, pop that mix down back in the 4 track and then have another 2 tracks to play with! Brilliant!! The world was my musical oyster, and damn I was rocking it!
<h3>The 8 Track!!</h3>
When I was 18 years old I took a trip on the green line T to the Guitar Center on Comm Ave in Boston and purchased my musical destiny, a Tascam 488 8-track cassette recorder. Wow! I can still remember that day. Sitting on the T ride back to my house with that box on my lap. Giddy, excited, nervous, anxious, I can't describe how I felt on that ride. I can say that it felt like it was going to take forever to get home!

I finally got home, rushed out to the little studio room my father and I had built in his garage and proceeded to hook it up. I had a 4 EQs per channel, inserts, sends, cues, all sorts of wonderful things! The sound was better, the quality higher, it even had DBX noise reduction! DBX! I still don't know what it is, but I get very excited knowing it's there!

That day I re-recorded a song I had recorded on my 4-track, that song was called, "I and You". It was a dreadful song that I thought had to be the next big thing. And why wouldn't it be? I recorded it on an 8-track!
<h3>The Computer Age.</h3>
In 1996 I moved to Liverpool, England to do my degree in Music. I moved all of my recording equipment across the pond with me. There was no way I was going to go to music college and not have a means to record all the amazing #1 hits I was going to write! The cosmos, on the hand, had slightly different plans for me. In the Spring of 1998 my house was broken into, and everything I owned was stolen, including my beloved 8-track recorder.

My world was shattered. I was a broken and lost man. How could this happen to me? Why Lord? Why?? Thankfully I managed to get a handsome of money from my parent's insurance company to cover the claims, well, 75% of the total value anyway. Not great, but it was certainly better than nothing.

It was with this insurance money that I bought my own computer. My family had had computers since I was 8 or 9, but this one was mine, and I had plans for it. Since September of 1998 I have been recording music on my computer. Back then it was very difficult, now, it's incredibly easy. I can record 8 tracks on my iPad should I wish.
<h3>So What?</h3>
<a href="http://www.metabates.com/wp-content/uploads/2010/06/IMG_1094.jpg"><img class="alignleft size-medium wp-image-332" title="IMG_1094" src="http://www.metabates.com/wp-content/uploads/2010/06/IMG_1094-300x225.jpg" alt="" width="300" height="225" /></a>Why am I talking about this now? I was recently doing some work around the house and stumbled across a rather large box full of cassette tapes. When I saw the box it all came flooding back to me. The countless hours spent recording. The incredible amount of songs I wrote, covered, or in most cases just butchered. They were all on these cassettes, and they were fading.

How long could these cassettes last? What would happen to those songs? What if I never heard them again?

Now, I'm under no illusions that these songs are well written, well recorded, or well performed. As a matter of fact, I know it's the opposite of that. They were poorly written, recorded, and performed. But you know what? They're mine, and I want to preserve them. That's why I have undertaken an enormous project to catalog and digitally capture the music on those tapes.

It's going to be an enormous project, that I know. I'll do a cassette here, and a cassette there, and eventually I'll have them all my computer and safely backed up. Will I remix them? Edit them? Release them? Chances are no to all those questions. That's not really the point. I just want to know that those songs are safe. Maybe I'll take a couple of them, polish them, and give them a new life with my band, but let's see what happens, shall we?

<a href="http://www.metabates.com/wp-content/uploads/2010/06/IMG_1095.jpg"><img class="alignright size-medium wp-image-333" title="IMG_1095" src="http://www.metabates.com/wp-content/uploads/2010/06/IMG_1095-300x225.jpg" alt="" width="300" height="225" /></a>I purchased a used Tascam 488 MKII on eBay, and tonight I transferred my first cassette. I'm excited about this project. Hearing these songs again brings up some great memories, and some awful ones. For example, tonight's cassette contained six recordings. The first five I remember quite vividly. The sixth, however, is clear why I forgot. It was a 'cover' of "A Day In The Life" by the Beatles. But it consisted of a click track, a vocal, and 6, yes 6, tracks of drums!!! Oh, during the middle eight of the songs, two of the drum tracks switch to piano!! Why?? That's a question I would like answered as well.

Anyway, expect a post every now and again about my on going battle with these cassettes. I'm sure there will be some funny, and occasionally horrific, stories to share about the experience.

PS. If anybody out there has some great earplugs they want to lend me, I'll take them!!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date>2010-06-14 23:06:01</wp:post_date>
		<wp:post_date_gmt>2010-06-15 04:06:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>six-tracks-of-drums</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bleeding-ears"><![CDATA[bleeding ears]]></category>
		<category domain="post_tag" nicename="music"><![CDATA[music]]></category>
		<category domain="category" nicename="music-general"><![CDATA[Music]]></category>
		<category domain="post_tag" nicename="recording"><![CDATA[recording]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Testing is NOT an Option</title>
		<link>http://www.metabates.com/2010/07/01/testing-is-not-an-option/</link>
		<pubDate>Thu, 01 Jul 2010 14:04:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=337</guid>
		<description></description>
		<content:encoded><![CDATA[Five years ago I left the world of contracting and reentered the world of the full time employee, and I enjoyed every minute of it (well, almost). Now fast forward five years and I find myself once again at a crossroads. Do I continue on as an FTE or do I become a contractor, and play the field, so to speak? Looks like I'm going to go with the hired gun route for a little while, but that's not really the point of this post.

During the past week or so I've spoken with many great companies and people. I've been fortunate enough to have a high degree of interest in what I can bring to the table. During those discussions I talked with a really nice guy at a what seems to be a really cool company, I won't name names, because this isn't about either the person or the company, but rather something the engineer said during our phone conversation that got me to thinking.

<img class="alignleft" title="Failure Testing" src="http://www.commercialventvac.com/finao/failure_testing.jpg" alt="" width="400" height="240" />"We don't have any tests because I couldn't convince the company to allocate the time for them." That statement really hung with me. After I got off the phone I started thinking really hard about that statement, and all I could think of was how testing is not an option and people shouldn't need to be convinced to have time allocated to them.

As developers it is our responsibility to insist on testing. Always include testing in your time estimates. Never give the client (or your company) an option that includes a time estimate without testing. If a feature takes 2 days to code and a day to write tests, then your estimate is 3 days, never 2. You should never say, "Well, I can get it done in two days if I don't write any tests." That's just an unacceptable thing to say. What you should be saying is, "That feature will take three days to code".

I don't feel I should sit here and tell you all the reasons why you should test, you should know them already, and frankly, they're all very obvious! But, if you need a few bullet points to 'convince' your client, here are a few:
<ul>
	<li>Less bugs - The more tests you have the less bugs you will have. It's just a fact. You won't have 100% bug free code, that's a nearly impossible goal, but you highly reduce the likely hood that as soon as you get your code into production your users will find all the breaking points of your code.</li>
	<li>Better maintainability, means faster feature turn around - When you have a large test suite it means adding, updating, or even removing features because a whole lot easier, which means it SAVES time! Why? Simple, you don't have to go through and manually test every aspect of your code to make sure you didn't break something elsewhere by adding that validation, or by refactoring that bit of code, etc... That translates into real $ savings.</li>
	<li>Test driven development saves time - this isn't quite the same as my last bullet point. Imagine, if you will, you are writing a four step wizard in your application. If you write a few test scripts using something like Cucumber first before you write your code you can simply keep re-running those to make sure your code is working. If you don't have those test scripts written then you continually have to keep going to a browser and entering all the information in each of the steps so you can test something in step four. Which one do you think takes longer, having a few test scripts you can run, or manually going through the four page wizard each time you make a change?</li>
	<li>It's an investment - thinking of having test scripts like owning a house. When you don't have tests and you just keep testing in the browser or the command line what you are doing is a kin to "renting". There is money being spent, but at the end of the day you have nothing to show for it. You've spent hours "testing", but tomorrow when you come in you have to do it all over again. When you spend those hours writing tests you are actually "buying" something. You have something to show for that time and money you've spent. Tomorrow, next week, next month, next year, those scripts will still be there, they'll still be working for you, giving  you a return on your investment.</li>
</ul>
Well, I hope I have hopefully made a case to you the engineer as to why you should insist on testing. It's the right thing to do, for you, for your application and for you client. If if anyone tries to give you grief about it, send them my way, I'll sort em out!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2010-07-01 09:04:38</wp:post_date>
		<wp:post_date_gmt>2010-07-01 14:04:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-is-not-an-option</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cucumber"><![CDATA[cucumber]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="post_tag" nicename="tests"><![CDATA[tests]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>344</wp:comment_id>
			<wp:comment_author><![CDATA[adam]]></wp:comment_author>
			<wp:comment_author_email>xdmx@email.it</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.33.225.17</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 12:14:48</wp:comment_date>
			<wp:comment_date_gmt>2010-07-01 17:14:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[do you know some way to make faster rspec? i've a little codebase (converting from unit to rspec), but it takes 3-4 minutes to run all the specs (1000~)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CoverMe - Code Coverage for Ruby 1.9</title>
		<link>http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9/</link>
		<pubDate>Fri, 13 Aug 2010 17:49:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=343</guid>
		<description></description>
		<content:encoded><![CDATA[Ruby 1.9(.2) is an amazing language to develop applications in. It's faster, more powerful, cleaner, and a huge improvement over Ruby 1.8.x. Because of those reasons every Ruby developer should move to this exciting new version of our language.
<div id="_mcePaste">When making a move of this size it's important to have the right tools to help us along. Unfortunately, one of the most useful tools as a Ruby developer, <a href="http://github.com/relevance/rcov">RCov</a>, does not work with Ruby 1.9.</div>
<div id="_mcePaste">RCov, for those unfamiliar analyzes your code and tells you which part of your code was not executed. This is INCREDIBLY useful when hooked up to your test suite. While, it's not the only metric you should use when determining how good your test coverage it, it certainly is a great first step to point out exactly which parts of your code haven't been touched at all!</div>
Enter <a href="http://github.com/markbates/cover_me">CoverMe</a>.
<h2>History</h2>
While working on a Ruby 1.9/Rails 3 project, and loving everything about it (except for the lack of RCov), I came across a <a href="http://engineering.attinteractive.com/2010/08/code-coverage-in-ruby-1-9/">post</a> by Aaron Patterson (of <a href="http://github.com/tenderlove/nokogiri">Nokogiri</a> fame). In this post he quickly outlined a very basic coverage tool using the new built-in Coverage module in Ruby 1.9.

After spending a morning playing with it, I was quickly able to grow the idea into something useful for the project. Later that day the company I was consulting for (<a href="http://www.biddingforgood.com">BiddingForGood.com</a>), and in particular their chief architect, <a href="http://twitter.com/stuartmg">Stuart Garner</a>, told me to take a day or two and clean it up and release it for the world to use, and so <a href="http://github.com/markbates/cover_me">here</a> it is.
<h2>Features</h2>
Here is a brief overview of the features of CoverMe:
<h3>Index Page</h3>
<ul>
	<li>Sortable column headers (File, Lines, Lines of Code, Tested %).</li>
	<li>Searching/filtering by file name.</li>
	<li>Filtering by coverage percent.</li>
	<li>Color coded list of files to quickly see which ones are 100% covered, &gt; 90% covered, or less than 90% covered.</li>
	<li>Large color coded average coverage percent, for quick reference.</li>
</ul>
<h3>Detail Page</h3>
<ul>
	<li>Line by line coverage report</li>
	<li>Color coded lines to quickly see which lines where executed and which ones were not.</li>
	<li>Side by side viewing with the corresponding test/spec file (if one exists).</li>
</ul>
See the <a href="http://github.com/markbates/cover_me">README</a> file for more information on installation and usage.
<h2>Thanks</h2>
I would just quickly like to give another quick thanks to Aaron Patterson for pointing out the Coverage module in Ruby 1.9 and inspiring this, hopefully, helpful little gem. Also another big thanks to Stuart Garner for pushing me to package this up and release it to the world.
<h2>Screenshots</h2>
[gallery link="file"] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date>2010-08-13 12:49:44</wp:post_date>
		<wp:post_date_gmt>2010-08-13 17:49:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coverme-code-coverage-for-ruby-1-9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rcov"><![CDATA[rcov]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="post_tag" nicename="tests"><![CDATA[tests]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>382</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.93.24.194</wp:comment_author_IP>
			<wp:comment_date>2010-08-23 12:54:39</wp:comment_date>
			<wp:comment_date_gmt>2010-08-23 17:54:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Grant Neufeld it should work with cucumber you just have to make sure that 'Cover Me' is required before anything else. The Ruby 1.9 coverage library only gather coverages on files that are have been required after it has been loaded, so making sure you require Cover Me first is extremely important. After that, it shouldn't matter if you're using cucumber, or any other library for that matter. Hope that helps.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>381</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.93.24.194</wp:comment_author_IP>
			<wp:comment_date>2010-08-23 12:52:33</wp:comment_date>
			<wp:comment_date_gmt>2010-08-23 17:52:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Gernot Kogler and @SH can you both please open tickets on your issues so I can resolve them? 

http://github.com/markbates/cover_me/issues

Please make sure to include as much detail about your environments as possible. Also, please make sure that when you're requiring 'cover_me' that is the very FIRST line of your spec_helper.rb or test_helper.rb file. That's EXTREMELY important. :)

Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>373</wp:comment_id>
			<wp:comment_author><![CDATA[Grant Neufeld]]></wp:comment_author>
			<wp:comment_author_email>activist@activist.ca</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.18.225.133</wp:comment_author_IP>
			<wp:comment_date>2010-08-20 06:38:33</wp:comment_date>
			<wp:comment_date_gmt>2010-08-20 11:38:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Will it work with Cucumber features? This is critical for me as I tend to rely on cucumber features for my code test coverage (lots of my code isn't touched by my limited rspec tests, but I try to have 100% covered by my .feature files).

I haven't moved to Ruby 1.9 yet, but having a solid coverage tool like this might be the prompting I need to make the move. Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>372</wp:comment_id>
			<wp:comment_author><![CDATA[Gernot Kogler]]></wp:comment_author>
			<wp:comment_author_email>gernot@kogler-informatik.ch</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.73.197.10</wp:comment_author_IP>
			<wp:comment_date>2010-08-20 06:14:23</wp:comment_date>
			<wp:comment_date_gmt>2010-08-20 11:14:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mark

I'm very happy I found your CoverMe gem. However, I have some problems to integrate it into my environment.
My project setup looks like this:

- rvm
- ruby 1.9.2dev (2010-07-11 revision 28618) [x86_64-darwin10.4.0]
- Rails 3.0.0.rc
- Datamapper instead of ActiveRecord 
- rspec 2.0.0.beta.19

and a lot of other stuff.

When I add require 'cover_me' as the first line in my spec helper file, I get the following output: 

Gernot-Koglers-MacBook-Pro:rem2 gernot$ RAILS_ENV=test rake spec
(in /Users/gernot/entwicklung/rem2)
[datamapper] Created database '/Users/gernot/entwicklung/rem2/db/test.sqlite3'
[datamapper] Finished auto_migrate! for :default repository '/Users/gernot/entwicklung/rem2/db/test.sqlite3'
......

Finished in 0.14481 seconds
6 examples, 0 failures

/Users/gernot/.rvm/gems/ruby-1.9.2-rc2@rem2/gems/cover_me-1.0.0.pre3/lib/cover_me/processor.rb:21:in `block in process!': undefined method `pattern' for # (NoMethodError)
        from /Users/gernot/.rvm/gems/ruby-1.9.2-rc2@rem2/gems/cover_me-1.0.0.pre3/lib/cover_me/processor.rb:20:in `each'
        from /Users/gernot/.rvm/gems/ruby-1.9.2-rc2@rem2/gems/cover_me-1.0.0.pre3/lib/cover_me/processor.rb:20:in `map'
        from /Users/gernot/.rvm/gems/ruby-1.9.2-rc2@rem2/gems/cover_me-1.0.0.pre3/lib/cover_me/processor.rb:20:in `process!'
        from /Users/gernot/.rvm/gems/ruby-1.9.2-rc2@rem2/gems/cover_me-1.0.0.pre3/lib/cover_me.rb:28:in `block in '
rake aborted!
bundle exec  /Users/gernot/.rvm/rubies/ruby-1.9.2-rc2/bin/ruby  -Ilib -Ispec "./spec/models/adresse_spec.rb" "./spec/models/person_spec.rb"  failed

When I put the require after require 'rspec/rails', I get no errors but the coverage report is empty.
When I put the require into environments/test.rb, I get

Gernot-Koglers-MacBook-Pro:rem2 gernot$ RAILS_ENV=test rake spec
(in /Users/gernot/entwicklung/rem2)
rake aborted!
key not found: :adapter

(See full trace by running task with --trace)
Gernot-Koglers-MacBook-Pro:rem2 gernot$

Datamapper does not setup the test database and no specs are executed, but I get a perfect coverage report. 

Could there be a dependency between CoverMe and ActiveRecord?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>368</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.93.24.194</wp:comment_author_IP>
			<wp:comment_date>2010-08-17 08:10:19</wp:comment_date>
			<wp:comment_date_gmt>2010-08-17 13:10:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Dan, the Coverage module in 1.9 gives you a Hash that looks something like this:

{'/foo/bar.rb' => [1, 0, nil, 24, nil, 1]}

The key is the file and the value is an array of integers/nils. Each index of the array represents the corresponding (+1) line in the file. So index 0 is line 1 of the file, index 1 is line 2, and so on... A value of nil means the line is non-executable code, think comments, blank lines, and 'end' statements. A value of 0 means the line should have been executed, but wasn't. A value of 1 or above means the line was executed that number of times. So in my about example line 4 of /foo/bar.rb was executed 24 times.

Does that answer your question? I'm thinking about placing these numbers in the gutter of the report so you can easily see how much each line get executed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>367</wp:comment_id>
			<wp:comment_author><![CDATA[Dan Kubb]]></wp:comment_author>
			<wp:comment_author_email>dan.kubb@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://dkubb.com/</wp:comment_author_url>
			<wp:comment_author_IP>208.99.158.47</wp:comment_author_IP>
			<wp:comment_date>2010-08-16 21:11:20</wp:comment_date>
			<wp:comment_date_gmt>2010-08-17 02:11:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mark, this is really interesting. Do you know if there's any way to see which specific branches are executed on a given line, so that C1 coverage could be measured?

The reason I ask is that alot of times, a line of code is executed, but only one possible branch is followed it still shows as being fully covered. On projects where I absolutely needed to verify the code is solid (like in a foundational library), I've been using rcov to verify my coverage is 100%, then using heckle to mutate the code and find branches/conditions that I missed writing specs for. It's surprising how much you can miss even when being extra careful when writing specs.

While I really like heckle and will still be using it even if I had a way to verify C1 coverage, it would be nice to be able to visually inspect code to see where I haven't focused enough.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>362</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.7.47.231</wp:comment_author_IP>
			<wp:comment_date>2010-08-15 12:36:50</wp:comment_date>
			<wp:comment_date_gmt>2010-08-15 17:36:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It plays very nicely with Rspec, that's what I developed it with. It should work with Test Unit as well. I'm open to patches if there are issues with other test frameworks. 

I also noticed the spelling mistake as well. I fix it in the code, but not in the screenshots. Keen eye. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>361</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>361</wp:comment_id>
			<wp:comment_author><![CDATA[Roja Buck]]></wp:comment_author>
			<wp:comment_author_email>roja@arbia.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://cogitations.arbia.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>77.102.112.221</wp:comment_author_IP>
			<wp:comment_date>2010-08-15 12:33:26</wp:comment_date>
			<wp:comment_date_gmt>2010-08-15 17:33:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks good Mark.

Does it play nice with rspec and it's peers?

Though you may want to update your screenshots once the sentence "This file was is tested nearly enough!" is changed to something more meaningful ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>379</wp:comment_id>
			<wp:comment_author><![CDATA[SH]]></wp:comment_author>
			<wp:comment_author_email>equestrianerd@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.33.245.5</wp:comment_author_IP>
			<wp:comment_date>2010-08-23 11:46:45</wp:comment_date>
			<wp:comment_date_gmt>2010-08-23 16:46:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I installed this and found it to be great...until I changed my code and re-ran my tests. The code coverage reports didn't change to reflect my new code/tests. I deleted the coverage folder entirely and re-ran tests, and it didn't re-create the folder with new reports.

I've got the gem installed (v 1.0.0.pre3) and have "require 'cover_me'" in my spec_helper.rb. I'm using "rspec spec/" to run tests...am I missing something else?

Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fixtures v. Factories - Can&#039;t We All Just Get Along?</title>
		<link>http://www.metabates.com/2010/08/15/fixtures-v-factories-cant-we-all-just-get-along/</link>
		<pubDate>Sun, 15 Aug 2010 12:49:37 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=358</guid>
		<description></description>
		<content:encoded><![CDATA[Testing in Ruby on Rails is incredibly easy. I mean stupidly easily. So easy that if you're not doing it, you are a very, very bad developer and should re-evaluate your career choices. (Yes, I believe in testing that much!) One thing that is not all that easy, however, is object creation and populating your test database. Five years ago when I first started working with Rails the only options we had to get data into the database were fixtures, or hastily written 'factory'-esque methods custom to each application.

Fixtures, for those who don't know, are YAML files that contain YAML-ized versions of objects that then get loaded into the test database when you run your test suite. These objects can then be pulled back from the database during your tests. Sounds great, doesn't it? Well, not everybody thinks so. One of the biggest problems with fixtures is they can very quickly get out of control. Keeping track of all the different scenarios your tests needs can get very confusing and frustrating to deal with.

<img class="alignleft" title="Factory Workers" src="http://www.uni.edu/schneidj/webquests/adayinthelife/lotsofworkers.jpg" alt="" width="360" height="283" />So how do we fix this problem? Well, most developers have turned to using factories. Factories allow us to quickly build the data we need for each test, now the building of the data you need for your test is right there in a setup or before method. Easy to manage and keep track of. Now there are a plethora of different factory libraries meant to make this task nicer, a few of the popular ones are <a href="http://github.com/thoughtbot/factory_girl" target="_blank">Factory Girl</a>, <a href="http://github.com/notahat/machinist">Machinist</a>, and <a href="http://github.com/flogic/object_daddy" target="_blank">Object Daddy</a>. The problem with this approach, however, is that it can slow down your tests as you are building database objects for nearly every test, and as we all know, object creation and database inserting can be expensive.

So, what can we do to help solve both of these problems? Well, we can use both of these technologies. Together. Yeah, that's right I'm saying you should use fixtures as well as factories. Sound crazy? Not really. Let me explain.

Most Rails applications have most, if not all, of their functionality behind a login. So whenever we're testing some controller action that sites behind a login we need a user to login with. If we were using factories we would have a setup or before method that would create a new User object and save it to the database, and it would do that for every variant of the test, as well as every other test in our suite that needs a user object.

Why not, create one user object and use that repeatedly through our tests? What I like to do is stick one or two users in my fixtures, so that they're there whenever I need one. I like to do this with most of my major models. Then, when I need to have some custom scenarios, I can break out the factories and build those custom scenarios.

So what does this achieve? Well, I've sped up my tests by already having a few objects in the database, and not having to create them (and roll them back) with each single test. I've also cleaned up my tests significantly by eliminating a lot of setup and/or before methods where these objects were being created. I've also eliminated the biggest problems with fixtures, that they can get overwhelming, because we are only keeping one or two objects in them and using factories for the rest.

I hoped this helped you to understand that we don't have to throw the baby out with the bath water when it comes to fixtures and factories, we can use both. Not go forth and test! Test like your life depends on it (because it does!!).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date>2010-08-15 07:49:37</wp:post_date>
		<wp:post_date_gmt>2010-08-15 12:49:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fixtures-v-factories-cant-we-all-just-get-along</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="factories"><![CDATA[factories]]></category>
		<category domain="post_tag" nicename="fixtures"><![CDATA[fixtures]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="post_tag" nicename="tests"><![CDATA[tests]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>369</wp:comment_id>
			<wp:comment_author><![CDATA[jim]]></wp:comment_author>
			<wp:comment_author_email>jim@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.254.131.79</wp:comment_author_IP>
			<wp:comment_date>2010-08-17 13:49:29</wp:comment_date>
			<wp:comment_date_gmt>2010-08-17 18:49:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree it's a good idea to keep your fixtures small.  My rule of thumb when using fixtures is to have no more than 3 records per model/table.  Otherwise, fixtures become unmanageable.  When I need more test data, I can modify an object from the fixtures after loading it or use a Factory.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>364</wp:comment_id>
			<wp:comment_author><![CDATA[Lailson Bandeira]]></wp:comment_author>
			<wp:comment_author_email>lailsonbm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://lailsonbandeira.com</wp:comment_author_url>
			<wp:comment_author_IP>187.113.113.101</wp:comment_author_IP>
			<wp:comment_date>2010-08-15 20:11:34</wp:comment_date>
			<wp:comment_date_gmt>2010-08-16 01:11:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm working on a project where we have lots of seed data: things like cities, states, postal codes… We use fixtures for them and factories for the other objects. We also eventually mock some expensive objects too…
It may seem complicated, but in fact it's easy to maintain and also gives a decent performance for our tests.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>363</wp:comment_id>
			<wp:comment_author><![CDATA[Andrius Chamentauskas]]></wp:comment_author>
			<wp:comment_author_email>sinsiliux@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://github.com/sinsiliux/blueprints</wp:comment_author_url>
			<wp:comment_author_IP>88.223.50.3</wp:comment_author_IP>
			<wp:comment_date>2010-08-15 16:55:31</wp:comment_date>
			<wp:comment_date_gmt>2010-08-15 21:55:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Or just use blueprints (http://github.com/sinsiliux/blueprints) to get the best of both worlds, without the weaknesses.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>359</wp:comment_id>
			<wp:comment_author><![CDATA[Scott Schulthess]]></wp:comment_author>
			<wp:comment_author_email>scottschulthess@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.scottschulthess.com/coding</wp:comment_author_url>
			<wp:comment_author_IP>74.104.37.173</wp:comment_author_IP>
			<wp:comment_date>2010-08-15 08:24:54</wp:comment_date>
			<wp:comment_date_gmt>2010-08-15 13:24:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://www.scottschulthess.com

Because sometimes, you have to test the user object too.  And at which point, you create a factory for testing it in different states.

They you have to maintain 2?  That's not very dry.

The entire reason why factories win the debate vs fixtures is that they are quicker and easier to maintain.   Using both not only keeps the hassle to maintain the fixtures but you also have to maintain the factories, so you have 2 patterns for creating test objects, and 3x the maintenance instead of just using factories off the bat.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>360</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.7.47.231</wp:comment_author_IP>
			<wp:comment_date>2010-08-15 08:31:49</wp:comment_date>
			<wp:comment_date_gmt>2010-08-15 13:31:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Valid point Scott, but I think it's a small issue. I think the general DRYness you get across your entire test suite, along with the speed improvements, outweighs the small non-DRYness when you're testing the User model. Plus, I find that model maintenance is using pretty low once an app gets going.

If you really wanted to get super DRY you could use the factory to output the fixtures for yout, that way you don't have to maintain both, just the factory, and let it maintain the fixture for you.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>359</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>438</wp:comment_id>
			<wp:comment_author><![CDATA[George]]></wp:comment_author>
			<wp:comment_author_email>george.ogata@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.193.89.163</wp:comment_author_IP>
			<wp:comment_date>2010-09-05 19:16:11</wp:comment_date>
			<wp:comment_date_gmt>2010-09-06 00:16:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I use a similar rule:

Use fixtures for the minimum set of records required to have a working application.

Anything on top of that will potentially speed up the tests at the cost of reducing isolation between them. Sometimes it's worth it, sometimes it's not; take it on a case-by-case basis.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CoverMe – Code Coverage for Ruby 1.9 Reaches RC1</title>
		<link>http://www.metabates.com/2010/09/30/coverme-%e2%80%93-code-coverage-for-ruby-1-9-reaches-rc1/</link>
		<pubDate>Thu, 30 Sep 2010 16:09:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=363</guid>
		<description></description>
		<content:encoded><![CDATA[In <a href="http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9/">August</a> I announced <a href="http://github.com/markbates/cover_me" target="_blank">CoverMe</a> a code coverage tool for Ruby 1.9. Well, today I announce that it has hit it's first release candidate! I've very excited by the fact it's getting close to an 'official' release.

The response to CoverMe has been great and through feedback from the community I've made a lot of improvements and fixed a lot of issues.

While quite a few things have changed under the hood, not much has changed in how you use CoverMe.
<h2>Installation</h2>
The following are instructions for how you would configure CoverMe for a Rails 3 project, adjust to your local environment accordingly.

In  your Gemfile add the following:
<pre>gem 'cover_me', '&gt;= 1.0.0.rc1', :group =&gt; :test</pre>
Then run:
<pre>$ bundle install</pre>
After CoverMe is installed place the following line at the <strong><em>VERY TOP</em></strong> of your 'test_helper.rb' or 'spec_helper.rb' file (for Cucumber put it at the top of the 'env.rb' file):
<pre>require 'cover_me'</pre>
I can't emphasize enough how important it is that the require statement is at the <strong><em>VERY</em></strong> top of that file!

Finally (and optionally) run:
<pre>$ rails g cover_me:install</pre>
This will simply install a Rake task that will wrap both Test::Unit and RSpec tasks with CoverMe and will launch the results at the end of the test suites. I would recommend it. It's kinda the whole point. :)
<h2>That's it!</h2>
Enjoy the release candidate, and of course, please let me know if you find any issues with it. Issues can be reported on <a href="http://github.com/markbates/cover_me/issues" target="_blank">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date>2010-09-30 11:09:25</wp:post_date>
		<wp:post_date_gmt>2010-09-30 16:09:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coverme-%e2%80%93-code-coverage-for-ruby-1-9-reaches-rc1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cover_me"><![CDATA[cover_me]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rcov"><![CDATA[rcov]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="post_tag" nicename="tests"><![CDATA[tests]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to Become a Test-driven Developer</title>
		<link>http://www.metabates.com/2010/10/12/how-to-become-a-test-driven-developer/</link>
		<pubDate>Tue, 12 Oct 2010 16:31:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=367</guid>
		<description></description>
		<content:encoded><![CDATA[In a previous post, <a href="http://www.metabates.com/2010/07/01/testing-is-not-an-option/" target="_blank">Testing Is Not An Option</a>, I talked a lot about why you should write tests, and the arguments you can put forth to your client, manager, or whoever it may be as to why you should write tests. What I didn't talk about was how to start writing tests. So let's talk about that for a bit, shall we?

When I'm talking with a potential client, well at least a client that has an existing code base, I always ask what their code coverage stats are. Now, I know at code coverage stats aren't the be all end all of measuring how good your tests are, but they're a basic enough metric to use as a guide. If they say they're high, then I usually dig in more about how they're testing; what frameworks, BDD, TDD, that sort of thing. Usually though I get a few minutes where they apologize and sheepishly give me their reasons for having little or no tests.

Here are few of those reasons:
<ul>
	<li>We don't/didn't have the time.</li>
	<li>We don't know how.</li>
	<li>It was/is too complicated.</li>
	<li>It was/is too overwhelming.</li>
</ul>
Let's talk about each of this points for a minute.
<h3>"We don't/didn't have the time."</h3>
<h3><span style="font-weight: normal; font-size: 13px;">I never accept time as an argument against testing. Testing ends up repaying it's time investment, and will ultimately give you more time than if you didn't write code. It's a win-win. Again see my previous post in how to get the time signed off on as part of t he project timeline.</span></h3>
<h3>"We don't know how."</h3>
Learn. There's no better time than the present and no better way to learn than being thrown into the deep end. The web is crawling with documentation, screen casts, how to articles and tutorials, and there are plenty of books to get you going. In short the k knowledge is literally at your finger tips, and to be honest it's easier than you think.
<h3>"It was/is too complicated."</h3>
That usually means you're doing it wrong. Take a step back and assess what it is you're trying to do. You're tests should be simple and concise. Don't write tests that are hundreds of lines long. They're tests, not entrance exams to MIT.
<h3>"It was/is too overwhelming."</h3>
Certainly if you didn't write tests as you went along it can get quite overwhelming thinking about all the tests you now need to write for your monolithic app. I'll talk about how you can solve that problem in a minute.
<h2>Making It Happen</h2>
Ok, so now that we've identified a few of the excuses let's talk about how you can starting writing tests today for your application. So, take a deep breath and let's begin.

If you're staring at an existing application, don't try to tackle it all at once, you'll just get overwhelmed, scared, and confused. Instead take it one file/class at a time. First start with your models, as this is where the majority of your application business logic should be. Alphabetically each day pick the next class (or a couple of them) in the list and start to fill our your test files.

What do I mean by fill out your tests files, I mean creating pending tests for each of the methods of your model. Here's an example of a basic Ruby* class and what the pending RSpec spec file would look like:
<pre><code># Class: class Entity def tax_id if self.person? # code here else # code here end end def person? # code here end end # Spec: describe Entity do describe "tax_id" do it "should return a Social Security number if the entity is a Person" do pending end it "should return a Tax ID number if the entity is a Corporation" do pending end end describe "person?" do it "should return true if the entity is a person" do pending end it "should return false if the entity is not a person" do pending end end end</code></pre>
Notice how the method that has the if/else statement in it has two pending tests for it. We need to test each variation of the method.

Now when you run your tests you'll see that you have a bunch of pending tests. Great! Now you just need to fill them in, but at least you know what should be filled in.

I also recommend that you do this every time you create a new method. As soon as you give your method a name go to your corresponding test and create a pending test for that method. This way you know that you have to test that method later. (In a perfect world I would love to see you write your test before returning to your class to fill in the method itself, but baby steps for now.)

Once you have all your pending tests setup each day try to fill in the details of each pending test for a whole class. If that's too much, then try to set aside an hour a day and fill in as many pending tests as you can. Alternatively you can also fill in the tests during the course of the day as you use one of the methods without tests.

Another great way to start filling in your test suite is each time you get a new bug, write a test to reproduce it. This is a great habit to get into as you'll eventually have a great suite of regression tests in place to help prevent those nasty bugs from returning. Write the test, see that it fails, then fix your bug. When your teat passes then you know you've fixed the bug!

Finally, start small. Start by writing unit tests. These are the types of tests I just described. They test a very particular part of your code base to ensure that it does what it should do. These tests are typically easy to write and act as a great corner stone to your test suite as a whole. Don't try to jump right in with full integration tests. The frameworks typically have a steep learning curve, and are more complicated to get up and running. This will lead to frustration and the old feeling of being overwhelmed. You can add these tests in later as you gain experience.

Well, there you have it, a few simple tricks to help you get started testing today. I know this post was a bit on the lengthy side, but I'm glad you stuck with me. Your life will be better for it. When you have a large and expansive test suite life is just better. Food tastes better. The sky is bluer. There will be a skip in your step. And you can use your incredibly high code coverage stats as a pick up line in a bar. On second thought, scratch that last thought. I wrote a test to see if that would work and it failed. It failed miserably.
<h6>* Please not that while I use Ruby as the example language here, the concept applies to whatever language you use.</h6>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>367</wp:post_id>
		<wp:post_date>2010-10-12 11:31:01</wp:post_date>
		<wp:post_date_gmt>2010-10-12 16:31:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-become-a-test-driven-developer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bdd"><![CDATA[bdd]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[tdd]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="post_tag" nicename="tests"><![CDATA[tests]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Becoming an &#039;Expert&#039; Developer</title>
		<link>http://www.metabates.com/2010/11/17/becoming-an-expert-developer/</link>
		<pubDate>Wed, 17 Nov 2010 15:50:16 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=387</guid>
		<description></description>
		<content:encoded><![CDATA[Last week I received an email from someone who used to work at a company that I used to work with. I didn't know him, but he knew me through my work at the company, and my other exploits. He sent me an email to say that after a short time with the company he had been laid off, along with half of the development team. He wasn't looking for pity, but rather advice.

What kind of advice was he asking for, well, he quite simply needed to know how could he become an 'expert' Ruby on Rails developer. First, let me say that this post won't have anything to do with Ruby, Rails, or any other specific programming language. Everything I'll talk about is valid in ANY language on ANY platform. With that disclaimer, let's move on, shall we?

<img class="alignleft" title="Monkey" src="http://herd.typepad.com/.a/6a00d83451e1dc69e2010536ad3deb970b-800wi" alt="" width="250" />

While at this company he got introduced to Ruby on Rails and really loved it, coming from a non-Rails background. Since being laid off he's been trying to land another Rails gig, but everyone is looking for 'expert' Rails developers. So the question was, how to become an 'expert' developer?

I keep putting 'expert' in quotes because, let's be honest here, that's a VERY subjective term. As someone who has hired many developers in his day, I can tell you that I'v

e hired newbies to 'experts' and everywhere in between. Everyone has their merits and possibilities. I've met 'experts' that I wouldn't hire to take out my trash, let alone build my business. I've also met people right out of college that I would hire again and again. So your mileage my vary.

So... how do you build up that 'expert' reputation? Let's look at it. Below are some of things I've done, as well as some of the things that I look for as a hiring manager. Some are incredibly easy to do, others require work, but in the end they WILL pay off, and you'll easily be at the head of the pack when going for that job.
<h3>Build Something</h3>
When you are looking for a job people want to see what it is you've actually built. If you haven't built anything, then how are you an expert? Build a lot of different things and put them up on the web for perspective employers to find and play around with. Use these are a playground for trying out all those cool new technologies you keep hearing about. Want to give NoSQL a try? Great, build an app that uses it. Need to improve your testing chops? Write an application and write all the tests you can possibly think of!
<h3>Get a GitHub Account</h3>
I can't tell you how important GitHub has become when trying to make a name for yourself. It seems like unless you're on GitHub, you're nobody. While that might not be true, it certainly hurts more than it helps to not have an account. You know those apps you've just been building and playing around with? Post them on GitHub! Then put your profile page link on your resume. Yep, you read that right. Give those looking at your resume a link to your code. Let them see how good a developer you actually are. Show them you know how to code all the things you've got on your resume. Listing a language, platform, or tool on resume is one thing, but actually showing your perspective employer is another! They'll love it.

While you're on GitHub, why not contribute to an open source project that's up there. There are plenty of them, and they're ALL looking for people to help out with their projects. Simply fork the projects, make some improvements, and then give those changes back to the projects owner. This looks great on a resume and really helps to show that you are interested and active in the community. Again, employers love this! Plus, you'll be starting to build a name for yourself, and building a network, and a network is INCREDIBLY important when looking for work.
<h3>Blog and Write</h3>
I should probably heed my own advice here and blog more often, but do as I say, not as I do. :) With that said I wrote a book, which looks AMAZING on a resume, but might be a bit out of reach for most people, so I recommend blogging instead. Why should you blog? Well, it shows that you have good communications skills, again very important to most employers. It can also show that you have a deep understanding of whatever it is you blog about.

What should you write about? If you're stuck on a topic, might I make a recommendation or two. First, when you're building those applications I mentioned early if you run into a bug or something else that got you a bit stuck, blog about it! Others could really benefit from your experience. Explain the problem and how you went about solving it. Another great thing to write about is your favorite libraries or plugins. Pick a different one each week and dissect it. Write about how it works, what it does, etc... This is a great exercise in both writing and learning about how things work. Very valuable.
<h3>Network</h3>
I mentioned earlier that a good network is INCREDIBLY important when looking for work, and I wasn't lying. It's the most important thing. A good network will constantly be feeding you new opportunities, or putting you in touch with those who can. So how do you develop that network? A few ways, I mentioned contributing to open source earlier, that's a great way. Another great way is through conferences, hackfests, rumbles, and whatever other local (and non-local) events are being held in your development community of choice. Attend these events, participate, introduce yourself, speak, buy drinks, whatever! Just get out there and NETWORK!!
<h3>Conclusion</h3>
The gentleman who emailed me said that he was reading a lot of books in hopes of becoming an 'expert'. While I'm not going to tell you not to read books (you should!!), I will tell you that there is no substitute for doing. All of things I've talked about above are ALL about doing. Reading is not doing, it's reading. It's passive and will not get you further in your career. There's no place on a resume for the books you've read. Take what you've read and put it into action, then you'll be on your way to becoming an 'expert' developer.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date>2010-11-17 10:50:16</wp:post_date>
		<wp:post_date_gmt>2010-11-17 15:50:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>becoming-an-expert-developer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blog"><![CDATA[blog]]></category>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="developer"><![CDATA[developer]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="githubcom"><![CDATA[github.com]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>571</wp:comment_id>
			<wp:comment_author><![CDATA[John McCaffrey]]></wp:comment_author>
			<wp:comment_author_email>railsperformance@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://railsperformance.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>12.15.248.2</wp:comment_author_IP>
			<wp:comment_date>2010-12-01 11:14:46</wp:comment_date>
			<wp:comment_date_gmt>2010-12-01 16:14:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would second the importance of networking and going to events. I used to think that the people that went to conferences and user groups were only 'Experts', but then realized that a very wide spectrum attends, from people that know everything about a topic, to those that don't know anything, and those that are interested and looking for a heads up on where to get started.

At these events, you should find someone that would welcome a collaborator/tester/wall-to-bounce-ideas-off-of, and that can be a jumpstart to moving faster in the field.

The other thing I learned about local user groups is that they are always looking for people to speak, and you don't have to be an expert to be an interesting speaker. 

Here's a progression I often go through:
 1. Do something interesting, or observe a trend
 2. Send out an email or write up a wiki page/blog post about the interesting thing
 3. Expand my example, write a plugin, or do a 5 min internal presentation on the interesting thing
 4. Record a screencast, or present my 5-15 min interesting thing to a local user group.

I've done this with:
 javascript unit testing
 selenium
 jmeter and load testing
 firefox/firebug/yslow/page-speed
 PDF Generation
 Improving Web Performance

WIth each thing I started with a problem I needed to solve, and just researched it, and then presented what I learned, kept gathering info, helped others get setup, and presented 'common problems people run into when trying to do this'.

At a local user group, its usually acceptable to present a "Here's what I needed to do, what I tried, and where I ended up" type presentation, as opposed to "Here's the absolute BEST way to solve all problems, that YOU should be doing", which requires too much knowledge and puts you in a position of telling the audience what they should do, when its easier to start off with just telling them what you tried and why.  
Some people may tell you that you did it wrong, so be ready for that, but that feedback will lead to you learning more.

Props to local user groups that encourage new speakers, with panel discussions, lightning/ignite style (5min) presentations, hackfests, and bar camp/code camp type conferences.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Building Interfaces and Abstract Classes in Ruby</title>
		<link>http://www.metabates.com/2011/02/07/building-interfaces-and-abstract-classes-in-ruby/</link>
		<pubDate>Mon, 07 Feb 2011 20:45:05 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=393</guid>
		<description></description>
		<content:encoded><![CDATA[So back in the dark ages of my career, pre-2006, I spent a long time coding Java. Yeah, I know, please don't judge. Anyway, In Java, for those of you who are unaware were two constructs that I occasionally wish I had in Ruby, those are <a href="http://download.oracle.com/javase/tutorial/java/concepts/interface.html" target="_blank">Interfaces</a> and <a href="http://download.oracle.com/javase/tutorial/java/IandI/abstract.html" target="_blank">Abstract Classes</a>. The difference between these two constructs is subtle, but important.

In Java an Interface is a basically a blueprint of methods that the class who implements the Interface needs to implement. For example:

[gist id=814920]

Here we have a <code>Bicycle</code> Interface that says there are three methods that need to be implemented. It is then the responsibility of the <code>ACMEBicycle</code> class to implement those methods. Now, an Abstract Class in Java is similar to an Interface in that it too is a blueprint of methods that the extending class may or may not need to implement. There in lies one of the differences between the two. Let's take a look at the same example, but this time we want to implement the same behavior of all of our extending classes for the <code>applyBrakes</code> method:

[gist id=814926]

An Abstract Class is a great way to provide a mix of fully implemented methods as well as providing subclasses with a mixture of methods that need to be implemented by the extending class.

The really powerful part of all of this is two fold. First, the Java compiler will happily yell at you and fail if it finds that you haven't implemented some of the methods that you were told you had to. Second, you can easily see the methods that you need to document right there, you can even copy/paste their definitions right into your class so you can start to fill them out.

So, how does this bring us over to Ruby? Great question. I'd like to take a few moments and explore a few ways we can get some of this power in Ruby.

Unfortunately, or fortunately depending on how you look at it (I see it as a mixed blessing), there is no compiler in Ruby, so we don't really have a good way of having the system yell at us if we don't implement the methods we were supposed to. But, there is still plenty we can do to help those who are implementing our classes both know what they need to implement and to find out what they haven't implemented when their program is executing.

Here is one implementation on we can gain a bit of that functionality back in Ruby:

[gist id=815110]

What we've done here is to inject a Module into our <code>Bicycle</code> class to give it a nice error it can raise and a little bit of help building a nice error message for the user. Then in our <code>Bicycle</code> class we define all the methods we want and in the ones we need the end user to define we can call the <code>api_not_implemented</code> method and it will raise the <code>AbstractInterface::InterfaceNotImplementedError</code> error for us.

We could simplify this a bit by having a nice little helper macro that we can use to build these methods, like this:

[gist id=815133]

That approach certainly makes our code look a bit cleaner, I'm not denying that, however it has one really big flaw, at least for me anyway, it doesn't give us a good to place to hang our documentation hat. In the previous approach we had actual methods that we could then document and that documentation would then show up in RDoc when it's outputted. With the latter approach, however, we can document the hell out of the <code>needs_implementation</code> calls we have in the <code>Bicycle</code> class, but they won't ever show up in the documentation. That means that users of our library have to crack open the actual code itself to see what it they are expected to implement.

Another approach we could've taken, which I bother to demonstrate here as I don't think it offers a better approach is to have the <code>needs_implementation</code> method collect up the names of those methods and use <code>method_missing</code> to report that the method needs to be implemented. I mention it here only for completeness, but it definitely is not the best solution to this problem.

Finally, I would like to note that, as far as I can see, there is no way in Ruby to create a callback hook for when a class has been defined. If there was in fact such a hook we could use to it immediately notify the end user that they have forgotten to implement certain methods. Perhaps in Ruby 2.0??? That's just pure hope on my part.

That's it. I hope you enjoyed our brief (*cough*) look through implementing Interface and Abstract Classes in Ruby. I hope you've enjoyed it.

* PS, yes, I'm aware I didn't talk about multiple vs. single inheritance in either Java or Ruby, nor did I talk about the fact that in Ruby you can't really have Abstract Classes. I thought that was all a bit much for an already rather lengthy post as it was. Perhaps another day. :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date>2011-02-07 15:45:05</wp:post_date>
		<wp:post_date_gmt>2011-02-07 20:45:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-interfaces-and-abstract-classes-in-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>632</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.7.47.231</wp:comment_author_IP>
			<wp:comment_date>2011-02-09 14:00:40</wp:comment_date>
			<wp:comment_date_gmt>2011-02-09 19:00:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, and I would love to see library developers start shipping 'shared_examples_groups' for their libraries. That way when you go to implement Class Y you can plug in the shared_example_group for it and know that you're doing the right thing because of those examples.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>626</wp:comment_id>
			<wp:comment_author><![CDATA[Vidar Hokstad]]></wp:comment_author>
			<wp:comment_author_email>vidar@hokstad.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.hokstad.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>82.70.200.181</wp:comment_author_IP>
			<wp:comment_date>2011-02-09 04:56:10</wp:comment_date>
			<wp:comment_date_gmt>2011-02-09 09:56:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why? You still need testing, or you still risk running into exceptions at runtime. And if you leave the methods undefined in the class in question, you'll get an exception when used with test cases that triggers the use of the unimplemented methods anyway. So the only difference is that you get different exceptions.

This seems like an attempt at writing Java in Ruby, defeating much of the purpose of using Ruby in the first place.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>628</wp:comment_id>
			<wp:comment_author><![CDATA[Jorge Dias]]></wp:comment_author>
			<wp:comment_author_email>jorge@mrdias.com</wp:comment_author_email>
			<wp:comment_author_url>http://mrdias.com</wp:comment_author_url>
			<wp:comment_author_IP>212.64.167.253</wp:comment_author_IP>
			<wp:comment_date>2011-02-09 12:29:27</wp:comment_date>
			<wp:comment_date_gmt>2011-02-09 17:29:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There's a hook called inherited, that get's called when on a super class when it's inherited. May that work for you?

http://apidock.com/ruby/Class/inherited]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>629</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Gibler]]></wp:comment_author>
			<wp:comment_author_email>paul.gibler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.110.142.178</wp:comment_author_IP>
			<wp:comment_date>2011-02-09 12:51:21</wp:comment_date>
			<wp:comment_date_gmt>2011-02-09 17:51:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with Vidar. If you want the statically typedness of Java, use Java. Test Driven Development lets you handle errors far better than trying to Javafy Ruby. Still, this is a good post - some interesting stuff for sure.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>630</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.7.47.231</wp:comment_author_IP>
			<wp:comment_date>2011-02-09 13:48:37</wp:comment_date>
			<wp:comment_date_gmt>2011-02-09 18:48:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Jorge, the inherited, and it's Module cousin included, are great methods that allow you to do some fantastic meta programming tricks. However, they both suffer from the same problem, they are usually at the start of the class definition. Example: <code>User &lt; ActiveRecord::Base</code> is where the inherited method would get called, so it is unaware of all the method definitions that are to follow in the class you're defining. Does that make sense? I'm saying it be great to have a <code>class_defined</code> hook, that would get loaded whenever the <code>end</code> on a class definition gets executed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>628</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>631</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.7.47.231</wp:comment_author_IP>
			<wp:comment_date>2011-02-09 13:57:50</wp:comment_date>
			<wp:comment_date_gmt>2011-02-09 18:57:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Paul and @Vidar, I agree if you want a statically typed language, than Java's a pretty good one. With that said one of things I never liked about Java was the fact it was statically typed. I'm not talking about static typing or duck typing in this post, however. What I am talking about is giving people who are implementing some library a nice template and contract to help them develop too. Testing is, of course, one of the most important parts of the development process, just read some other articles on my blog for my feelings towards testing, but you have to know what you are supposed to be testing and what needs to be implemented.

Too many times I've seen developers post something like this in their README files for a library:

<code>Library X is easy to extend and customize! Just implement your own version of Class Y!</code>

That's great, but what am I supposed to implement for Class Y? What methods? What do they do? Where's the documentation? What if the library is updated and new methods need to be implemented? I'm simply talking about a way to help ensure people implementing these classes know what they're implementing and they are alerted when they've missed something.

I'm advocating Javafying Ruby, far from it, but it is important to remember that other languages have good features too, and that we as a community should keep our eyes out for those good features and steal the hell out of them! :)

Finally, and I don't think I made this clear in the original post, this is post was more of a thought exercise. "How would we implement Interfaces and Abstract Classes in Ruby?" That sort of thing.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>629</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>654</wp:comment_id>
			<wp:comment_author><![CDATA[Vesa Vänskä]]></wp:comment_author>
			<wp:comment_author_email>vesan2000@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://vesavanska.com</wp:comment_author_url>
			<wp:comment_author_IP>213.243.140.107</wp:comment_author_IP>
			<wp:comment_date>2011-03-01 01:28:14</wp:comment_date>
			<wp:comment_date_gmt>2011-03-01 06:28:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can get documentation for needs_implementation -calls by using YARD and writing a custom construct plugin for it. Check http://yardoc.org/features.html under the "Custom Constructs and Extensibility" heading.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>635</wp:comment_id>
			<wp:comment_author><![CDATA[Sean Huber]]></wp:comment_author>
			<wp:comment_author_email>sean.m.huber@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://huberry.com/</wp:comment_author_url>
			<wp:comment_author_IP>99.50.203.193</wp:comment_author_IP>
			<wp:comment_date>2011-02-09 19:44:44</wp:comment_date>
			<wp:comment_date_gmt>2011-02-10 00:44:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Mark, Completely agree and I can definitely see the benefit of using it to test library extensions e.g.

  class CustomModel
    implements ActiveModel
    ...
  end

I've updated https://github.com/shuber/interface with interface testing assertions so you can do something like

  class CustomModelTest &lt; Test::Unit::TestCase
    def test_should_implement_active_model
      assert_implements_interface CustomModel.new, ActiveModel
    end

    # or test all interfaces
    def test_should_implement_interfaces
      assert_implements_interfaces CustomModel.new
    end
  end

By &#039;shared_examples_groups&#039; do you mean something like ActiveModel::Lint::Tests (http://yehudakatz.com/2010/01/10/activemodel-make-any-ruby-object-feel-like-activerecord/)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>638</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Schwartz]]></wp:comment_author>
			<wp:comment_author_email>steve@alfajango.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.alfajango.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>68.42.78.8</wp:comment_author_IP>
			<wp:comment_date>2011-02-11 15:03:11</wp:comment_date>
			<wp:comment_date_gmt>2011-02-11 20:03:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is very interesting. I was really hoping you could do something like this in your Interface module:

  def self.included(klass)
    missing = Interface::Methods.methods - klass.methods
    raise Interface::InterfaceNotImplementedError.new("#{klass.class.name} needs to implement '#{missing.first}' for interface #{self.name}!") unless missing.size == 0
    klass.send(:include, Interface::Methods)
    klass.send(:extend, Interface::Methods)
  end

But unfortunately, at the time of include, our klass's methods have not yet loaded, so it would always error out. It could possibly work if we included the Interface module at the *bottom* of our class, but I that's really not an acceptable solution.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>621</wp:comment_id>
			<wp:comment_author><![CDATA[Sean Huber]]></wp:comment_author>
			<wp:comment_author_email>sean.m.huber@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://huberry.com/</wp:comment_author_url>
			<wp:comment_author_IP>206.169.124.42</wp:comment_author_IP>
			<wp:comment_date>2011-02-08 16:31:13</wp:comment_date>
			<wp:comment_date_gmt>2011-02-08 21:31:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting and inspiring post! Here's my stab at it: https://github.com/shuber/interface]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>622</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.7.47.231</wp:comment_author_IP>
			<wp:comment_date>2011-02-08 17:13:06</wp:comment_date>
			<wp:comment_date_gmt>2011-02-08 22:13:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Sean! You got the spirit of the post, it's really just some food for thought and to get people thinking.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>621</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Testing Tools Aren&#039;t All the Same, Choose Wisely</title>
		<link>http://www.metabates.com/2011/03/04/407-testing-tools-arent-all-the-same-choose-wisely/</link>
		<pubDate>Fri, 04 Mar 2011 15:57:04 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=407</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><img class="alignright" title="mario" src="http://www.divanikkiz.com/site/images/stories/mlss_mario-hammer.jpg" alt="" width="255" height="282" />"Testing is painful."</blockquote>
<blockquote>"Testing is hard."</blockquote>
<blockquote>"Testing is complicated."</blockquote>
<blockquote>"Testing is not fun."</blockquote>
I hear those sorts of things all the time when I talk to people about testing. I agree that sometimes testing can be all of those things, but if you choose the right tools, the tools that best suite you, testing doesn't have to be. Let me give you an example of what I'm talking about, how choosing the right tools can make a huge impact on how you feel about testing.

When working for a client recently I came across the need for end to end integration testing. I needed to test, amongst other things, the flow of a user registering through the application in a few different ways. Because registration behaves differently based on where you come from and where you want to go, I needed a good way to test that entire flow, so simple unit and functional tests just were not going to cut it.

In the Ruby community there is a big push to use a testing framework called, <a href="http://cukes.info/" target="_blank">Cucumber</a>. Cucumber is a behavior driven development (BDD) tool that let's you write user stories in plain English. Those stories then get translated into Ruby code that tests those stories against your application. Because of it's popularity, and some of it's quite amazing features, this was my first stop on the path to integration testing bliss.

Let me give you an example of a Cucumber script:

[gist id=854764]

That script tests the user registration flow through an application in a couple of different ways, first through 'standard' registration, and then through being invited to join. Now, the beauty of Cucumber is that these scripts are 'human' readable. Your product manager, or other stake holders, should be able to write these scripts themselves, and you, the developer, should be able to just plug them in and code until those scripts pass.

Unfortunately, while that sounds like a little slice of Heaven, the reality is far from it in practice. First, getting stake holders to actually write these 'stories', as their typically called, is a tough chore to begin with. If they do write them, they're typically not going to be 'plug and play'. Why? Well, when Cucumber reads these scripts it goes line by line and tries to find some code that matches the regular expression of that line and then execute it. If it doesn't find matching code, then it fails. That means that your stake holders need to write these scripts in a very particular way or developers need to sit down and massage those stories to fit the correct regular expression.

Now, let me just take this opportunity to say that this is not a post about how much I hate Cucumber, in fact I think Cucumber is a pretty amazing piece of software, and does in fact have a lot of great uses. Instead, what I'm talking about it is how Cucumber turned out not to be the right tool for the job for me on a recent project.

So why wasn't Cucumber the right tool for the job? Great question, glad you asked. Cucumber turned out not to be the right tool for a few reasons. The biggest of which was that I was the one who was writing the user stories. The stake holders had no desire to write these stories, which meant I had to write them. The I had to write the 'steps' that back each line of the script. In all fairness, Cucumber does give you some great steps right out of the box. After some fiddling I finally got the Cucumber scripts up and running and testing my work flow. But I definitely ran into some issues.

Because Cucumber isn't pure Ruby I had a hard time doing something as simple as just printing out the request's body and headers without having to write a step that did just that, then add that step to my story, etc... It's overall fiddlyness and non-intuitive way of doing things caused me a lot of grief and time. And, most importantly, I wasn't really getting the big benefit of Cucumber, stake holder's writing the stories. So I was doing all this work and not getting the benefits of Cucumber.

So what did I do? I turned to a library called <a href="https://github.com/cavalle/steak" target="_blank">Steak</a>. Steak allows you to write integration tests using pure Ruby and integrates directly in with <a href="http://relishapp.com/rspec" target="_blank">RSpec</a>, my preferred testing framework. With Steak I was able to write my integration tests in just a few minutes.

[gist id= 854844]

While my Steak scripts a bit more wordy and are definitely not 'human' readable and editable by stakeholders, they did achieve my goal of allowing me to write integration tests quickly.

So here you see I picked a very powerful tool, that has a lot of great benefits, Cucumber, but I picked it for the wrong reasons. I picked it because it was popular, and not because it would help me achieve my goals. If my goals where to have stakeholders write the stories and hand them off to development, than it would've been a better choice. But in the end my goal was to write integration tests and write them quickly, which is why Steak ended up being the right tool for that job.

This has all been a really long winded way of saying doing some research before choosing your testing frameworks, or any framework for that matter. Play with it, research it, make sure it meets your goals, not somebody else's. If you choose the right tools then testing doesn't need to be scary, complicated, frustrating, etc... Testing is a <a href="http://www.metabates.com/2010/07/01/testing-is-not-an-option/">requirement</a> and a must have, so why not make it fun?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>407</wp:post_id>
		<wp:post_date>2011-03-04 10:57:04</wp:post_date>
		<wp:post_date_gmt>2011-03-04 15:57:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>407-testing-tools-arent-all-the-same-choose-wisely</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cucumber"><![CDATA[cucumber]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="steak"><![CDATA[steak]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="post_tag" nicename="tests"><![CDATA[tests]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>676</wp:comment_id>
			<wp:comment_author><![CDATA[Zanor]]></wp:comment_author>
			<wp:comment_author_email>anon@anon.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.19.182.15</wp:comment_author_IP>
			<wp:comment_date>2011-03-21 08:02:45</wp:comment_date>
			<wp:comment_date_gmt>2011-03-21 13:02:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Really nice post. I've been trying to get into testing in Rails, and with the sore lack of cohesion/understanding in "where to begin", it has been a pain. I tried to understand Cucumber, but it just put me off - did not like the need for a "english"-version AND a step-definition version. That regex put me off to (I would probably spend more time figuring out regexes, and that would make me a expert I suppose).

Thank you for telling me about Steak. I think I will be using that and the example you gave is a great start (since it can apply to virtually every app to be made).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300712566.0111";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300712631.2723";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>657</wp:comment_id>
			<wp:comment_author><![CDATA[James]]></wp:comment_author>
			<wp:comment_author_email>office@jameswilding.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.jameswilding.net/</wp:comment_author_url>
			<wp:comment_author_IP>82.69.10.204</wp:comment_author_IP>
			<wp:comment_date>2011-03-05 16:18:51</wp:comment_date>
			<wp:comment_date_gmt>2011-03-05 21:18:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Mark

I agree that cucumber is more work, but it's often worth the effort if the project stakeholders don't understand ruby code. 

You shouldn't expect the stakeholders to write the cucumber steps themselves. I normally get the project manager to write a plain English description of a feature; then I translate the feature into "cucumber English". The result is a feature description that the project manager can understand, and that I can use as a real basis for tests. 

It's slightly more work in the short term, but in the long run there's a massive advantage to having tests that a non-rubyist project manager can actually understand: testing is important, and it's much easier to justify the hours spent writing tests when the tests are meaningful to the client.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299359931.1648";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299360132.9408";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>656</wp:comment_id>
			<wp:comment_author><![CDATA[Jo]]></wp:comment_author>
			<wp:comment_author_email>menschenskinder@excite.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.173.157.30</wp:comment_author_IP>
			<wp:comment_date>2011-03-05 06:01:53</wp:comment_date>
			<wp:comment_date_gmt>2011-03-05 11:01:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I like your post and I agree.
Let me concentrate on two aspects ;-)
1) In my sense you kind of excuse yourself  for not using cucumber. I note this behaviour at 90% of all posts by ruby devs dealing with 'why I'm not using cucumber'. Ruby (and Rails) has a vibrant community but - that's my interpretation of all the excuses like yours above - the peer pressure seems enormous to me.
The majority of 'cucumber infected ruby devs' seems to have the opinion, that the way that they do testing is the one and only way. Even more astonishing is the evangalizing they do. 
In this mass of word the factual advice of David Chelimsky is often overheard. He said: (Only) If your customer reads and writes the Feature descriptions then use it.  
So he is totally with you.
2) I'm developing software for 20 years. Solo, in small teams, in bigger teams, desktop, client / server, web.
I never met a situation where the customer deals with concrete descriptions of features. They all ! figure things out in the reals word, the working software. So in my opinion a quick prototype or even a click-model are worth the time.
Writing cucumber feature  not.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299322913.7767";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1299327145.961";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Because everybody has an opinion...</title>
		<link>http://www.metabates.com/2011/04/15/because-everybody-has-an-opinion/</link>
		<pubDate>Sat, 16 Apr 2011 01:30:20 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=430</guid>
		<description></description>
		<content:encoded><![CDATA[In case you've been living in a cave this week you've probably heard that <a href="http://www.rubyinside.com/rails-3-1-adopts-coffeescript-jquery-sass-and-controversy-4669.html">Ruby on Rails</a> is going to be including both the <a href="http://coffeescript.org/">CoffeeScript</a> and <a href="http://sass-lang.com/">SASS</a> libraries, it will also make <a href="http://jquery.com/">jQuery</a> the default JavaScript framework, replacing the <a href="http://www.prototypejs.org/">Prototype</a> framework.

I would like to start by addressing my experiences with CoffeeScript. My opinion of it is of ambivalence. I've used it on a project, I've played with and in the end I've come out with the opinion of "it's ok". It didn't blow me away, but at the same time I can see why so many people like. It offers some really cool features that I really wish JavaScript had and you can cut down on the amount of code you have to write. On the other hand the apps I tend to write don't tend to be that JavaScript heavy that I really needed to reach out for something like CoffeeScript.

<img class="alignleft" src="http://blogs.worldbank.org/files/publicsphere/public%20opinion_JGRNLY.jpeg" alt="" width="326" height="246" />So, how do I feel about CoffeeScript being included with Rails? Well, I'll get to that. Let's go over some of the most common arguments I've heard from people this week about why they're anti-CoffeeScript in Rails.
<blockquote>"It's an abstraction layer of JavaScript! JavaScript isn't that bad, why can't you just write JavaScript?"

"It's going to be a hinderance to newbies. It'll be too much of a learning curve!"</blockquote>
Let's start with that second point first, shall we? I agree, it does represent a new element that needs to be learned when coming to Rails. But here's the pretty nifty thing about how it's all implemented in Rails. In order to actually use CoffeeScript in Rails you have to create your files named foo.js.coffee if, however, you just name your file foo.js then, guess what? You will have to write plain old JavaScript! Seems like newbies, and those who don't like CoffeeScript, can just keep writing plain old JavaScript without anything stopping them at all.

Now, let's talk about the abstraction layer argument. Yes, CoffeeScript is an abstraction on top of JavaScript, but let's take a look at a few other parts of the Rails stack and see how they hold up against this argument.

Here's a fairly common Rails stack:
<ul>
	<li>ActiveRecord</li>
	<li>Haml</li>
	<li>jQuery</li>
	<li>RSpec</li>
</ul>
What do all those things have in common? Well, they're all abstraction layers that sit on top of something else, don't they? Let's look at that list again?
<ul>
	<li>ActiveRecord - SQL (Structured Query Language)</li>
	<li>Haml - HTML</li>
	<li>jQuery - JavaScript, you could just as easily hand roll those AJAX calls in pure JavaScript.</li>
	<li>RSpec - Test/Unit</li>
</ul>
What I've found funny about the particular argument is that I've heard it MOST from those who use things like HAML, which is a DEFINITELY an abstraction layer that sits on top of HTML. See where I'm going with this one? Good, I don't want to belabor the point. :)

So, finally, where do I stand on this whole thing? Well, I view like it Test/Unit and Prototype. Those are both the current standard (although jQuery will replace Prototype in 3.1) and I don't like or use either of them. Instead I configure Rails to use jQuery and RSpec. I don't like Haml, but those that do simply replace ERB with Haml and they move on with their day. So my take is this, it's there, it's included. Use it if you like, or don't. Is it really that big a deal? No, it really isn't. If Rails dropped ERB and went with Haml as the default, would I bitch and moan, probably a bit, but then I'd just install the Rails-ERB gem and move on with my day, just like I do with jQuery and RSpec today.

So sit back, relax, use the libraries that you want to use, Rails let's you do that. Oh, while you're relaxing why not try out CoffeeScript, who knows, you might just enjoy it. Or not.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>430</wp:post_id>
		<wp:post_date>2011-04-15 20:30:20</wp:post_date>
		<wp:post_date_gmt>2011-04-16 01:30:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>because-everybody-has-an-opinion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="coffee-script"><![CDATA[coffee script]]></category>
		<category domain="post_tag" nicename="erb"><![CDATA[erb]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="haml"><![CDATA[haml]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[rspec]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Project, Issue, and Error Tracking United!</title>
		<link>http://www.metabates.com/2011/04/25/project-issue-and-error-tracking-united/</link>
		<pubDate>Mon, 25 Apr 2011 12:00:45 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=436</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.metabates.com/wp-content/uploads/2011/04/issue_list_big.png"><img class="alignleft size-medium wp-image-437" title="issue_list_big" src="http://www.metabates.com/wp-content/uploads/2011/04/issue_list_big-300x225.png" alt="" width="300" height="225" /></a>For the last few years every project or company I've worked for has started the same way, by setting up Basecamp, Lighthouse and Hoptoad (or similar ones anyway). Why? Basecamp  - so we could share documents and todos. Lighthouse - so we could track our issues and bugs. Hoptoad - so we could track the errors our application was generating.

These are all very good applications and have served myself and my clients well, but they've suffered from several very big flaws. The first big flaw was the cost. You can easily drop $100 or more a month across these different services. But that wasn't the biggest flaw or problem I've had with these services. The biggest problem was lack of integration.

So what do I mean by lack of integration? Well, when an error comes in I want to easily be able to create a new issue from it. When the issue gets resolved, so should the error. If the error reoccurs it should re-open automatically, and so should the issue. I want to be able to create an issue right from a document or be able to attach issues to a document. I should be able to follow the flow from document to issue to error and back again very easily. Unfortunately, these applications don't give you that level of integration. They offer some level, but just not enough.

Well, my friends, welcome to the future. Welcome to <strong><a href="http://www.fluxtracker.com?ref=metabates">FluxTracker.com</a></strong>. FluxTracker combines a great issue tracker, a project management system, and an error tracker all in one application. Now you can full integration without any configuration, oh, and you can do it at a fraction of the cost!

We know it isn't easy to switch to a different application, that's why we've made it easy for you. You can easily <a href="http://www.fluxtracker.com/pages/lighthouse_importing?ref=metabates">import your Lighthouse</a> account. FluxTracker also allows you to easily use the <a href="http://www.fluxtracker.com/pages/api/hoptoad_notifier?ref=metabates">Hoptoad Notifier</a> plugin for your project by just setting a few configuration parameters.

So know you know, you're life can be easier. And you now know how easy it is to get started! So what are you waiting for? Go and <a href="https://www.fluxtracker.com/signup?ref=metabates">sign up</a> for our Free plan and start living the dream.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date>2011-04-25 07:00:45</wp:post_date>
		<wp:post_date_gmt>2011-04-25 12:00:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>project-issue-and-error-tracking-united</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="basecamp"><![CDATA[basecamp]]></category>
		<category domain="post_tag" nicename="error-tracking"><![CDATA[error tracking]]></category>
		<category domain="post_tag" nicename="fluxtracker"><![CDATA[fluxtracker]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="hoptoad"><![CDATA[hoptoad]]></category>
		<category domain="post_tag" nicename="issue-tracking"><![CDATA[issue tracking]]></category>
		<category domain="post_tag" nicename="lighthouse"><![CDATA[lighthouse]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="category" nicename="press"><![CDATA[Press]]></category>
		<category domain="post_tag" nicename="project-management"><![CDATA[project management]]></category>
		<category domain="category" nicename="releases"><![CDATA[Releases]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>689</wp:comment_id>
			<wp:comment_author><![CDATA[Nerian]]></wp:comment_author>
			<wp:comment_author_email>siotopo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://nerian.github.com/</wp:comment_author_url>
			<wp:comment_author_IP>138.48.209.206</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 13:00:45</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 18:00:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I will give it a try, look quite good. But let me give you a suggestion, don't make the error and notices flash away, because I barely have enough time to read them :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303754445.6099";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304783627.0276";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Stop Complaining. Start Contributing!</title>
		<link>http://www.metabates.com/2011/05/24/stop-complaining-start-contributing/</link>
		<pubDate>Tue, 24 May 2011 15:56:33 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=454</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignleft" title="stop complaining" src="http://tanamatales.com/wp-content/uploads/2011/05/stop_complaining1.jpg" alt="" width="300" height="225" />Because I maintain several open source projects on <a href="http://github.com/markbates" target="_blank">Github</a> I'm constantly getting emailed questions or issues, or people are always opening up tickets with bugs, issues, complaints, etc... And I really appreciate the feedback on these projects, I really do. What I would appreciate more is if instead of just opening a ticket, or sending an email, why not fork the project, fix it, and then contact me?

Now, I know that sounds like a lot of work, but honestly it's really not. Github has made contributing to open source projects so trivial that everyone should be doing it. Take for example a recent ticket I got for one of my projects. The gist of ticket was that if there was a space in the project name the library would throw an error. That's a great bug! It's also an incredibly easy one to fix. If the person who opened the ticket has actually just submitted a pull request with the fix instead the fix would already have been deployed. Granted it would've taken a bit more than the few minutes to open the ticket, but not that much more. [UPDATE: He actually did fork the project and is trying to fix it! Awesome!]

So why should you do this? Why should you take the time to fix your own issues instead of having the library owner/maintainer do it? Well, the reasons are plentiful, but here are a few of my favorites:
<ul>
	<li>You can have it now! That's right, if you fork the project and fix the bug or add that new feature you can start using today! Even before the project owner has a chance to merge in the pull request. That's a total win right there!</li>
	<li>Quicker to be released to the general public. Maintainers of open source projects are busy people and, usually, don't spend all day working on their open source libraries. If someone submits a good patch or feature then it's easier for them to pull it in and get it out as a proper release sooner.</li>
	<li>It feels good! It feels really good to contribute back to a project that you use often. After awhile you might even get commit rights to the project and won't have to maintain a fork. That feels really good!</li>
	<li>Build a name for yourself. That's one of the ways you land better jobs or contracts. People start seeing your name floating around commit messages. You get to know the people maintaining the projects, they like your work, then when they're looking to fill a position, guess who they think of?</li>
	<li>It makes you a better developer. By contributing to different projects you learn different techniques. You get to understand the code of the library you're using and learn little tricks that you might not have known about otherwise.</li>
</ul>
Those are just a few of the reasons why giving back to the open source community is great. So the question I'm going to leave you with now is are you going to be a player or a hater? Someone who just complains all day, or someone who helps to make the world a better place? I'm hoping you become the latter.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date>2011-05-24 10:56:33</wp:post_date>
		<wp:post_date_gmt>2011-05-24 15:56:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stop-complaining-start-contributing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="githubcom"><![CDATA[github.com]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Collect user feedback through FluxTracker.com</title>
		<link>http://www.metabates.com/2011/06/13/collect-user-feedback-through-fluxtracker-com/</link>
		<pubDate>Mon, 13 Jun 2011 16:00:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=464</guid>
		<description></description>
		<content:encoded><![CDATA[About six weeks ago I announced <a href="http://www.fluxtracker.com?ref=metabates2">FluxTracker.com</a> a unified issue, document, and error management service. The response has been amazing. People love that you can now manage all of those things in one place, without any configuration. Well, today I'm happy to announce that FluxTracker has taken the next step forward to make managing all aspects of your project easier. Introducing FluxTracker <a href="http://bit.ly/juVpLJ">Feedback</a>.

FluxTracker Feedback allows you to put a little feedback widget on your site that can be used to collect information from your users, such as feature requests, support requests, and general comments. This feedback is automatically added to your FluxTracker project and from there it's up to you to decide what you want to do with it. Of course it supports FluxTracker's Issue Connect system so you can turn that customer feedback into an actionable issue with just one click?

Now you're probably saying to yourself, I bet it's really difficult to implement on my site. Well, you'd be wrong! It's as simple as just adding one line to your site:

<a href="http://www.fluxtracker.com/pages/api/feedback">http://www.fluxtracker.com/pages/api/feedback</a>

The widget can be customized too. CSS, text, and even the questions can be customized (well, depending on the plan you're on). Just check out the Feedback tab on the right side of the page to see the Feedback widget in action.

Well, as you can tell I'm very excited about this. I think it really makes FluxTracker the true center for managing your application, and I think  you'll find that too. Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date>2011-06-13 11:00:24</wp:post_date>
		<wp:post_date_gmt>2011-06-13 16:00:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>collect-user-feedback-through-fluxtracker-com</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="feedback"><![CDATA[feedback]]></category>
		<category domain="post_tag" nicename="fluxtracker"><![CDATA[fluxtracker]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="issue-tracking"><![CDATA[issue tracking]]></category>
		<category domain="post_tag" nicename="project-management"><![CDATA[project management]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Backup and Bookmark your Tweets with TweetKO.com</title>
		<link>http://www.metabates.com/2011/06/19/backup-and-bookmark-your-tweets-with-tweetko-com/</link>
		<pubDate>Sun, 19 Jun 2011 21:18:19 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=468</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.metabates.com/wp-content/uploads/2011/06/bigbird_sq.png"><img class="alignleft size-medium wp-image-469" title="bigbird_sq" src="http://www.metabates.com/wp-content/uploads/2011/06/bigbird_sq-300x300.png" alt="" width="300" height="300" /></a>Twitter is an incredibly rich source of information. I find out about new libraries, applications, plugins, screen casts, etc... But, there's a problem with is overwhelming amount of information... keeping track of it all. A lot of time I read Twitter when I'm on my phone. I'll see a link to an article or website, etc... but I don't have time to read it then, what do I do? How do I find that tweet later? Or what about that announcement or news link for a new service or application that I saw six months ago? How do I find that again?

Twitter is great but it's ability to help you find specific tweets that are important to you is almost important. That's why today I'm happy to announce <a href="http://tweetko.com">TweetKO.com</a>. TweetKO solves this problem by using the built 'favorite' functionality that Twitter offers. From <em>ANY </em>Twitter client you can simply mark a tweet as a favorite and TweetKO will pull it in and save it for you so you can find it later.

That's it! It really is that simple. TweetKO is <strong>FREE</strong> and easy to use. In addition to pulling in your favorite tweets you can tell TweetKO to also pull in any tweets you wrote or retweeted, effectively backing up your Twitter history. A powerful search makes finding those tweets simple and easy. Plus you can save those search queries for later use.

Well, I hope you check out TweetKO.com and find it as useful as I do. Enjoy!
<h3 style="text-align: center;"><span style="text-decoration: underline;"><a href="http://tweetko.com">http://tweetko.com - Sign up for Free Now!</a></span></h3>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>468</wp:post_id>
		<wp:post_date>2011-06-19 16:18:19</wp:post_date>
		<wp:post_date_gmt>2011-06-19 21:18:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>backup-and-bookmark-your-tweets-with-tweetko-com</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="news"><![CDATA[News]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="post_tag" nicename="tweetko"><![CDATA[tweetko]]></category>
		<category domain="post_tag" nicename="tweets"><![CDATA[tweets]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>777</wp:comment_id>
			<wp:comment_author><![CDATA[Scott Annan]]></wp:comment_author>
			<wp:comment_author_email>scott.annan@mercurygrove.com</wp:comment_author_email>
			<wp:comment_author_url>http://networkhippo.com</wp:comment_author_url>
			<wp:comment_author_IP>70.25.66.174</wp:comment_author_IP>
			<wp:comment_date>2011-06-27 16:13:21</wp:comment_date>
			<wp:comment_date_gmt>2011-06-27 21:13:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Mark - love this idea!!!  We were working on something similar a few months back and so glad to see it arrive!

Only problem is that I got an Oauth error when trying to connect twitter :-(

Lemme know when it's working - would love to check it out and provide feedback!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1309209201.143";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1309282434.174";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>778</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.7.47.231</wp:comment_author_IP>
			<wp:comment_date>2011-06-28 12:34:30</wp:comment_date>
			<wp:comment_date_gmt>2011-06-28 17:34:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hmm... not sure why you were getting an error, Twitter down perhaps? Try again, it should be working.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>777</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309282470.4059";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Let&#039;s say goodbye to YAML for configuration, shall we?</title>
		<link>http://www.metabates.com/2011/06/28/lets-say-goodbye-to-yaml-for-configuration-shall-we/</link>
		<pubDate>Tue, 28 Jun 2011 17:31:46 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=482</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.metabates.com/wp-content/uploads/2011/06/yml.png"><img class="alignleft size-medium wp-image-489" title="yml" src="http://www.metabates.com/wp-content/uploads/2011/06/yml-300x300.png" alt="" width="180" height="180" /></a>I have to ask a question to my fellow Rubyists out there? Why are you still using YAML? I know why you <em>think</em> you like YAML. You think it's a great way to write configuration files, but it's really not. You know what's a great way of writing configuration files for Ruby apps? RUBY!

I know it's crazy, isn't it? But why not? Why would you not want to use Ruby for configuring your applications instead of YAML?

I'm the maintainer of a pretty popular configuration tool for Ruby apps, <a href="http://github.com/markbates/configatron">Configatron</a>, so I think I have a little experience in this field. I also write and maintain a lot of libraries that require configuration and I have never thought that YAML is the best way to do this.

Let's look at an example of what a library developer has to do to load a YAML file to get configurations:

[gist id=1051635 bump=1]

I don't know about you, but I think that's kind of lame. Most everybody runs their YAML files through ERB so that they can make their YAML files more 'Ruby-ish'. Why not just use Ruby?? Here's the same example in Ruby:

[gist id=1051638 bump=1]

In addition to not having to deal with all the whitespace, tabs, crazy nesting, etc... that YAML brings we get to use the full power of Ruby for our configurations! Try storing a Proc in YAML. Yeah, that's what I thought. You can drive configurations from the database, environment variables, crazy equations, etc... the world is your oyster. All you need to do now is stop using YAML!

I've decided to drop YAML support in Configatron 2.9 (coming sometime this Summer) and I encourage all other library developers to do the same. It's just not needed, or very nice for that matter. Now, if we can only get Rails to drop the database.yml file, I think we'll be all set.

<address>Ps. Make sure to check out my app <a href="http://www.fluxtracker.com?ref=yaml">FluxTracker.com</a> for all your issue, project, and error tracking needs. Also check out <a href="http://tweetko.com?ref=yaml">TweetKO.com</a> for backing up and bookmarking your favorite tweets.</address>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>482</wp:post_id>
		<wp:post_date>2011-06-28 12:31:46</wp:post_date>
		<wp:post_date_gmt>2011-06-28 17:31:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lets-say-goodbye-to-yaml-for-configuration-shall-we</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configatron"><![CDATA[configatron]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="yaml"><![CDATA[yaml]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>783</wp:comment_id>
			<wp:comment_author><![CDATA[Kurtis Rainbolt-Greene]]></wp:comment_author>
			<wp:comment_author_email>kurtisrainboltgreene@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://krainboltgreene.heroku.com</wp:comment_author_url>
			<wp:comment_author_IP>67.171.208.36</wp:comment_author_IP>
			<wp:comment_date>2011-06-28 23:32:25</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 04:32:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If data is in rest, is meant to be read by a human but parsed by a machine, then it should be in YAML.

&gt;  Most everybody runs their YAML files through ERB so that they can make their YAML files more ‘Ruby-ish’.

No, people run YAML files through Ruby in order to account for dynamic attributes. This is the incorrect way to handle dynamic data. The correct way would be to make subset data based on a parent data set. Example:

    defaults: &amp;defaults
      host: localhost

    production:
      &lt;&lt;: *defaults
      uri: 

&gt; Try storing a Proc in YAML. Yeah, that’s what I thought. 

Procs aren't stationary data. This is a moot point.

&gt; All you need to do now is stop using YAML!

Great, now what if you want to share your stationary data with another language? Have you ever attempted to write "require 'path/to/config.rb" in a Python script? I bet not, because it wouldn't work.

The YAML library is in nearly *every* language, Ruby isn't.

&gt; Now, if we can only get Rails to drop the database.yml file, I think we’ll be all set.

Good luck with that, seriously. Because it's never happening. Because easily machine readable stationary data specifications are *incredibly superior* to some block statement you just wrote, which will likely change fifty times over a given version. YAML will stay the same.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567911.5284";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309321945.8448";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>788</wp:comment_id>
			<wp:comment_author><![CDATA[Joe Fiorini]]></wp:comment_author>
			<wp:comment_author_email>joe@joefiorini.com</wp:comment_author_email>
			<wp:comment_author_url>http://userobsessed.net</wp:comment_author_url>
			<wp:comment_author_IP>98.100.72.234</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 11:10:36</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 16:10:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I  implemented a pure-Ruby database configuration DSL for Rails last year inspired by a similar post from Joe O'Brien (http://objo.com/2010/10/14/why-yml/). It was a thought experiment so I never submitted a patch or anything, but I did have it working. Maybe it's time to reconsider? https://gist.github.com/628508#file_database.rb]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567791.2883";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309363836.1127";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>779</wp:comment_id>
			<wp:comment_author><![CDATA[Jason King]]></wp:comment_author>
			<wp:comment_author_email>jk@handle.it</wp:comment_author_email>
			<wp:comment_author_url>http://flow.handle.it/</wp:comment_author_url>
			<wp:comment_author_IP>72.214.22.18</wp:comment_author_IP>
			<wp:comment_date>2011-06-28 13:41:07</wp:comment_date>
			<wp:comment_date_gmt>2011-06-28 18:41:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[But if I did that, then I wouldn't be able to read my database configuration file from the legacy parts of my app that are still in PHP.  Long live database.yml!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567953.6008";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309286467.4689";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>792</wp:comment_id>
			<wp:comment_author><![CDATA[jorge]]></wp:comment_author>
			<wp:comment_author_email>jorge@wyeworks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>186.48.229.236</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 21:48:32</wp:comment_date>
			<wp:comment_date_gmt>2011-06-30 02:48:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What about internationalization files, for example? It sounds like very large files, probably with several nested levels, in this case YAML seems more suitable. This is just an example where a config file written in ruby code could be a bit annoying, too many braces and too many =&gt; operators]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567723.9364";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309402112.7912";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>798</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin Elliott]]></wp:comment_author>
			<wp:comment_author_email>kevin@phunc.com</wp:comment_author_email>
			<wp:comment_author_url>http://kevinelliott.net/</wp:comment_author_url>
			<wp:comment_author_IP>99.113.35.110</wp:comment_author_IP>
			<wp:comment_date>2011-07-05 23:46:57</wp:comment_date>
			<wp:comment_date_gmt>2011-07-06 04:46:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have to agree with most of the other commenters. I think configuration in Ruby is a poor way to implement human-readable configuration options. Not all configurations should have to be ported when implementation is changed, and sometimes a configuration is shared across implementations. Also, YAML is more concise, certainly less verbose than a Ruby-based config.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309927617.3757";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1318878376.8305";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>791</wp:comment_id>
			<wp:comment_author><![CDATA[Francesc Rosàs]]></wp:comment_author>
			<wp:comment_author_email>francescrosasbosque@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://frosas.net/</wp:comment_author_url>
			<wp:comment_author_IP>87.219.231.93</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 21:13:29</wp:comment_date>
			<wp:comment_date_gmt>2011-06-30 02:13:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Two reasons why I've chosen YAML for configuration for my company SaaS CMS:

- It is programmatically modifiable
- It is not a programming language so any user can edit it without doing any harm

OTOH we also use application language (PHP, in our case) as configuration language on other simpler scenarios.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567736.0675";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309400010.0067";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>787</wp:comment_id>
			<wp:comment_author><![CDATA[grimen]]></wp:comment_author>
			<wp:comment_author_email>grimen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.209.94.162</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 07:51:03</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 12:51:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[YAML is excellent for MOST configs. If you have problems procs all over the place, use Ruby. if you don't, don't let a 2-liner require vs 1-liner require get you started preaching that YAML sycks for config. I would say Ruby sucks for config IMO; it was designed for expressing logic in first place. YAML is excellent example of "keep it simple".

Why do Rubyists preach all this kind of best-practices that are really not best practices? I do wonder sometimes.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309351865.8851";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>784</wp:comment_id>
			<wp:comment_author><![CDATA[Bohdan Schepansky]]></wp:comment_author>
			<wp:comment_author_email>alfuken@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>110.164.214.200</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 04:33:42</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 09:33:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I believe YAML as a config solutions in Rails is also kind of a "fool proof protection". If all the configs would be stored in ruby, imagine what one can do in config files at some point: creating methods that generate helpers that generate config hashes that include links to files for dynamig config generation. Imagine the pain maintainer will have...
I've had a chance to work on python based projects and php based projects, and very vast amounts of those used config files written in project's native language. Believe me, most of them was just a plain horror. I'm afraid, at some point such fate can hit rails too, and I wouldn't like that,
Yeah, metaprogramming is good, but... let's just keep it simple, shall we? All in all, if you need to put a proc in your config, then may be you're doing something wrong.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567869.1041";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309340022.8309";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>785</wp:comment_id>
			<wp:comment_author><![CDATA[trans]]></wp:comment_author>
			<wp:comment_author_email>transfire@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.119.230.177</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 04:35:41</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 09:35:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your examples are not quite equivalent. Use:

    SomeLibrary.config = {
      'foo' =&gt; 'bar'
    }

Query: what if your app uses more than one configuration file?

Also, I think your article is somewhat misleading. A YAML file can get pretty large and still be very clean, Ruby, being a full-on programming language, has much more deliminator overhead. Try a few hash in hash layers and see how they fare.

Other advantages of YAML to consider:

* It can be read by most any program regardless of programming language. 
* It can be more secure because it is static (when not using ERB).
* Support for YAML is distributed with Ruby.

YAML is pretty damn awesome too if you think about it, and if anything it needs more support from us so it can actually displace all this awful XML that's used in "enterprisey" worlds.

BTW Don't need a Proc:

    foo-action:
      puts "Yea that's right".

Ruby has eval ;)

(Nothing against Configatron though. It's look like a fine library. I just (heart) my YAML.)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567842.7057";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309340141.8706";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>834</wp:comment_id>
			<wp:comment_author><![CDATA[Roly]]></wp:comment_author>
			<wp:comment_author_email>roly426@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.201.75.116</wp:comment_author_IP>
			<wp:comment_date>2011-08-17 11:45:53</wp:comment_date>
			<wp:comment_date_gmt>2011-08-17 16:45:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your initial premise about having to type too much to include a yaml config file is negated by the fact that the point of yaml is to type less and understand more in the yaml file, not in the code you're including the file in. And when you're writing your library are you really going to be changing that yaml load function? probably not. but you might change your config file a few times.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1313669641.9082";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1313599553.9338";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>820</wp:comment_id>
			<wp:comment_author><![CDATA[Greg]]></wp:comment_author>
			<wp:comment_author_email>gdaniluk@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.75.70.129</wp:comment_author_IP>
			<wp:comment_date>2011-08-06 11:58:42</wp:comment_date>
			<wp:comment_date_gmt>2011-08-06 16:58:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Configatron without YAML

Pros
- That ugly hack with changing YAML engine causes serious problems under JRuby.

Cons
- Does the same job as Configuration gem which is much simpler.  And Configuration gem does not pollute Ruby base classes with its own extensions.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1312650000.957";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312649922.6087";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>786</wp:comment_id>
			<wp:comment_author><![CDATA[Ivo]]></wp:comment_author>
			<wp:comment_author_email>munaught@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.68.74.5</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 07:26:13</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 12:26:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; Most everybody runs their YAML files through ERB so that they can make their YAML files more ‘Ruby-ish’.
&gt;
Really? We mostly use the simple: YAML.load_file('/path/to/config.yml'). That's sufficient for most purposes. When it needs to be more complex, agreed, just use Ruby to specify the configuration.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567802.8811";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309350373.6865";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>780</wp:comment_id>
			<wp:comment_author><![CDATA[libogski]]></wp:comment_author>
			<wp:comment_author_email>titelibogski@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>112.206.71.232</wp:comment_author_IP>
			<wp:comment_date>2011-06-28 15:31:02</wp:comment_date>
			<wp:comment_date_gmt>2011-06-28 20:31:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[we use yaml as a replacement for xml in our config files, because those files will be read by ruby and java. if those config files were written in ruby, how will java read them??  

if your project files will never be read by antyhing other than ruby, its ok to write those configs in ruby.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309293062.7176";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567947.1218";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>781</wp:comment_id>
			<wp:comment_author><![CDATA[postmodern]]></wp:comment_author>
			<wp:comment_author_email>postmodern.mod3@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://postmodern.github.com/</wp:comment_author_url>
			<wp:comment_author_IP>71.237.178.98</wp:comment_author_IP>
			<wp:comment_date>2011-06-28 15:43:37</wp:comment_date>
			<wp:comment_date_gmt>2011-06-28 20:43:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't see what is wrong with YAML? Well, there is definitely something wrong with the Syck parser. However, YAML is great for representing key-value primitive data. It's actually very easy to represent arbitrary blocks of text in YAML (http://bit.ly/lwwCSb). YAML ships with every Ruby environment, no dependencies needed.

As for loading Procs or other arbitrary instances of Classes, checkout ObjectLoader (http://github.com/postmodern/object_loader).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567929.1381";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1309293817.273";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>789</wp:comment_id>
			<wp:comment_author><![CDATA[Andi Altendorfer]]></wp:comment_author>
			<wp:comment_author_email>andreas@altendorfer.at</wp:comment_author_email>
			<wp:comment_author_url>http://cba.iboard.cc</wp:comment_author_url>
			<wp:comment_author_IP>90.146.128.163</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 11:25:21</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 16:25:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I prefer YAML-configuration for configuration the user (admin) may change through the web interface, because it's easy to write back yaml-code into a file. For configurations which will not change at runtime of the app I prefer the ruby-way. Tho, I {blush}didn't make this split consequently yet{/blush}.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567782.3814";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309364721.8521";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>790</wp:comment_id>
			<wp:comment_author><![CDATA[oleg]]></wp:comment_author>
			<wp:comment_author_email>nn@bsdpower.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>204.19.0.214</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 13:43:44</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 18:43:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is amusing, but for most projects counterproductive.

The example provided grew 3x in overall size and 5x in the amount of punctuation necessary, for achieving the same thing. Not really an improvement.

The idea of a configuration file, usually, is to provide a *simple* means of configuring the program. When you are editing config file on a server in a terminal you don't want any of "full power of ruby".

If you are writing a program for users (as opposed to a ruby library for ruby developers) your users may not even know ruby syntax. Yaml on the other hand is easy to understand.

Now, providing a ruby configuration api for a ruby library is an entirely different story.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309567763.8013";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309373024.7093";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>CoffeeScript - A Rubyist&#039;s Love Affair</title>
		<link>http://www.metabates.com/2011/08/10/coffeescript-a-rubyists-love-affair/</link>
		<pubDate>Wed, 10 Aug 2011 13:55:20 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=499</guid>
		<description></description>
		<content:encoded><![CDATA[Last night I had the pleasure of presenting to the <a href="http://www.bostonrb.org">Boston Ruby User's Group</a> on CoffeeScript. My talk was geared to helping Rubyists understand, and hopefully love, CoffeeScript. Along the way I tried to debunk a few myths and preconceptions as to what CoffeeScript is and isn't. The reaction was really positive, so hopefully I did my job. Anyway, here are the slides:

<a href="http://www.slideshare.net/markykang/coffeescript-bostonrb-892011">http://www.slideshare.net/markykang/coffeescript-bostonrb-892011</a>

&nbsp;

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>499</wp:post_id>
		<wp:post_date>2011-08-10 08:55:20</wp:post_date>
		<wp:post_date_gmt>2011-08-10 13:55:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coffeescript-a-rubyists-love-affair</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bostonrb"><![CDATA[bostonrb]]></category>
		<category domain="post_tag" nicename="coffee-script"><![CDATA[coffee script]]></category>
		<category domain="post_tag" nicename="coffeescript"><![CDATA[coffeescript]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Sprockets without Rails</title>
		<link>http://www.metabates.com/2011/08/31/using-sprockets-without-rails/</link>
		<pubDate>Wed, 31 Aug 2011 19:17:23 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=503</guid>
		<description></description>
		<content:encoded><![CDATA[I've started working this week on an example application for the next book I'm about to write and I wanted a simple way for my readers to easily run the app (it's going to be a single HTML file with a ton of cool JavaScript going on in it). My first choice for running this app was to use the popular Ruby library, <a href="http://rack.rubyforge.org/" target="_blank">Rack</a>. If you are unfamiliar with Rack, please check it out. It provides a simple interface for writing web applications. By writing a simple Ruby file readers can use their favorite Rack compatible web server to launch the application. Sounds simple, eh? That's because it is.

With a simple Rack application written in a few lines of code I was able to start developing my example application. That's when I realized I needed a good way to serve up all my <a href="http://jashkenas.github.com/coffee-script/" target="_blank">CoffeeScript</a> and <a href="http://sass-lang.com/" target="_blank">Sass</a> files. I was going to write a watchr script that did this, but I thought that was a bit heavy handed, and not very flexible, so I turned to <a href="https://github.com/sstephenson/sprockets" target="_blank">Sprockets</a>.

Sprockets recently gained a lot of attention because it is bundled in with <a href="http://guides.rubyonrails.org/3_1_release_notes.html" target="_blank">Rails 3.1</a> to serve up an application's assets. It's a clever little library that will process your files using CoffeeScript, Sass, etc... and let you bundle them up in to a single asset by using a manifest. That was exactly what I wanted. After I spent the better part of an afternoon doing a bit of research and debugging here is the Rack configuration file I came up with:

[gist id=1184400 bump=1]

That will serve
<pre>/assets/application.css</pre>
via Sprockets. The file itself will live in
<pre>&lt;pwd&gt;/app/assets/stylesheets/application.scss</pre>
The same goes for JavaScript files.

Hopefully this will save someone else a little of time when they're trying to do the same thing. Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>503</wp:post_id>
		<wp:post_date>2011-08-31 14:17:23</wp:post_date>
		<wp:post_date_gmt>2011-08-31 19:17:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-sprockets-without-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="coffee-script"><![CDATA[coffee script]]></category>
		<category domain="post_tag" nicename="coffeescript"><![CDATA[coffeescript]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="rack"><![CDATA[rack]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="sprockets"><![CDATA[sprockets]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Adding Pagination to an API</title>
		<link>http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/</link>
		<pubDate>Thu, 23 Feb 2012 03:15:08 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.metabates.com/?p=533</guid>
		<description></description>
		<content:encoded><![CDATA[<img alt="" src="http://www.robertsabuda.com/store/images/sharks_shark.jpg" title="popup book" class="alignleft" width="250" /><em>Before I start this article, let me apologize for the lack of writing over the last six months. My only excuse is that I've been working on a new book and that is where all my writing energy has gone. So with apologies out of the way, let's talk pagination.</em>

Dealing with pagination in any application is never easy. There are a lot of great libraries out there that help you better handle this awkward, but unavoidable part of application programming. Things get even more complicated when you are trying to define an API.

APIs are fickle beasts. They have to be both clean and functional. Two things that are often at odds with one another. No sooner does clean and functional have a go at each than when trying to add pagination to an API. Pagination requires all sorts of meta-data; how many total results there are, how pages there are, etc...

There are two approaches to handling pagination in your API, let's look at those two approaches in this article.

The first approach is the easiest one to code, but I find it to be the most intrusive and less clean approach. A typical response would look something like this:

[gist id=1889261 bump=2]

Here the API returns the pagination meta-data right inside of the JSON response. The advantage here is that everything is very visible to the end developer. They can easily see the details of the pagination, as well as the <code>widgets</code> element which contains the array of data the end user was most likely looking for when they requested the API.

The downside of this approach is that the pagination meta-data is right there in the body of the response. The client trying to use the API has to dig into the response to extract the data it was originally looking for, potentially ignoring the pagination meta-data, if it doesn't need it.

The other way to send the pagination meta-data along with our response is in the headers of the response. This is my preferred way of handling this situation.

Let's look at how we can do this in a Rails application using WillPaginate. Of course if you're not using WillPaginate you can easily substitute your pagination library of choice.

I start by creating a class method in <code>ApplicationController</code> that will create an <code>after_filter</code> that will set the pagination meta-data in the response headers:

[gist id=1889206 bump=2]

Then in the controller we want to add pagination headers we can call it like such:

[gist id=1889221 bump=2]

Now when someone calls the <code>index</code> action on the <code>API::V1::WidgetsController</code> it will respond with JSON that looks like this:

[gist id=1889259 bump=2]

And with response headers that look like this:

[gist id=1889226 bump=2]

Now the client can easily gain access to the array of widgets they originally wanted, and should they need the pagination meta-data the client can just easily pull that information right out of the headers.

The API is once again nice and clean and yet it can now easily be paginated.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>533</wp:post_id>
		<wp:post_date>2012-02-22 22:15:08</wp:post_date>
		<wp:post_date_gmt>2012-02-23 03:15:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adding-pagination-to-an-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="json"><![CDATA[json]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<category domain="post_tag" nicename="will_paginate"><![CDATA[will_paginate]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1050</wp:comment_id>
			<wp:comment_author><![CDATA[Justin Ko]]></wp:comment_author>
			<wp:comment_author_email>justin@kospecinc.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.25.174.240</wp:comment_author_IP>
			<wp:comment_date>2012-03-09 07:50:28</wp:comment_date>
			<wp:comment_date_gmt>2012-03-09 12:50:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For any non-standard header, you want to prefix it with "X":

"X-Pagination"

Otherwise, I do like this approach. Pagination is sort of "metadata".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331297429.0298";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1331297780.145";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1117</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.7.47.231</wp:comment_author_IP>
			<wp:comment_date>2012-03-22 07:15:00</wp:comment_date>
			<wp:comment_date_gmt>2012-03-22 12:15:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Justin, you're right. After I published this I changed it in my code. Perhaps I should update the example code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332418500.7776";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:64:{s:15:"comment_post_ID";s:3:"533";s:14:"comment_author";s:10:"Mark Bates";s:20:"comment_author_email";s:18:"mark@markbates.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:111:"Justin, you're right. After I published this I changed it in my code. Perhaps I should update the example code.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:12:"108.7.47.231";s:10:"user_agent";s:125:"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3";s:8:"referrer";s:64:"http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/";s:4:"blog";s:24:"http://www.metabates.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:64:"http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:112:"Justin, you're right. After I published this I changed it in my code. Perhaps I should update the example code. ";s:11:"POST_submit";s:14:"Submit Comment";s:20:"POST_comment_post_ID";s:3:"533";s:10:"POST_refJS";s:0:"";s:32:"POST__wp_unfiltered_html_comment";s:10:"467e34e0b5";s:26:"POST_akismet_comment_nonce";s:10:"170a94bbd2";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"PATH";s:29:"/bin:/usr/bin:/sbin:/usr/sbin";s:9:"RAILS_ENV";s:10:"production";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:9:"UNIQUE_ID";s:24:"T2sXwkt30k4AAGzzL6cAAAAL";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:45:"http://www.metabates.com/wp-comments-post.php";s:4:"dsid";s:8:"10895691";s:14:"ds_id_10895691";s:0:"";s:7:"DH_USER";s:10:"mframework";s:9:"HTTP_HOST";s:17:"www.metabates.com";s:15:"HTTP_USER_AGENT";s:125:"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3";s:14:"CONTENT_LENGTH";s:3:"245";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:24:"http://www.metabates.com";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:64:"http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/";s:20:"HTTP_ACCEPT_LANGUAGE";s:5:"en-us";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:11:"HTTP_COOKIE";s:0:"";s:15:"HTTP_CONNECTION";s:5:"close";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:17:"www.metabates.com";s:11:"SERVER_ADDR";s:14:"75.119.210.133";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:12:"108.7.47.231";s:13:"DOCUMENT_ROOT";s:34:"/home/mframework/mackframework.com";s:12:"SERVER_ADMIN";s:23:"webmaster@metabates.com";s:15:"SCRIPT_FILENAME";s:55:"/home/mframework/mackframework.com/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"59429";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1332418498";s:4:"argv";s:0:"";s:4:"argc";s:1:"0";s:25:"comment_post_modified_gmt";s:19:"2012-02-23 12:28:40";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1118</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Bates]]></wp:comment_author>
			<wp:comment_author_email>mark@markbates.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.7.47.231</wp:comment_author_IP>
			<wp:comment_date>2012-03-22 07:17:10</wp:comment_date>
			<wp:comment_date_gmt>2012-03-22 12:17:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ravi, if you want to add it in the body then I would recommend using some sort of presenter class. Personally, I think meta data should stay out of the body, but that's just me.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332418631.3485";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:64:{s:15:"comment_post_ID";s:3:"533";s:14:"comment_author";s:10:"Mark Bates";s:20:"comment_author_email";s:18:"mark@markbates.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:177:"Ravi, if you want to add it in the body then I would recommend using some sort of presenter class. Personally, I think meta data should stay out of the body, but that's just me.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:12:"108.7.47.231";s:10:"user_agent";s:125:"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3";s:8:"referrer";s:79:"http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/comment-page-1/";s:4:"blog";s:24:"http://www.metabates.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:64:"http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:178:"Ravi, if you want to add it in the body then I would recommend using some sort of presenter class. Personally, I think meta data should stay out of the body, but that's just me. ";s:11:"POST_submit";s:14:"Submit Comment";s:20:"POST_comment_post_ID";s:3:"533";s:10:"POST_refJS";s:66:"http%3A//www.metabates.com/2012/02/22/adding-pagination-to-an-api/";s:32:"POST__wp_unfiltered_html_comment";s:10:"467e34e0b5";s:26:"POST_akismet_comment_nonce";s:10:"170a94bbd2";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"PATH";s:29:"/bin:/usr/bin:/sbin:/usr/sbin";s:9:"RAILS_ENV";s:10:"production";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:9:"UNIQUE_ID";s:24:"T2sYREt30k4AAIf8jBIAAAAO";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:45:"http://www.metabates.com/wp-comments-post.php";s:4:"dsid";s:8:"10895691";s:14:"ds_id_10895691";s:0:"";s:7:"DH_USER";s:10:"mframework";s:9:"HTTP_HOST";s:17:"www.metabates.com";s:15:"HTTP_USER_AGENT";s:125:"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3";s:14:"CONTENT_LENGTH";s:3:"397";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:24:"http://www.metabates.com";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:79:"http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/comment-page-1/";s:20:"HTTP_ACCEPT_LANGUAGE";s:5:"en-us";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:11:"HTTP_COOKIE";s:0:"";s:15:"HTTP_CONNECTION";s:5:"close";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:17:"www.metabates.com";s:11:"SERVER_ADDR";s:14:"75.119.210.133";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:12:"108.7.47.231";s:13:"DOCUMENT_ROOT";s:34:"/home/mframework/mackframework.com";s:12:"SERVER_ADMIN";s:23:"webmaster@metabates.com";s:15:"SCRIPT_FILENAME";s:55:"/home/mframework/mackframework.com/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"59440";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1332418628";s:4:"argv";s:0:"";s:4:"argc";s:1:"0";s:25:"comment_post_modified_gmt";s:19:"2012-02-23 12:28:40";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1116</wp:comment_id>
			<wp:comment_author><![CDATA[Ravi theja]]></wp:comment_author>
			<wp:comment_author_email>royalraviteja@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.196.189.94</wp:comment_author_IP>
			<wp:comment_date>2012-03-22 06:58:55</wp:comment_date>
			<wp:comment_date_gmt>2012-03-22 11:58:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
Thanks for the material. But I wanna add meta data in the response of API itself. How can i implement that?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332417771.3052";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332417535.5001";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:67:{s:15:"comment_post_ID";s:3:"533";s:14:"comment_author";s:10:"Ravi theja";s:20:"comment_author_email";s:23:"royalraviteja@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:112:"Hi,
Thanks for the material. But I wanna add meta data in the response of API itself. How can i implement that?";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:14:"203.196.189.94";s:10:"user_agent";s:100:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11";s:8:"referrer";s:64:"http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/";s:4:"blog";s:24:"http://www.metabates.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:64:"http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:10:"Ravi theja";s:10:"POST_email";s:23:"royalraviteja@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:114:"Hi,
Thanks for the material. But I wanna add meta data in the response of API itself. How can i implement that?
";s:11:"POST_submit";s:14:"Submit Comment";s:20:"POST_comment_post_ID";s:3:"533";s:10:"POST_refJS";s:27:"http%3A//www.metabates.com/";s:26:"POST_akismet_comment_nonce";s:10:"605540d143";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"PATH";s:29:"/bin:/usr/bin:/sbin:/usr/sbin";s:9:"RAILS_ENV";s:10:"production";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:9:"UNIQUE_ID";s:24:"T2sT8Et30k4AAGEIr@8AAAAH";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:45:"http://www.metabates.com/wp-comments-post.php";s:4:"dsid";s:8:"10895691";s:14:"ds_id_10895691";s:0:"";s:7:"DH_USER";s:10:"mframework";s:9:"HTTP_HOST";s:17:"www.metabates.com";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"CONTENT_LENGTH";s:3:"306";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ORIGIN";s:24:"http://www.metabates.com";s:15:"HTTP_USER_AGENT";s:100:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:12:"HTTP_REFERER";s:64:"http://www.metabates.com/2012/02/22/adding-pagination-to-an-api/";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:11:"HTTP_COOKIE";s:0:"";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:17:"www.metabates.com";s:11:"SERVER_ADDR";s:14:"75.119.210.133";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:14:"203.196.189.94";s:13:"DOCUMENT_ROOT";s:34:"/home/mframework/mackframework.com";s:12:"SERVER_ADMIN";s:23:"webmaster@metabates.com";s:15:"SCRIPT_FILENAME";s:55:"/home/mframework/mackframework.com/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"56128";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1332417520";s:4:"argv";s:0:"";s:4:"argc";s:1:"0";s:25:"comment_post_modified_gmt";s:19:"2012-02-23 12:28:40";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
